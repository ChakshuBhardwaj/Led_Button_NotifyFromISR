
Led_Button_TaskNotifyISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006900  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006ab0  08006ab0  00016ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b70  08006b70  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006b70  08006b70  00016b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b78  08006b78  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b78  08006b78  00016b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b7c  08006b7c  00016b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00013490  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200134a4  200134a4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001456b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d25  00000000  00000000  000345af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  000372d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001168  00000000  00000000  000385a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023929  00000000  00000000  00039710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014436  00000000  00000000  0005d039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e70cd  00000000  00000000  0007146f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015853c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f1c  00000000  00000000  0015858c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006a98 	.word	0x08006a98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08006a98 	.word	0x08006a98

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e7c 	.word	0x20012e7c

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f103 0208 	add.w	r2, r3, #8
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f04f 32ff 	mov.w	r2, #4294967295
 80005a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f103 0208 	add.w	r2, r3, #8
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f103 0208 	add.w	r2, r3, #8
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005e2:	b480      	push	{r7}
 80005e4:	b085      	sub	sp, #20
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	689a      	ldr	r2, [r3, #8]
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	1c5a      	adds	r2, r3, #1
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	601a      	str	r2, [r3, #0]
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800062a:	b480      	push	{r7}
 800062c:	b085      	sub	sp, #20
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000640:	d103      	bne.n	800064a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	691b      	ldr	r3, [r3, #16]
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	e00c      	b.n	8000664 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3308      	adds	r3, #8
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	e002      	b.n	8000658 <vListInsert+0x2e>
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	429a      	cmp	r2, r3
 8000662:	d2f6      	bcs.n	8000652 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	6892      	ldr	r2, [r2, #8]
 80006b2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	6852      	ldr	r2, [r2, #4]
 80006bc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d103      	bne.n	80006d0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	689a      	ldr	r2, [r3, #8]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	1e5a      	subs	r2, r3, #1
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d10a      	bne.n	800071a <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000708:	f383 8811 	msr	BASEPRI, r3
 800070c:	f3bf 8f6f 	isb	sy
 8000710:	f3bf 8f4f 	dsb	sy
 8000714:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000716:	bf00      	nop
 8000718:	e7fe      	b.n	8000718 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800071a:	f002 fa7d 	bl	8002c18 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000726:	68f9      	ldr	r1, [r7, #12]
 8000728:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800072a:	fb01 f303 	mul.w	r3, r1, r3
 800072e:	441a      	add	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2200      	movs	r2, #0
 8000738:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800074a:	3b01      	subs	r3, #1
 800074c:	68f9      	ldr	r1, [r7, #12]
 800074e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000750:	fb01 f303 	mul.w	r3, r1, r3
 8000754:	441a      	add	r2, r3
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	22ff      	movs	r2, #255	; 0xff
 800075e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	22ff      	movs	r2, #255	; 0xff
 8000766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d114      	bne.n	800079a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	691b      	ldr	r3, [r3, #16]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d01a      	beq.n	80007ae <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3310      	adds	r3, #16
 800077c:	4618      	mov	r0, r3
 800077e:	f001 f9b7 	bl	8001af0 <xTaskRemoveFromEventList>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d012      	beq.n	80007ae <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <xQueueGenericReset+0xcc>)
 800078a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	f3bf 8f4f 	dsb	sy
 8000794:	f3bf 8f6f 	isb	sy
 8000798:	e009      	b.n	80007ae <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	3310      	adds	r3, #16
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fef2 	bl	8000588 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3324      	adds	r3, #36	; 0x24
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff feed 	bl	8000588 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80007ae:	f002 fa63 	bl	8002c78 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80007b2:	2301      	movs	r3, #1
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	e000ed04 	.word	0xe000ed04

080007c0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af02      	add	r7, sp, #8
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	4613      	mov	r3, r2
 80007cc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10a      	bne.n	80007ea <xQueueGenericCreate+0x2a>
        __asm volatile
 80007d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007d8:	f383 8811 	msr	BASEPRI, r3
 80007dc:	f3bf 8f6f 	isb	sy
 80007e0:	f3bf 8f4f 	dsb	sy
 80007e4:	61bb      	str	r3, [r7, #24]
    }
 80007e6:	bf00      	nop
 80007e8:	e7fe      	b.n	80007e8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d006      	beq.n	8000808 <xQueueGenericCreate+0x48>
 80007fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	429a      	cmp	r2, r3
 8000806:	d101      	bne.n	800080c <xQueueGenericCreate+0x4c>
 8000808:	2301      	movs	r3, #1
 800080a:	e000      	b.n	800080e <xQueueGenericCreate+0x4e>
 800080c:	2300      	movs	r3, #0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d10a      	bne.n	8000828 <xQueueGenericCreate+0x68>
        __asm volatile
 8000812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000816:	f383 8811 	msr	BASEPRI, r3
 800081a:	f3bf 8f6f 	isb	sy
 800081e:	f3bf 8f4f 	dsb	sy
 8000822:	617b      	str	r3, [r7, #20]
    }
 8000824:	bf00      	nop
 8000826:	e7fe      	b.n	8000826 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800082e:	d90a      	bls.n	8000846 <xQueueGenericCreate+0x86>
        __asm volatile
 8000830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000834:	f383 8811 	msr	BASEPRI, r3
 8000838:	f3bf 8f6f 	isb	sy
 800083c:	f3bf 8f4f 	dsb	sy
 8000840:	613b      	str	r3, [r7, #16]
    }
 8000842:	bf00      	nop
 8000844:	e7fe      	b.n	8000844 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	3350      	adds	r3, #80	; 0x50
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fb0e 	bl	8002e6c <pvPortMalloc>
 8000850:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000852:	6a3b      	ldr	r3, [r7, #32]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d00d      	beq.n	8000874 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000858:	6a3b      	ldr	r3, [r7, #32]
 800085a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	3350      	adds	r3, #80	; 0x50
 8000860:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000862:	79fa      	ldrb	r2, [r7, #7]
 8000864:	6a3b      	ldr	r3, [r7, #32]
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	4613      	mov	r3, r2
 800086a:	69fa      	ldr	r2, [r7, #28]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	f000 f805 	bl	800087e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000874:	6a3b      	ldr	r3, [r7, #32]
    }
 8000876:	4618      	mov	r0, r3
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d103      	bne.n	800089a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	e002      	b.n	80008a0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008ac:	2101      	movs	r1, #1
 80008ae:	69b8      	ldr	r0, [r7, #24]
 80008b0:	f7ff ff1e 	bl	80006f0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	78fa      	ldrb	r2, [r7, #3]
 80008b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	68f9      	ldr	r1, [r7, #12]
 80008c2:	2073      	movs	r0, #115	; 0x73
 80008c4:	f003 f9cc 	bl	8003c60 <SEGGER_SYSVIEW_RecordU32x3>
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b090      	sub	sp, #64	; 0x40
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80008e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10a      	bne.n	8000902 <xQueueGenericSend+0x32>
        __asm volatile
 80008ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008f0:	f383 8811 	msr	BASEPRI, r3
 80008f4:	f3bf 8f6f 	isb	sy
 80008f8:	f3bf 8f4f 	dsb	sy
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80008fe:	bf00      	nop
 8000900:	e7fe      	b.n	8000900 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d103      	bne.n	8000910 <xQueueGenericSend+0x40>
 8000908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	2b00      	cmp	r3, #0
 800090e:	d101      	bne.n	8000914 <xQueueGenericSend+0x44>
 8000910:	2301      	movs	r3, #1
 8000912:	e000      	b.n	8000916 <xQueueGenericSend+0x46>
 8000914:	2300      	movs	r3, #0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10a      	bne.n	8000930 <xQueueGenericSend+0x60>
        __asm volatile
 800091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800092c:	bf00      	nop
 800092e:	e7fe      	b.n	800092e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d103      	bne.n	800093e <xQueueGenericSend+0x6e>
 8000936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800093a:	2b01      	cmp	r3, #1
 800093c:	d101      	bne.n	8000942 <xQueueGenericSend+0x72>
 800093e:	2301      	movs	r3, #1
 8000940:	e000      	b.n	8000944 <xQueueGenericSend+0x74>
 8000942:	2300      	movs	r3, #0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d10a      	bne.n	800095e <xQueueGenericSend+0x8e>
        __asm volatile
 8000948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800094c:	f383 8811 	msr	BASEPRI, r3
 8000950:	f3bf 8f6f 	isb	sy
 8000954:	f3bf 8f4f 	dsb	sy
 8000958:	623b      	str	r3, [r7, #32]
    }
 800095a:	bf00      	nop
 800095c:	e7fe      	b.n	800095c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800095e:	f001 fa67 	bl	8001e30 <xTaskGetSchedulerState>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d102      	bne.n	800096e <xQueueGenericSend+0x9e>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <xQueueGenericSend+0xa2>
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <xQueueGenericSend+0xa4>
 8000972:	2300      	movs	r3, #0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d10a      	bne.n	800098e <xQueueGenericSend+0xbe>
        __asm volatile
 8000978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800097c:	f383 8811 	msr	BASEPRI, r3
 8000980:	f3bf 8f6f 	isb	sy
 8000984:	f3bf 8f4f 	dsb	sy
 8000988:	61fb      	str	r3, [r7, #28]
    }
 800098a:	bf00      	nop
 800098c:	e7fe      	b.n	800098c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800098e:	f002 f943 	bl	8002c18 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800099a:	429a      	cmp	r2, r3
 800099c:	d302      	bcc.n	80009a4 <xQueueGenericSend+0xd4>
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d136      	bne.n	8000a12 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80009a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 ff70 	bl	800488c <SEGGER_SYSVIEW_ShrinkId>
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	460b      	mov	r3, r1
 80009b6:	4601      	mov	r1, r0
 80009b8:	205a      	movs	r0, #90	; 0x5a
 80009ba:	f003 f9c7 	bl	8003d4c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009c4:	f000 fa78 	bl	8000eb8 <prvCopyDataToQueue>
 80009c8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d010      	beq.n	80009f4 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d4:	3324      	adds	r3, #36	; 0x24
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 f88a 	bl	8001af0 <xTaskRemoveFromEventList>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d013      	beq.n	8000a0a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009e2:	4b4d      	ldr	r3, [pc, #308]	; (8000b18 <xQueueGenericSend+0x248>)
 80009e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f3bf 8f4f 	dsb	sy
 80009ee:	f3bf 8f6f 	isb	sy
 80009f2:	e00a      	b.n	8000a0a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d007      	beq.n	8000a0a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009fa:	4b47      	ldr	r3, [pc, #284]	; (8000b18 <xQueueGenericSend+0x248>)
 80009fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	f3bf 8f4f 	dsb	sy
 8000a06:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000a0a:	f002 f935 	bl	8002c78 <vPortExitCritical>
                return pdPASS;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e07d      	b.n	8000b0e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d110      	bne.n	8000a3a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a18:	f002 f92e 	bl	8002c78 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 ff34 	bl	800488c <SEGGER_SYSVIEW_ShrinkId>
 8000a24:	68ba      	ldr	r2, [r7, #8]
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	4601      	mov	r1, r0
 8000a30:	205a      	movs	r0, #90	; 0x5a
 8000a32:	f003 f98b 	bl	8003d4c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e069      	b.n	8000b0e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d106      	bne.n	8000a4e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 f8b9 	bl	8001bbc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a4e:	f002 f913 	bl	8002c78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a52:	f000 fe17 	bl	8001684 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a56:	f002 f8df 	bl	8002c18 <vPortEnterCritical>
 8000a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a60:	b25b      	sxtb	r3, r3
 8000a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a66:	d103      	bne.n	8000a70 <xQueueGenericSend+0x1a0>
 8000a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a76:	b25b      	sxtb	r3, r3
 8000a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7c:	d103      	bne.n	8000a86 <xQueueGenericSend+0x1b6>
 8000a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a86:	f002 f8f7 	bl	8002c78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a8a:	1d3a      	adds	r2, r7, #4
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f8a8 	bl	8001be8 <xTaskCheckForTimeOut>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d124      	bne.n	8000ae8 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aa0:	f000 fb02 	bl	80010a8 <prvIsQueueFull>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d018      	beq.n	8000adc <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aac:	3310      	adds	r3, #16
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 ffca 	bl	8001a4c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aba:	f000 fa8d 	bl	8000fd8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000abe:	f000 fdef 	bl	80016a0 <xTaskResumeAll>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f47f af62 	bne.w	800098e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <xQueueGenericSend+0x248>)
 8000acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	f3bf 8f4f 	dsb	sy
 8000ad6:	f3bf 8f6f 	isb	sy
 8000ada:	e758      	b.n	800098e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ade:	f000 fa7b 	bl	8000fd8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ae2:	f000 fddd 	bl	80016a0 <xTaskResumeAll>
 8000ae6:	e752      	b.n	800098e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aea:	f000 fa75 	bl	8000fd8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000aee:	f000 fdd7 	bl	80016a0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 fec9 	bl	800488c <SEGGER_SYSVIEW_ShrinkId>
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	460b      	mov	r3, r1
 8000b04:	4601      	mov	r1, r0
 8000b06:	205a      	movs	r0, #90	; 0x5a
 8000b08:	f003 f920 	bl	8003d4c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000b0c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3738      	adds	r7, #56	; 0x38
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000ed04 	.word	0xe000ed04

08000b1c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b090      	sub	sp, #64	; 0x40
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10a      	bne.n	8000b4a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b38:	f383 8811 	msr	BASEPRI, r3
 8000b3c:	f3bf 8f6f 	isb	sy
 8000b40:	f3bf 8f4f 	dsb	sy
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000b46:	bf00      	nop
 8000b48:	e7fe      	b.n	8000b48 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d103      	bne.n	8000b58 <xQueueGenericSendFromISR+0x3c>
 8000b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d101      	bne.n	8000b5c <xQueueGenericSendFromISR+0x40>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <xQueueGenericSendFromISR+0x42>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d10a      	bne.n	8000b78 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b66:	f383 8811 	msr	BASEPRI, r3
 8000b6a:	f3bf 8f6f 	isb	sy
 8000b6e:	f3bf 8f4f 	dsb	sy
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000b74:	bf00      	nop
 8000b76:	e7fe      	b.n	8000b76 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d103      	bne.n	8000b86 <xQueueGenericSendFromISR+0x6a>
 8000b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d101      	bne.n	8000b8a <xQueueGenericSendFromISR+0x6e>
 8000b86:	2301      	movs	r3, #1
 8000b88:	e000      	b.n	8000b8c <xQueueGenericSendFromISR+0x70>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10a      	bne.n	8000ba6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b94:	f383 8811 	msr	BASEPRI, r3
 8000b98:	f3bf 8f6f 	isb	sy
 8000b9c:	f3bf 8f4f 	dsb	sy
 8000ba0:	623b      	str	r3, [r7, #32]
    }
 8000ba2:	bf00      	nop
 8000ba4:	e7fe      	b.n	8000ba4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000ba6:	f002 f921 	bl	8002dec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000baa:	f3ef 8211 	mrs	r2, BASEPRI
 8000bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb2:	f383 8811 	msr	BASEPRI, r3
 8000bb6:	f3bf 8f6f 	isb	sy
 8000bba:	f3bf 8f4f 	dsb	sy
 8000bbe:	61fa      	str	r2, [r7, #28]
 8000bc0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000bc2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d302      	bcc.n	8000bd8 <xQueueGenericSendFromISR+0xbc>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d148      	bne.n	8000c6a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bea:	4618      	mov	r0, r3
 8000bec:	f003 fe4e 	bl	800488c <SEGGER_SYSVIEW_ShrinkId>
 8000bf0:	4601      	mov	r1, r0
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2060      	movs	r0, #96	; 0x60
 8000bf8:	f002 ffd8 	bl	8003bac <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c02:	f000 f959 	bl	8000eb8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000c06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c0e:	d112      	bne.n	8000c36 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d025      	beq.n	8000c64 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c1a:	3324      	adds	r3, #36	; 0x24
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 ff67 	bl	8001af0 <xTaskRemoveFromEventList>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d01d      	beq.n	8000c64 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d01a      	beq.n	8000c64 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	e016      	b.n	8000c64 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000c36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c3c:	d10a      	bne.n	8000c54 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c42:	f383 8811 	msr	BASEPRI, r3
 8000c46:	f3bf 8f6f 	isb	sy
 8000c4a:	f3bf 8f4f 	dsb	sy
 8000c4e:	617b      	str	r3, [r7, #20]
    }
 8000c50:	bf00      	nop
 8000c52:	e7fe      	b.n	8000c52 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c58:	3301      	adds	r3, #1
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	b25a      	sxtb	r2, r3
 8000c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000c64:	2301      	movs	r3, #1
 8000c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000c68:	e00b      	b.n	8000c82 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fe0d 	bl	800488c <SEGGER_SYSVIEW_ShrinkId>
 8000c72:	4601      	mov	r1, r0
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	461a      	mov	r2, r3
 8000c78:	2060      	movs	r0, #96	; 0x60
 8000c7a:	f002 ff97 	bl	8003bac <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c84:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c8c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3740      	adds	r7, #64	; 0x40
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b08f      	sub	sp, #60	; 0x3c
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10a      	bne.n	8000cc8 <xQueueReceive+0x30>
        __asm volatile
 8000cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cb6:	f383 8811 	msr	BASEPRI, r3
 8000cba:	f3bf 8f6f 	isb	sy
 8000cbe:	f3bf 8f4f 	dsb	sy
 8000cc2:	623b      	str	r3, [r7, #32]
    }
 8000cc4:	bf00      	nop
 8000cc6:	e7fe      	b.n	8000cc6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d103      	bne.n	8000cd6 <xQueueReceive+0x3e>
 8000cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <xQueueReceive+0x42>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e000      	b.n	8000cdc <xQueueReceive+0x44>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d10a      	bne.n	8000cf6 <xQueueReceive+0x5e>
        __asm volatile
 8000ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce4:	f383 8811 	msr	BASEPRI, r3
 8000ce8:	f3bf 8f6f 	isb	sy
 8000cec:	f3bf 8f4f 	dsb	sy
 8000cf0:	61fb      	str	r3, [r7, #28]
    }
 8000cf2:	bf00      	nop
 8000cf4:	e7fe      	b.n	8000cf4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000cf6:	f001 f89b 	bl	8001e30 <xTaskGetSchedulerState>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <xQueueReceive+0x6e>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <xQueueReceive+0x72>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <xQueueReceive+0x74>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10a      	bne.n	8000d26 <xQueueReceive+0x8e>
        __asm volatile
 8000d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d14:	f383 8811 	msr	BASEPRI, r3
 8000d18:	f3bf 8f6f 	isb	sy
 8000d1c:	f3bf 8f4f 	dsb	sy
 8000d20:	61bb      	str	r3, [r7, #24]
    }
 8000d22:	bf00      	nop
 8000d24:	e7fe      	b.n	8000d24 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d26:	f001 ff77 	bl	8002c18 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d02f      	beq.n	8000d96 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d36:	68b9      	ldr	r1, [r7, #8]
 8000d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d3a:	f000 f927 	bl	8000f8c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d40:	4618      	mov	r0, r3
 8000d42:	f003 fda3 	bl	800488c <SEGGER_SYSVIEW_ShrinkId>
 8000d46:	4604      	mov	r4, r0
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f003 fd9f 	bl	800488c <SEGGER_SYSVIEW_ShrinkId>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2101      	movs	r1, #1
 8000d54:	9100      	str	r1, [sp, #0]
 8000d56:	4621      	mov	r1, r4
 8000d58:	205c      	movs	r0, #92	; 0x5c
 8000d5a:	f002 fff7 	bl	8003d4c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	1e5a      	subs	r2, r3, #1
 8000d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d64:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d00f      	beq.n	8000d8e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d70:	3310      	adds	r3, #16
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 febc 	bl	8001af0 <xTaskRemoveFromEventList>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d007      	beq.n	8000d8e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d7e:	4b4d      	ldr	r3, [pc, #308]	; (8000eb4 <xQueueReceive+0x21c>)
 8000d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	f3bf 8f4f 	dsb	sy
 8000d8a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d8e:	f001 ff73 	bl	8002c78 <vPortExitCritical>
                return pdPASS;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e08a      	b.n	8000eac <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d113      	bne.n	8000dc4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d9c:	f001 ff6c 	bl	8002c78 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 fd72 	bl	800488c <SEGGER_SYSVIEW_ShrinkId>
 8000da8:	4604      	mov	r4, r0
 8000daa:	2000      	movs	r0, #0
 8000dac:	f003 fd6e 	bl	800488c <SEGGER_SYSVIEW_ShrinkId>
 8000db0:	4602      	mov	r2, r0
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2101      	movs	r1, #1
 8000db6:	9100      	str	r1, [sp, #0]
 8000db8:	4621      	mov	r1, r4
 8000dba:	205c      	movs	r0, #92	; 0x5c
 8000dbc:	f002 ffc6 	bl	8003d4c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e073      	b.n	8000eac <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d106      	bne.n	8000dd8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fef4 	bl	8001bbc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000dd8:	f001 ff4e 	bl	8002c78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000ddc:	f000 fc52 	bl	8001684 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000de0:	f001 ff1a 	bl	8002c18 <vPortEnterCritical>
 8000de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df0:	d103      	bne.n	8000dfa <xQueueReceive+0x162>
 8000df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e06:	d103      	bne.n	8000e10 <xQueueReceive+0x178>
 8000e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e10:	f001 ff32 	bl	8002c78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e14:	1d3a      	adds	r2, r7, #4
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fee3 	bl	8001be8 <xTaskCheckForTimeOut>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d124      	bne.n	8000e72 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e2a:	f000 f927 	bl	800107c <prvIsQueueEmpty>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d018      	beq.n	8000e66 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e36:	3324      	adds	r3, #36	; 0x24
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 fe05 	bl	8001a4c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e44:	f000 f8c8 	bl	8000fd8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e48:	f000 fc2a 	bl	80016a0 <xTaskResumeAll>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f47f af69 	bne.w	8000d26 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <xQueueReceive+0x21c>)
 8000e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	f3bf 8f4f 	dsb	sy
 8000e60:	f3bf 8f6f 	isb	sy
 8000e64:	e75f      	b.n	8000d26 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e68:	f000 f8b6 	bl	8000fd8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e6c:	f000 fc18 	bl	80016a0 <xTaskResumeAll>
 8000e70:	e759      	b.n	8000d26 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e74:	f000 f8b0 	bl	8000fd8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e78:	f000 fc12 	bl	80016a0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e7e:	f000 f8fd 	bl	800107c <prvIsQueueEmpty>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f43f af4e 	beq.w	8000d26 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fcfd 	bl	800488c <SEGGER_SYSVIEW_ShrinkId>
 8000e92:	4604      	mov	r4, r0
 8000e94:	2000      	movs	r0, #0
 8000e96:	f003 fcf9 	bl	800488c <SEGGER_SYSVIEW_ShrinkId>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	9100      	str	r1, [sp, #0]
 8000ea2:	4621      	mov	r1, r4
 8000ea4:	205c      	movs	r0, #92	; 0x5c
 8000ea6:	f002 ff51 	bl	8003d4c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000eaa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3734      	adds	r7, #52	; 0x34
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd90      	pop	{r4, r7, pc}
 8000eb4:	e000ed04 	.word	0xe000ed04

08000eb8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ecc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10d      	bne.n	8000ef2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d14d      	bne.n	8000f7a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 ffc2 	bl	8001e6c <xTaskPriorityDisinherit>
 8000ee8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	e043      	b.n	8000f7a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d119      	bne.n	8000f2c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6858      	ldr	r0, [r3, #4]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	461a      	mov	r2, r3
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	f005 fdb2 	bl	8006a6c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	441a      	add	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d32b      	bcc.n	8000f7a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	e026      	b.n	8000f7a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	68d8      	ldr	r0, [r3, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	461a      	mov	r2, r3
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	f005 fd98 	bl	8006a6c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	425b      	negs	r3, r3
 8000f46:	441a      	add	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	425b      	negs	r3, r3
 8000f62:	441a      	add	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d105      	bne.n	8000f7a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000f82:	697b      	ldr	r3, [r7, #20]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d018      	beq.n	8000fd0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	441a      	add	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d303      	bcc.n	8000fc0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68d9      	ldr	r1, [r3, #12]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	461a      	mov	r2, r3
 8000fca:	6838      	ldr	r0, [r7, #0]
 8000fcc:	f005 fd4e 	bl	8006a6c <memcpy>
    }
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000fe0:	f001 fe1a 	bl	8002c18 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fea:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fec:	e011      	b.n	8001012 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d012      	beq.n	800101c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3324      	adds	r3, #36	; 0x24
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fd78 	bl	8001af0 <xTaskRemoveFromEventList>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001006:	f000 fe55 	bl	8001cb4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	3b01      	subs	r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	2b00      	cmp	r3, #0
 8001018:	dce9      	bgt.n	8000fee <prvUnlockQueue+0x16>
 800101a:	e000      	b.n	800101e <prvUnlockQueue+0x46>
                        break;
 800101c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	22ff      	movs	r2, #255	; 0xff
 8001022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001026:	f001 fe27 	bl	8002c78 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800102a:	f001 fdf5 	bl	8002c18 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001034:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001036:	e011      	b.n	800105c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d012      	beq.n	8001066 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3310      	adds	r3, #16
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fd53 	bl	8001af0 <xTaskRemoveFromEventList>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001050:	f000 fe30 	bl	8001cb4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	3b01      	subs	r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800105c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001060:	2b00      	cmp	r3, #0
 8001062:	dce9      	bgt.n	8001038 <prvUnlockQueue+0x60>
 8001064:	e000      	b.n	8001068 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001066:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	22ff      	movs	r2, #255	; 0xff
 800106c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001070:	f001 fe02 	bl	8002c78 <vPortExitCritical>
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001084:	f001 fdc8 	bl	8002c18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001090:	2301      	movs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e001      	b.n	800109a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800109a:	f001 fded 	bl	8002c78 <vPortExitCritical>

    return xReturn;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010b0:	f001 fdb2 	bl	8002c18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010bc:	429a      	cmp	r2, r3
 80010be:	d102      	bne.n	80010c6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	e001      	b.n	80010ca <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010ca:	f001 fdd5 	bl	8002c78 <vPortExitCritical>

    return xReturn;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e01e      	b.n	8001126 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80010e8:	4a13      	ldr	r2, [pc, #76]	; (8001138 <vQueueAddToRegistry+0x60>)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d115      	bne.n	8001120 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80010f4:	4910      	ldr	r1, [pc, #64]	; (8001138 <vQueueAddToRegistry+0x60>)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <vQueueAddToRegistry+0x60>)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4618      	mov	r0, r3
 800110e:	f003 fbbd 	bl	800488c <SEGGER_SYSVIEW_ShrinkId>
 8001112:	4601      	mov	r1, r0
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	2071      	movs	r0, #113	; 0x71
 800111a:	f002 fd47 	bl	8003bac <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800111e:	e006      	b.n	800112e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2b07      	cmp	r3, #7
 800112a:	d9dd      	bls.n	80010e8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000030 	.word	0x20000030

0800113c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800114c:	f001 fd64 	bl	8002c18 <vPortEnterCritical>
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001156:	b25b      	sxtb	r3, r3
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115c:	d103      	bne.n	8001166 <vQueueWaitForMessageRestricted+0x2a>
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800116c:	b25b      	sxtb	r3, r3
 800116e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001172:	d103      	bne.n	800117c <vQueueWaitForMessageRestricted+0x40>
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800117c:	f001 fd7c 	bl	8002c78 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001184:	2b00      	cmp	r3, #0
 8001186:	d106      	bne.n	8001196 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3324      	adds	r3, #36	; 0x24
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	68b9      	ldr	r1, [r7, #8]
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fc7f 	bl	8001a94 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff1e 	bl	8000fd8 <prvUnlockQueue>
    }
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af04      	add	r7, sp, #16
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	4613      	mov	r3, r2
 80011b2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f001 fe57 	bl	8002e6c <pvPortMalloc>
 80011be:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00e      	beq.n	80011e4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80011c6:	2058      	movs	r0, #88	; 0x58
 80011c8:	f001 fe50 	bl	8002e6c <pvPortMalloc>
 80011cc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	631a      	str	r2, [r3, #48]	; 0x30
 80011da:	e005      	b.n	80011e8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80011dc:	6978      	ldr	r0, [r7, #20]
 80011de:	f001 ff25 	bl	800302c <vPortFree>
 80011e2:	e001      	b.n	80011e8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d013      	beq.n	8001216 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80011ee:	88fa      	ldrh	r2, [r7, #6]
 80011f0:	2300      	movs	r3, #0
 80011f2:	9303      	str	r3, [sp, #12]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 f80e 	bl	8001226 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800120a:	69f8      	ldr	r0, [r7, #28]
 800120c:	f000 f8a2 	bl	8001354 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	e002      	b.n	800121c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800121c:	69bb      	ldr	r3, [r7, #24]
    }
 800121e:	4618      	mov	r0, r3
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b088      	sub	sp, #32
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001236:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	461a      	mov	r2, r3
 800123e:	21a5      	movs	r1, #165	; 0xa5
 8001240:	f005 fc22 	bl	8006a88 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800124e:	3b01      	subs	r3, #1
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	f023 0307 	bic.w	r3, r3, #7
 800125c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00a      	beq.n	800127e <prvInitialiseNewTask+0x58>
        __asm volatile
 8001268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126c:	f383 8811 	msr	BASEPRI, r3
 8001270:	f3bf 8f6f 	isb	sy
 8001274:	f3bf 8f4f 	dsb	sy
 8001278:	617b      	str	r3, [r7, #20]
    }
 800127a:	bf00      	nop
 800127c:	e7fe      	b.n	800127c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d01f      	beq.n	80012c4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	e012      	b.n	80012b0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	4413      	add	r3, r2
 8001290:	7819      	ldrb	r1, [r3, #0]
 8001292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	4413      	add	r3, r2
 8001298:	3334      	adds	r3, #52	; 0x34
 800129a:	460a      	mov	r2, r1
 800129c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	4413      	add	r3, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3301      	adds	r3, #1
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	2b09      	cmp	r3, #9
 80012b4:	d9e9      	bls.n	800128a <prvInitialiseNewTask+0x64>
 80012b6:	e000      	b.n	80012ba <prvInitialiseNewTask+0x94>
            {
                break;
 80012b8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80012c2:	e003      	b.n	80012cc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80012c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d901      	bls.n	80012d6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012d2:	2304      	movs	r3, #4
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80012d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80012dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012e0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80012e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e4:	2200      	movs	r2, #0
 80012e6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80012e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ea:	3304      	adds	r3, #4
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f96b 	bl	80005c8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80012f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f4:	3318      	adds	r3, #24
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f966 	bl	80005c8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80012fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001300:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001304:	f1c3 0205 	rsb	r2, r3, #5
 8001308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800130c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001314:	3350      	adds	r3, #80	; 0x50
 8001316:	2204      	movs	r2, #4
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f005 fbb4 	bl	8006a88 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001322:	3354      	adds	r3, #84	; 0x54
 8001324:	2201      	movs	r2, #1
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f005 fbad 	bl	8006a88 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	68f9      	ldr	r1, [r7, #12]
 8001332:	69b8      	ldr	r0, [r7, #24]
 8001334:	f001 fb42 	bl	80029bc <pxPortInitialiseStack>
 8001338:	4602      	mov	r2, r0
 800133a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001348:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af02      	add	r7, sp, #8
 800135a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800135c:	f001 fc5c 	bl	8002c18 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001360:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <prvAddNewTaskToReadyList+0xfc>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	4a3a      	ldr	r2, [pc, #232]	; (8001450 <prvAddNewTaskToReadyList+0xfc>)
 8001368:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800136a:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <prvAddNewTaskToReadyList+0x100>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d109      	bne.n	8001386 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001372:	4a38      	ldr	r2, [pc, #224]	; (8001454 <prvAddNewTaskToReadyList+0x100>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <prvAddNewTaskToReadyList+0xfc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d110      	bne.n	80013a2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001380:	f000 fcbc 	bl	8001cfc <prvInitialiseTaskLists>
 8001384:	e00d      	b.n	80013a2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001386:	4b34      	ldr	r3, [pc, #208]	; (8001458 <prvAddNewTaskToReadyList+0x104>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800138e:	4b31      	ldr	r3, [pc, #196]	; (8001454 <prvAddNewTaskToReadyList+0x100>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	429a      	cmp	r2, r3
 800139a:	d802      	bhi.n	80013a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800139c:	4a2d      	ldr	r2, [pc, #180]	; (8001454 <prvAddNewTaskToReadyList+0x100>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80013a2:	4b2e      	ldr	r3, [pc, #184]	; (800145c <prvAddNewTaskToReadyList+0x108>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	4a2c      	ldr	r2, [pc, #176]	; (800145c <prvAddNewTaskToReadyList+0x108>)
 80013aa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80013ac:	4b2b      	ldr	r3, [pc, #172]	; (800145c <prvAddNewTaskToReadyList+0x108>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d016      	beq.n	80013e8 <prvAddNewTaskToReadyList+0x94>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	f003 f93f 	bl	8004640 <SEGGER_SYSVIEW_OnTaskCreate>
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	461d      	mov	r5, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	461c      	mov	r4, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	1ae3      	subs	r3, r4, r3
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	462b      	mov	r3, r5
 80013e4:	f001 ff40 	bl	8003268 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 f9ac 	bl	8004748 <SEGGER_SYSVIEW_OnTaskStartReady>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	2201      	movs	r2, #1
 80013f6:	409a      	lsls	r2, r3
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <prvAddNewTaskToReadyList+0x10c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	4a18      	ldr	r2, [pc, #96]	; (8001460 <prvAddNewTaskToReadyList+0x10c>)
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4a15      	ldr	r2, [pc, #84]	; (8001464 <prvAddNewTaskToReadyList+0x110>)
 8001410:	441a      	add	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3304      	adds	r3, #4
 8001416:	4619      	mov	r1, r3
 8001418:	4610      	mov	r0, r2
 800141a:	f7ff f8e2 	bl	80005e2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800141e:	f001 fc2b 	bl	8002c78 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <prvAddNewTaskToReadyList+0x104>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00e      	beq.n	8001448 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <prvAddNewTaskToReadyList+0x100>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	429a      	cmp	r2, r3
 8001436:	d207      	bcs.n	8001448 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <prvAddNewTaskToReadyList+0x114>)
 800143a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	f3bf 8f4f 	dsb	sy
 8001444:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bdb0      	pop	{r4, r5, r7, pc}
 8001450:	20000148 	.word	0x20000148
 8001454:	20000070 	.word	0x20000070
 8001458:	20000154 	.word	0x20000154
 800145c:	20000164 	.word	0x20000164
 8001460:	20000150 	.word	0x20000150
 8001464:	20000074 	.word	0x20000074
 8001468:	e000ed04 	.word	0xe000ed04

0800146c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8001474:	f001 fbd0 	bl	8002c18 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <vTaskDelete+0x18>
 800147e:	4b46      	ldr	r3, [pc, #280]	; (8001598 <vTaskDelete+0x12c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	e000      	b.n	8001486 <vTaskDelete+0x1a>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3304      	adds	r3, #4
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f905 	bl	800069c <uxListRemove>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d115      	bne.n	80014c4 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800149c:	493f      	ldr	r1, [pc, #252]	; (800159c <vTaskDelete+0x130>)
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10a      	bne.n	80014c4 <vTaskDelete+0x58>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	2201      	movs	r2, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43da      	mvns	r2, r3
 80014ba:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <vTaskDelete+0x134>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4013      	ands	r3, r2
 80014c0:	4a37      	ldr	r2, [pc, #220]	; (80015a0 <vTaskDelete+0x134>)
 80014c2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d004      	beq.n	80014d6 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3318      	adds	r3, #24
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f8e3 	bl	800069c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80014d6:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <vTaskDelete+0x138>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	4a31      	ldr	r2, [pc, #196]	; (80015a4 <vTaskDelete+0x138>)
 80014de:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <vTaskDelete+0x12c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d118      	bne.n	800151c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3304      	adds	r3, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	482d      	ldr	r0, [pc, #180]	; (80015a8 <vTaskDelete+0x13c>)
 80014f2:	f7ff f876 	bl	80005e2 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80014f6:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <vTaskDelete+0x140>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	4a2b      	ldr	r2, [pc, #172]	; (80015ac <vTaskDelete+0x140>)
 80014fe:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4618      	mov	r0, r3
 8001504:	f003 f9c2 	bl	800488c <SEGGER_SYSVIEW_ShrinkId>
 8001508:	4603      	mov	r3, r0
 800150a:	4619      	mov	r1, r3
 800150c:	2022      	movs	r0, #34	; 0x22
 800150e:	f002 fb11 	bl	8003b34 <SEGGER_SYSVIEW_RecordU32>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4618      	mov	r0, r3
 8001516:	f001 ff0f 	bl	8003338 <SYSVIEW_DeleteTask>
 800151a:	e016      	b.n	800154a <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <vTaskDelete+0x144>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3b01      	subs	r3, #1
 8001522:	4a23      	ldr	r2, [pc, #140]	; (80015b0 <vTaskDelete+0x144>)
 8001524:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4618      	mov	r0, r3
 800152a:	f003 f9af 	bl	800488c <SEGGER_SYSVIEW_ShrinkId>
 800152e:	4603      	mov	r3, r0
 8001530:	4619      	mov	r1, r3
 8001532:	2022      	movs	r0, #34	; 0x22
 8001534:	f002 fafe 	bl	8003b34 <SEGGER_SYSVIEW_RecordU32>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4618      	mov	r0, r3
 800153c:	f001 fefc 	bl	8003338 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f000 fc49 	bl	8001dd8 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8001546:	f000 fc57 	bl	8001df8 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800154a:	f001 fb95 	bl	8002c78 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <vTaskDelete+0x148>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d01b      	beq.n	800158e <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <vTaskDelete+0x12c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	429a      	cmp	r2, r3
 800155e:	d116      	bne.n	800158e <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <vTaskDelete+0x14c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00a      	beq.n	800157e <vTaskDelete+0x112>
        __asm volatile
 8001568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800156c:	f383 8811 	msr	BASEPRI, r3
 8001570:	f3bf 8f6f 	isb	sy
 8001574:	f3bf 8f4f 	dsb	sy
 8001578:	60bb      	str	r3, [r7, #8]
    }
 800157a:	bf00      	nop
 800157c:	e7fe      	b.n	800157c <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <vTaskDelete+0x150>)
 8001580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	f3bf 8f4f 	dsb	sy
 800158a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000070 	.word	0x20000070
 800159c:	20000074 	.word	0x20000074
 80015a0:	20000150 	.word	0x20000150
 80015a4:	20000164 	.word	0x20000164
 80015a8:	2000011c 	.word	0x2000011c
 80015ac:	20000130 	.word	0x20000130
 80015b0:	20000148 	.word	0x20000148
 80015b4:	20000154 	.word	0x20000154
 80015b8:	20000170 	.word	0x20000170
 80015bc:	e000ed04 	.word	0xe000ed04

080015c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80015c6:	4b27      	ldr	r3, [pc, #156]	; (8001664 <vTaskStartScheduler+0xa4>)
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	2300      	movs	r3, #0
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2300      	movs	r3, #0
 80015d0:	2282      	movs	r2, #130	; 0x82
 80015d2:	4925      	ldr	r1, [pc, #148]	; (8001668 <vTaskStartScheduler+0xa8>)
 80015d4:	4825      	ldr	r0, [pc, #148]	; (800166c <vTaskStartScheduler+0xac>)
 80015d6:	f7ff fde5 	bl	80011a4 <xTaskCreate>
 80015da:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d102      	bne.n	80015e8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80015e2:	f000 fed9 	bl	8002398 <xTimerCreateTimerTask>
 80015e6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d124      	bne.n	8001638 <vTaskStartScheduler+0x78>
        __asm volatile
 80015ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015f2:	f383 8811 	msr	BASEPRI, r3
 80015f6:	f3bf 8f6f 	isb	sy
 80015fa:	f3bf 8f4f 	dsb	sy
 80015fe:	60bb      	str	r3, [r7, #8]
    }
 8001600:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <vTaskStartScheduler+0xb0>)
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <vTaskStartScheduler+0xb4>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <vTaskStartScheduler+0xb8>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <vTaskStartScheduler+0xbc>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <vTaskStartScheduler+0xa4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d102      	bne.n	8001628 <vTaskStartScheduler+0x68>
 8001622:	f002 fff1 	bl	8004608 <SEGGER_SYSVIEW_OnIdle>
 8001626:	e004      	b.n	8001632 <vTaskStartScheduler+0x72>
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <vTaskStartScheduler+0xbc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f003 f849 	bl	80046c4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001632:	f001 fa4f 	bl	8002ad4 <xPortStartScheduler>
 8001636:	e00e      	b.n	8001656 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163e:	d10a      	bne.n	8001656 <vTaskStartScheduler+0x96>
        __asm volatile
 8001640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001644:	f383 8811 	msr	BASEPRI, r3
 8001648:	f3bf 8f6f 	isb	sy
 800164c:	f3bf 8f4f 	dsb	sy
 8001650:	607b      	str	r3, [r7, #4]
    }
 8001652:	bf00      	nop
 8001654:	e7fe      	b.n	8001654 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <vTaskStartScheduler+0xc0>)
 8001658:	681b      	ldr	r3, [r3, #0]
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000016c 	.word	0x2000016c
 8001668:	08006ab0 	.word	0x08006ab0
 800166c:	08001ccd 	.word	0x08001ccd
 8001670:	20000168 	.word	0x20000168
 8001674:	20000154 	.word	0x20000154
 8001678:	2000014c 	.word	0x2000014c
 800167c:	20000070 	.word	0x20000070
 8001680:	20000000 	.word	0x20000000

08001684 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <vTaskSuspendAll+0x18>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	3301      	adds	r3, #1
 800168e:	4a03      	ldr	r2, [pc, #12]	; (800169c <vTaskSuspendAll+0x18>)
 8001690:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	20000170 	.word	0x20000170

080016a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80016ae:	4b43      	ldr	r3, [pc, #268]	; (80017bc <xTaskResumeAll+0x11c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10a      	bne.n	80016cc <xTaskResumeAll+0x2c>
        __asm volatile
 80016b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ba:	f383 8811 	msr	BASEPRI, r3
 80016be:	f3bf 8f6f 	isb	sy
 80016c2:	f3bf 8f4f 	dsb	sy
 80016c6:	603b      	str	r3, [r7, #0]
    }
 80016c8:	bf00      	nop
 80016ca:	e7fe      	b.n	80016ca <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80016cc:	f001 faa4 	bl	8002c18 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80016d0:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <xTaskResumeAll+0x11c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	4a39      	ldr	r2, [pc, #228]	; (80017bc <xTaskResumeAll+0x11c>)
 80016d8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016da:	4b38      	ldr	r3, [pc, #224]	; (80017bc <xTaskResumeAll+0x11c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d165      	bne.n	80017ae <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80016e2:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <xTaskResumeAll+0x120>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d061      	beq.n	80017ae <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80016ea:	e032      	b.n	8001752 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016ec:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <xTaskResumeAll+0x124>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3318      	adds	r3, #24
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ffcf 	bl	800069c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3304      	adds	r3, #4
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe ffca 	bl	800069c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4618      	mov	r0, r3
 800170c:	f003 f81c 	bl	8004748 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	2201      	movs	r2, #1
 8001716:	409a      	lsls	r2, r3
 8001718:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <xTaskResumeAll+0x128>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4313      	orrs	r3, r2
 800171e:	4a2a      	ldr	r2, [pc, #168]	; (80017c8 <xTaskResumeAll+0x128>)
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4a27      	ldr	r2, [pc, #156]	; (80017cc <xTaskResumeAll+0x12c>)
 8001730:	441a      	add	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3304      	adds	r3, #4
 8001736:	4619      	mov	r1, r3
 8001738:	4610      	mov	r0, r2
 800173a:	f7fe ff52 	bl	80005e2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <xTaskResumeAll+0x130>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	429a      	cmp	r2, r3
 800174a:	d302      	bcc.n	8001752 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <xTaskResumeAll+0x134>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001752:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <xTaskResumeAll+0x124>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1c8      	bne.n	80016ec <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001760:	f000 fb4a 	bl	8001df8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001764:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <xTaskResumeAll+0x138>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d010      	beq.n	8001792 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001770:	f000 f846 	bl	8001800 <xTaskIncrementTick>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <xTaskResumeAll+0x134>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f1      	bne.n	8001770 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <xTaskResumeAll+0x138>)
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <xTaskResumeAll+0x134>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d009      	beq.n	80017ae <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800179a:	2301      	movs	r3, #1
 800179c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <xTaskResumeAll+0x13c>)
 80017a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	f3bf 8f4f 	dsb	sy
 80017aa:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80017ae:	f001 fa63 	bl	8002c78 <vPortExitCritical>

    return xAlreadyYielded;
 80017b2:	68bb      	ldr	r3, [r7, #8]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000170 	.word	0x20000170
 80017c0:	20000148 	.word	0x20000148
 80017c4:	20000108 	.word	0x20000108
 80017c8:	20000150 	.word	0x20000150
 80017cc:	20000074 	.word	0x20000074
 80017d0:	20000070 	.word	0x20000070
 80017d4:	2000015c 	.word	0x2000015c
 80017d8:	20000158 	.word	0x20000158
 80017dc:	e000ed04 	.word	0xe000ed04

080017e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <xTaskGetTickCount+0x1c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	2000014c 	.word	0x2000014c

08001800 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800180a:	4b50      	ldr	r3, [pc, #320]	; (800194c <xTaskIncrementTick+0x14c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 8092 	bne.w	8001938 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001814:	4b4e      	ldr	r3, [pc, #312]	; (8001950 <xTaskIncrementTick+0x150>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800181c:	4a4c      	ldr	r2, [pc, #304]	; (8001950 <xTaskIncrementTick+0x150>)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d120      	bne.n	800186a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001828:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <xTaskIncrementTick+0x154>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00a      	beq.n	8001848 <xTaskIncrementTick+0x48>
        __asm volatile
 8001832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001836:	f383 8811 	msr	BASEPRI, r3
 800183a:	f3bf 8f6f 	isb	sy
 800183e:	f3bf 8f4f 	dsb	sy
 8001842:	603b      	str	r3, [r7, #0]
    }
 8001844:	bf00      	nop
 8001846:	e7fe      	b.n	8001846 <xTaskIncrementTick+0x46>
 8001848:	4b42      	ldr	r3, [pc, #264]	; (8001954 <xTaskIncrementTick+0x154>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b42      	ldr	r3, [pc, #264]	; (8001958 <xTaskIncrementTick+0x158>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a40      	ldr	r2, [pc, #256]	; (8001954 <xTaskIncrementTick+0x154>)
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4a40      	ldr	r2, [pc, #256]	; (8001958 <xTaskIncrementTick+0x158>)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b3f      	ldr	r3, [pc, #252]	; (800195c <xTaskIncrementTick+0x15c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	4a3e      	ldr	r2, [pc, #248]	; (800195c <xTaskIncrementTick+0x15c>)
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	f000 fac7 	bl	8001df8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800186a:	4b3d      	ldr	r3, [pc, #244]	; (8001960 <xTaskIncrementTick+0x160>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d34c      	bcc.n	800190e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001874:	4b37      	ldr	r3, [pc, #220]	; (8001954 <xTaskIncrementTick+0x154>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d104      	bne.n	8001888 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800187e:	4b38      	ldr	r3, [pc, #224]	; (8001960 <xTaskIncrementTick+0x160>)
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	601a      	str	r2, [r3, #0]
                    break;
 8001886:	e042      	b.n	800190e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001888:	4b32      	ldr	r3, [pc, #200]	; (8001954 <xTaskIncrementTick+0x154>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	d203      	bcs.n	80018a8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80018a0:	4a2f      	ldr	r2, [pc, #188]	; (8001960 <xTaskIncrementTick+0x160>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80018a6:	e032      	b.n	800190e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	3304      	adds	r3, #4
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fef5 	bl	800069c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3318      	adds	r3, #24
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe feec 	bl	800069c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 ff3e 	bl	8004748 <SEGGER_SYSVIEW_OnTaskStartReady>
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	2201      	movs	r2, #1
 80018d2:	409a      	lsls	r2, r3
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <xTaskIncrementTick+0x164>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4313      	orrs	r3, r2
 80018da:	4a22      	ldr	r2, [pc, #136]	; (8001964 <xTaskIncrementTick+0x164>)
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4a1f      	ldr	r2, [pc, #124]	; (8001968 <xTaskIncrementTick+0x168>)
 80018ec:	441a      	add	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	3304      	adds	r3, #4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4610      	mov	r0, r2
 80018f6:	f7fe fe74 	bl	80005e2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <xTaskIncrementTick+0x16c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	429a      	cmp	r2, r3
 8001906:	d3b5      	bcc.n	8001874 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001908:	2301      	movs	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800190c:	e7b2      	b.n	8001874 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <xTaskIncrementTick+0x16c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001914:	4914      	ldr	r1, [pc, #80]	; (8001968 <xTaskIncrementTick+0x168>)
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d901      	bls.n	800192a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8001926:	2301      	movs	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <xTaskIncrementTick+0x170>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8001932:	2301      	movs	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	e004      	b.n	8001942 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <xTaskIncrementTick+0x174>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <xTaskIncrementTick+0x174>)
 8001940:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001942:	697b      	ldr	r3, [r7, #20]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000170 	.word	0x20000170
 8001950:	2000014c 	.word	0x2000014c
 8001954:	20000100 	.word	0x20000100
 8001958:	20000104 	.word	0x20000104
 800195c:	20000160 	.word	0x20000160
 8001960:	20000168 	.word	0x20000168
 8001964:	20000150 	.word	0x20000150
 8001968:	20000074 	.word	0x20000074
 800196c:	20000070 	.word	0x20000070
 8001970:	2000015c 	.word	0x2000015c
 8001974:	20000158 	.word	0x20000158

08001978 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <vTaskSwitchContext+0xbc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001986:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <vTaskSwitchContext+0xc0>)
 8001988:	2201      	movs	r2, #1
 800198a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800198c:	e04d      	b.n	8001a2a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <vTaskSwitchContext+0xc0>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001994:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <vTaskSwitchContext+0xc4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80019a2:	7afb      	ldrb	r3, [r7, #11]
 80019a4:	f1c3 031f 	rsb	r3, r3, #31
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	4925      	ldr	r1, [pc, #148]	; (8001a40 <vTaskSwitchContext+0xc8>)
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10a      	bne.n	80019d4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80019be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c2:	f383 8811 	msr	BASEPRI, r3
 80019c6:	f3bf 8f6f 	isb	sy
 80019ca:	f3bf 8f4f 	dsb	sy
 80019ce:	607b      	str	r3, [r7, #4]
    }
 80019d0:	bf00      	nop
 80019d2:	e7fe      	b.n	80019d2 <vTaskSwitchContext+0x5a>
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4a18      	ldr	r2, [pc, #96]	; (8001a40 <vTaskSwitchContext+0xc8>)
 80019e0:	4413      	add	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	3308      	adds	r3, #8
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d104      	bne.n	8001a04 <vTaskSwitchContext+0x8c>
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <vTaskSwitchContext+0xcc>)
 8001a0c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <vTaskSwitchContext+0xcc>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <vTaskSwitchContext+0xd0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d102      	bne.n	8001a20 <vTaskSwitchContext+0xa8>
 8001a1a:	f002 fdf5 	bl	8004608 <SEGGER_SYSVIEW_OnIdle>
}
 8001a1e:	e004      	b.n	8001a2a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <vTaskSwitchContext+0xcc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 fe4d 	bl	80046c4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000170 	.word	0x20000170
 8001a38:	2000015c 	.word	0x2000015c
 8001a3c:	20000150 	.word	0x20000150
 8001a40:	20000074 	.word	0x20000074
 8001a44:	20000070 	.word	0x20000070
 8001a48:	2000016c 	.word	0x2000016c

08001a4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10a      	bne.n	8001a72 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a60:	f383 8811 	msr	BASEPRI, r3
 8001a64:	f3bf 8f6f 	isb	sy
 8001a68:	f3bf 8f4f 	dsb	sy
 8001a6c:	60fb      	str	r3, [r7, #12]
    }
 8001a6e:	bf00      	nop
 8001a70:	e7fe      	b.n	8001a70 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <vTaskPlaceOnEventList+0x44>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	3318      	adds	r3, #24
 8001a78:	4619      	mov	r1, r3
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7fe fdd5 	bl	800062a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001a80:	2101      	movs	r1, #1
 8001a82:	6838      	ldr	r0, [r7, #0]
 8001a84:	f000 fc10 	bl	80022a8 <prvAddCurrentTaskToDelayedList>
}
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000070 	.word	0x20000070

08001a94 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10a      	bne.n	8001abc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aaa:	f383 8811 	msr	BASEPRI, r3
 8001aae:	f3bf 8f6f 	isb	sy
 8001ab2:	f3bf 8f4f 	dsb	sy
 8001ab6:	617b      	str	r3, [r7, #20]
    }
 8001ab8:	bf00      	nop
 8001aba:	e7fe      	b.n	8001aba <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <vTaskPlaceOnEventListRestricted+0x58>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	3318      	adds	r3, #24
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f7fe fd8c 	bl	80005e2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001ad6:	2024      	movs	r0, #36	; 0x24
 8001ad8:	f002 f80e 	bl	8003af8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	68b8      	ldr	r0, [r7, #8]
 8001ae0:	f000 fbe2 	bl	80022a8 <prvAddCurrentTaskToDelayedList>
    }
 8001ae4:	bf00      	nop
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000070 	.word	0x20000070

08001af0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10a      	bne.n	8001b1c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0a:	f383 8811 	msr	BASEPRI, r3
 8001b0e:	f3bf 8f6f 	isb	sy
 8001b12:	f3bf 8f4f 	dsb	sy
 8001b16:	60fb      	str	r3, [r7, #12]
    }
 8001b18:	bf00      	nop
 8001b1a:	e7fe      	b.n	8001b1a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	3318      	adds	r3, #24
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fdbb 	bl	800069c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b26:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <xTaskRemoveFromEventList+0xb4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d120      	bne.n	8001b70 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	3304      	adds	r3, #4
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fdb2 	bl	800069c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f002 fe04 	bl	8004748 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	2201      	movs	r2, #1
 8001b46:	409a      	lsls	r2, r3
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <xTaskRemoveFromEventList+0xb8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <xTaskRemoveFromEventList+0xb8>)
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4a13      	ldr	r2, [pc, #76]	; (8001bac <xTaskRemoveFromEventList+0xbc>)
 8001b60:	441a      	add	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	3304      	adds	r3, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4610      	mov	r0, r2
 8001b6a:	f7fe fd3a 	bl	80005e2 <vListInsertEnd>
 8001b6e:	e005      	b.n	8001b7c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	3318      	adds	r3, #24
 8001b74:	4619      	mov	r1, r3
 8001b76:	480e      	ldr	r0, [pc, #56]	; (8001bb0 <xTaskRemoveFromEventList+0xc0>)
 8001b78:	f7fe fd33 	bl	80005e2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <xTaskRemoveFromEventList+0xc4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d905      	bls.n	8001b96 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <xTaskRemoveFromEventList+0xc8>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	e001      	b.n	8001b9a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001b9a:	697b      	ldr	r3, [r7, #20]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000170 	.word	0x20000170
 8001ba8:	20000150 	.word	0x20000150
 8001bac:	20000074 	.word	0x20000074
 8001bb0:	20000108 	.word	0x20000108
 8001bb4:	20000070 	.word	0x20000070
 8001bb8:	2000015c 	.word	0x2000015c

08001bbc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <vTaskInternalSetTimeOutState+0x24>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <vTaskInternalSetTimeOutState+0x28>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	605a      	str	r2, [r3, #4]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	20000160 	.word	0x20000160
 8001be4:	2000014c 	.word	0x2000014c

08001be8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10a      	bne.n	8001c0e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfc:	f383 8811 	msr	BASEPRI, r3
 8001c00:	f3bf 8f6f 	isb	sy
 8001c04:	f3bf 8f4f 	dsb	sy
 8001c08:	613b      	str	r3, [r7, #16]
    }
 8001c0a:	bf00      	nop
 8001c0c:	e7fe      	b.n	8001c0c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10a      	bne.n	8001c2a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c18:	f383 8811 	msr	BASEPRI, r3
 8001c1c:	f3bf 8f6f 	isb	sy
 8001c20:	f3bf 8f4f 	dsb	sy
 8001c24:	60fb      	str	r3, [r7, #12]
    }
 8001c26:	bf00      	nop
 8001c28:	e7fe      	b.n	8001c28 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001c2a:	f000 fff5 	bl	8002c18 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <xTaskCheckForTimeOut+0xc4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c46:	d102      	bne.n	8001c4e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	e026      	b.n	8001c9c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <xTaskCheckForTimeOut+0xc8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d00a      	beq.n	8001c70 <xTaskCheckForTimeOut+0x88>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d305      	bcc.n	8001c70 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001c64:	2301      	movs	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	e015      	b.n	8001c9c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d20b      	bcs.n	8001c92 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	1ad2      	subs	r2, r2, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ff98 	bl	8001bbc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	e004      	b.n	8001c9c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001c9c:	f000 ffec 	bl	8002c78 <vPortExitCritical>

    return xReturn;
 8001ca0:	69fb      	ldr	r3, [r7, #28]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3720      	adds	r7, #32
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000014c 	.word	0x2000014c
 8001cb0:	20000160 	.word	0x20000160

08001cb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <vTaskMissedYield+0x14>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	2000015c 	.word	0x2000015c

08001ccc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001cd4:	f000 f852 	bl	8001d7c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <prvIdleTask+0x28>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d9f9      	bls.n	8001cd4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <prvIdleTask+0x2c>)
 8001ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	f3bf 8f4f 	dsb	sy
 8001cec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001cf0:	e7f0      	b.n	8001cd4 <prvIdleTask+0x8>
 8001cf2:	bf00      	nop
 8001cf4:	20000074 	.word	0x20000074
 8001cf8:	e000ed04 	.word	0xe000ed04

08001cfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	e00c      	b.n	8001d22 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <prvInitialiseTaskLists+0x60>)
 8001d14:	4413      	add	r3, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc36 	bl	8000588 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d9ef      	bls.n	8001d08 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <prvInitialiseTaskLists+0x64>)
 8001d2a:	f7fe fc2d 	bl	8000588 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001d2e:	480d      	ldr	r0, [pc, #52]	; (8001d64 <prvInitialiseTaskLists+0x68>)
 8001d30:	f7fe fc2a 	bl	8000588 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <prvInitialiseTaskLists+0x6c>)
 8001d36:	f7fe fc27 	bl	8000588 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001d3a:	480c      	ldr	r0, [pc, #48]	; (8001d6c <prvInitialiseTaskLists+0x70>)
 8001d3c:	f7fe fc24 	bl	8000588 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001d40:	480b      	ldr	r0, [pc, #44]	; (8001d70 <prvInitialiseTaskLists+0x74>)
 8001d42:	f7fe fc21 	bl	8000588 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <prvInitialiseTaskLists+0x78>)
 8001d48:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <prvInitialiseTaskLists+0x64>)
 8001d4a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <prvInitialiseTaskLists+0x7c>)
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <prvInitialiseTaskLists+0x68>)
 8001d50:	601a      	str	r2, [r3, #0]
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000074 	.word	0x20000074
 8001d60:	200000d8 	.word	0x200000d8
 8001d64:	200000ec 	.word	0x200000ec
 8001d68:	20000108 	.word	0x20000108
 8001d6c:	2000011c 	.word	0x2000011c
 8001d70:	20000134 	.word	0x20000134
 8001d74:	20000100 	.word	0x20000100
 8001d78:	20000104 	.word	0x20000104

08001d7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d82:	e019      	b.n	8001db8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001d84:	f000 ff48 	bl	8002c18 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d88:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <prvCheckTasksWaitingTermination+0x50>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3304      	adds	r3, #4
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fc81 	bl	800069c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <prvCheckTasksWaitingTermination+0x54>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <prvCheckTasksWaitingTermination+0x54>)
 8001da2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <prvCheckTasksWaitingTermination+0x58>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <prvCheckTasksWaitingTermination+0x58>)
 8001dac:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001dae:	f000 ff63 	bl	8002c78 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f810 	bl	8001dd8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <prvCheckTasksWaitingTermination+0x58>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e1      	bne.n	8001d84 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	2000011c 	.word	0x2000011c
 8001dd0:	20000148 	.word	0x20000148
 8001dd4:	20000130 	.word	0x20000130

08001dd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4618      	mov	r0, r3
 8001de6:	f001 f921 	bl	800302c <vPortFree>
                vPortFree( pxTCB );
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f001 f91e 	bl	800302c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <prvResetNextTaskUnblockTime+0x30>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d104      	bne.n	8001e10 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <prvResetNextTaskUnblockTime+0x34>)
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001e0e:	e005      	b.n	8001e1c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <prvResetNextTaskUnblockTime+0x30>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <prvResetNextTaskUnblockTime+0x34>)
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000100 	.word	0x20000100
 8001e2c:	20000168 	.word	0x20000168

08001e30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <xTaskGetSchedulerState+0x34>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	e008      	b.n	8001e56 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <xTaskGetSchedulerState+0x38>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	e001      	b.n	8001e56 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001e56:	687b      	ldr	r3, [r7, #4]
    }
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	20000154 	.word	0x20000154
 8001e68:	20000170 	.word	0x20000170

08001e6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d068      	beq.n	8001f54 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001e82:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <xTaskPriorityDisinherit+0xf4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d00a      	beq.n	8001ea2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e90:	f383 8811 	msr	BASEPRI, r3
 8001e94:	f3bf 8f6f 	isb	sy
 8001e98:	f3bf 8f4f 	dsb	sy
 8001e9c:	60fb      	str	r3, [r7, #12]
    }
 8001e9e:	bf00      	nop
 8001ea0:	e7fe      	b.n	8001ea0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10a      	bne.n	8001ec0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eae:	f383 8811 	msr	BASEPRI, r3
 8001eb2:	f3bf 8f6f 	isb	sy
 8001eb6:	f3bf 8f4f 	dsb	sy
 8001eba:	60bb      	str	r3, [r7, #8]
    }
 8001ebc:	bf00      	nop
 8001ebe:	e7fe      	b.n	8001ebe <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec4:	1e5a      	subs	r2, r3, #1
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d03e      	beq.n	8001f54 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d13a      	bne.n	8001f54 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fbda 	bl	800069c <uxListRemove>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10a      	bne.n	8001f04 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <xTaskPriorityDisinherit+0xf8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4013      	ands	r3, r2
 8001f00:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <xTaskPriorityDisinherit+0xf8>)
 8001f02:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4619      	mov	r1, r3
 8001f08:	204a      	movs	r0, #74	; 0x4a
 8001f0a:	f001 fe13 	bl	8003b34 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	f1c3 0205 	rsb	r2, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	2201      	movs	r2, #1
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <xTaskPriorityDisinherit+0xf8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <xTaskPriorityDisinherit+0xf8>)
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <xTaskPriorityDisinherit+0xfc>)
 8001f42:	441a      	add	r2, r3
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	3304      	adds	r3, #4
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f7fe fb49 	bl	80005e2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001f50:	2301      	movs	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001f54:	697b      	ldr	r3, [r7, #20]
    }
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000070 	.word	0x20000070
 8001f64:	20000150 	.word	0x20000150
 8001f68:	20000074 	.word	0x20000074

08001f6c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00a      	beq.n	8001f96 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8001f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f84:	f383 8811 	msr	BASEPRI, r3
 8001f88:	f3bf 8f6f 	isb	sy
 8001f8c:	f3bf 8f4f 	dsb	sy
 8001f90:	613b      	str	r3, [r7, #16]
    }
 8001f92:	bf00      	nop
 8001f94:	e7fe      	b.n	8001f94 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001f96:	f000 fe3f 	bl	8002c18 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001f9a:	4b36      	ldr	r3, [pc, #216]	; (8002074 <xTaskGenericNotifyWait+0x108>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3354      	adds	r3, #84	; 0x54
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d022      	beq.n	8001ff2 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001fac:	4b31      	ldr	r3, [pc, #196]	; (8002074 <xTaskGenericNotifyWait+0x108>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	3214      	adds	r2, #20
 8001fb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	43d2      	mvns	r2, r2
 8001fbc:	4011      	ands	r1, r2
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	3214      	adds	r2, #20
 8001fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <xTaskGenericNotifyWait+0x108>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4413      	add	r3, r2
 8001fce:	3354      	adds	r3, #84	; 0x54
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001fda:	2101      	movs	r1, #1
 8001fdc:	6a38      	ldr	r0, [r7, #32]
 8001fde:	f000 f963 	bl	80022a8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001fe2:	4b25      	ldr	r3, [pc, #148]	; (8002078 <xTaskGenericNotifyWait+0x10c>)
 8001fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	f3bf 8f4f 	dsb	sy
 8001fee:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001ff2:	f000 fe41 	bl	8002c78 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001ff6:	f000 fe0f 	bl	8002c18 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	2040      	movs	r0, #64	; 0x40
 8002008:	f001 fea0 	bl	8003d4c <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <xTaskGenericNotifyWait+0x108>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	3214      	adds	r2, #20
 800201a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <xTaskGenericNotifyWait+0x108>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4413      	add	r3, r2
 800202a:	3354      	adds	r3, #84	; 0x54
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d002      	beq.n	800203a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	e00e      	b.n	8002058 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <xTaskGenericNotifyWait+0x108>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	3214      	adds	r2, #20
 8002042:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	43d2      	mvns	r2, r2
 800204a:	4011      	ands	r1, r2
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	3214      	adds	r2, #20
 8002050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002054:	2301      	movs	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <xTaskGenericNotifyWait+0x108>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	3354      	adds	r3, #84	; 0x54
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002066:	f000 fe07 	bl	8002c78 <vPortExitCritical>

        return xReturn;
 800206a:	697b      	ldr	r3, [r7, #20]
    }
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000070 	.word	0x20000070
 8002078:	e000ed04 	.word	0xe000ed04

0800207c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800207c:	b580      	push	{r7, lr}
 800207e:	b092      	sub	sp, #72	; 0x48
 8002080:	af02      	add	r7, sp, #8
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800208a:	2301      	movs	r3, #1
 800208c:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10a      	bne.n	80020aa <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8002094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002098:	f383 8811 	msr	BASEPRI, r3
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	f3bf 8f4f 	dsb	sy
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80020a6:	bf00      	nop
 80020a8:	e7fe      	b.n	80020a8 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00a      	beq.n	80020c6 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80020b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b4:	f383 8811 	msr	BASEPRI, r3
 80020b8:	f3bf 8f6f 	isb	sy
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80020c2:	bf00      	nop
 80020c4:	e7fe      	b.n	80020c4 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020c6:	f000 fe91 	bl	8002dec <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 80020ce:	f3ef 8211 	mrs	r2, BASEPRI
 80020d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d6:	f383 8811 	msr	BASEPRI, r3
 80020da:	f3bf 8f6f 	isb	sy
 80020de:	f3bf 8f4f 	dsb	sy
 80020e2:	627a      	str	r2, [r7, #36]	; 0x24
 80020e4:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80020ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d006      	beq.n	80020fe <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80020f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	3214      	adds	r2, #20
 80020f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020fc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80020fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4413      	add	r3, r2
 8002104:	3354      	adds	r3, #84	; 0x54
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800210c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	4413      	add	r3, r2
 8002112:	3354      	adds	r3, #84	; 0x54
 8002114:	2202      	movs	r2, #2
 8002116:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	2b04      	cmp	r3, #4
 800211c:	d83b      	bhi.n	8002196 <xTaskGenericNotifyFromISR+0x11a>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <xTaskGenericNotifyFromISR+0xa8>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	080021b5 	.word	0x080021b5
 8002128:	08002139 	.word	0x08002139
 800212c:	08002155 	.word	0x08002155
 8002130:	0800216d 	.word	0x0800216d
 8002134:	0800217b 	.word	0x0800217b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	3214      	adds	r2, #20
 800213e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	ea42 0103 	orr.w	r1, r2, r3
 8002148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	3214      	adds	r2, #20
 800214e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002152:	e032      	b.n	80021ba <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	3214      	adds	r2, #20
 800215a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215e:	1c59      	adds	r1, r3, #1
 8002160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	3214      	adds	r2, #20
 8002166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800216a:	e026      	b.n	80021ba <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800216c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	3214      	adds	r2, #20
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002178:	e01f      	b.n	80021ba <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800217a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800217e:	2b02      	cmp	r3, #2
 8002180:	d006      	beq.n	8002190 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	3214      	adds	r2, #20
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800218e:	e014      	b.n	80021ba <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8002190:	2300      	movs	r3, #0
 8002192:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8002194:	e011      	b.n	80021ba <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002196:	4b3d      	ldr	r3, [pc, #244]	; (800228c <xTaskGenericNotifyFromISR+0x210>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00c      	beq.n	80021b8 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800219e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a2:	f383 8811 	msr	BASEPRI, r3
 80021a6:	f3bf 8f6f 	isb	sy
 80021aa:	f3bf 8f4f 	dsb	sy
 80021ae:	61fb      	str	r3, [r7, #28]
    }
 80021b0:	bf00      	nop
 80021b2:	e7fe      	b.n	80021b2 <xTaskGenericNotifyFromISR+0x136>
                    break;
 80021b4:	bf00      	nop
 80021b6:	e000      	b.n	80021ba <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80021b8:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 80021ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021bc:	4618      	mov	r0, r3
 80021be:	f002 fb65 	bl	800488c <SEGGER_SYSVIEW_ShrinkId>
 80021c2:	78f9      	ldrb	r1, [r7, #3]
 80021c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021c8:	9201      	str	r2, [sp, #4]
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	460b      	mov	r3, r1
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4601      	mov	r1, r0
 80021d2:	203f      	movs	r0, #63	; 0x3f
 80021d4:	f001 fe4c 	bl	8003e70 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80021d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d149      	bne.n	8002274 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80021e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 80021e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ec:	f383 8811 	msr	BASEPRI, r3
 80021f0:	f3bf 8f6f 	isb	sy
 80021f4:	f3bf 8f4f 	dsb	sy
 80021f8:	61bb      	str	r3, [r7, #24]
    }
 80021fa:	bf00      	nop
 80021fc:	e7fe      	b.n	80021fc <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <xTaskGenericNotifyFromISR+0x214>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d120      	bne.n	8002248 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002208:	3304      	adds	r3, #4
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fa46 	bl	800069c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002212:	4618      	mov	r0, r3
 8002214:	f002 fa98 	bl	8004748 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	2201      	movs	r2, #1
 800221e:	409a      	lsls	r2, r3
 8002220:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <xTaskGenericNotifyFromISR+0x218>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4313      	orrs	r3, r2
 8002226:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <xTaskGenericNotifyFromISR+0x218>)
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4a18      	ldr	r2, [pc, #96]	; (8002298 <xTaskGenericNotifyFromISR+0x21c>)
 8002238:	441a      	add	r2, r3
 800223a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223c:	3304      	adds	r3, #4
 800223e:	4619      	mov	r1, r3
 8002240:	4610      	mov	r0, r2
 8002242:	f7fe f9ce 	bl	80005e2 <vListInsertEnd>
 8002246:	e005      	b.n	8002254 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224a:	3318      	adds	r3, #24
 800224c:	4619      	mov	r1, r3
 800224e:	4813      	ldr	r0, [pc, #76]	; (800229c <xTaskGenericNotifyFromISR+0x220>)
 8002250:	f7fe f9c7 	bl	80005e2 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <xTaskGenericNotifyFromISR+0x224>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	429a      	cmp	r2, r3
 8002260:	d908      	bls.n	8002274 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8002262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800226a:	2201      	movs	r2, #1
 800226c:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800226e:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <xTaskGenericNotifyFromISR+0x228>)
 8002270:	2201      	movs	r2, #1
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002276:	617b      	str	r3, [r7, #20]
        __asm volatile
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f383 8811 	msr	BASEPRI, r3
    }
 800227e:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8002280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8002282:	4618      	mov	r0, r3
 8002284:	3740      	adds	r7, #64	; 0x40
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2000014c 	.word	0x2000014c
 8002290:	20000170 	.word	0x20000170
 8002294:	20000150 	.word	0x20000150
 8002298:	20000074 	.word	0x20000074
 800229c:	20000108 	.word	0x20000108
 80022a0:	20000070 	.word	0x20000070
 80022a4:	2000015c 	.word	0x2000015c

080022a8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80022b2:	4b32      	ldr	r3, [pc, #200]	; (800237c <prvAddCurrentTaskToDelayedList+0xd4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022b8:	4b31      	ldr	r3, [pc, #196]	; (8002380 <prvAddCurrentTaskToDelayedList+0xd8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3304      	adds	r3, #4
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe f9ec 	bl	800069c <uxListRemove>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10b      	bne.n	80022e2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80022ca:	4b2d      	ldr	r3, [pc, #180]	; (8002380 <prvAddCurrentTaskToDelayedList+0xd8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	2201      	movs	r2, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <prvAddCurrentTaskToDelayedList+0xdc>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4013      	ands	r3, r2
 80022de:	4a29      	ldr	r2, [pc, #164]	; (8002384 <prvAddCurrentTaskToDelayedList+0xdc>)
 80022e0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d110      	bne.n	800230c <prvAddCurrentTaskToDelayedList+0x64>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00d      	beq.n	800230c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80022f0:	4b23      	ldr	r3, [pc, #140]	; (8002380 <prvAddCurrentTaskToDelayedList+0xd8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	211b      	movs	r1, #27
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 fa68 	bl	80047cc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022fc:	4b20      	ldr	r3, [pc, #128]	; (8002380 <prvAddCurrentTaskToDelayedList+0xd8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3304      	adds	r3, #4
 8002302:	4619      	mov	r1, r3
 8002304:	4820      	ldr	r0, [pc, #128]	; (8002388 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002306:	f7fe f96c 	bl	80005e2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800230a:	e032      	b.n	8002372 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	429a      	cmp	r2, r3
 8002322:	d20f      	bcs.n	8002344 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2104      	movs	r1, #4
 800232a:	4618      	mov	r0, r3
 800232c:	f002 fa4e 	bl	80047cc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002330:	4b16      	ldr	r3, [pc, #88]	; (800238c <prvAddCurrentTaskToDelayedList+0xe4>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3304      	adds	r3, #4
 800233a:	4619      	mov	r1, r3
 800233c:	4610      	mov	r0, r2
 800233e:	f7fe f974 	bl	800062a <vListInsert>
}
 8002342:	e016      	b.n	8002372 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2104      	movs	r1, #4
 800234a:	4618      	mov	r0, r3
 800234c:	f002 fa3e 	bl	80047cc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	3304      	adds	r3, #4
 800235a:	4619      	mov	r1, r3
 800235c:	4610      	mov	r0, r2
 800235e:	f7fe f964 	bl	800062a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <prvAddCurrentTaskToDelayedList+0xec>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	429a      	cmp	r2, r3
 800236a:	d202      	bcs.n	8002372 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800236c:	4a09      	ldr	r2, [pc, #36]	; (8002394 <prvAddCurrentTaskToDelayedList+0xec>)
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	6013      	str	r3, [r2, #0]
}
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	2000014c 	.word	0x2000014c
 8002380:	20000070 	.word	0x20000070
 8002384:	20000150 	.word	0x20000150
 8002388:	20000134 	.word	0x20000134
 800238c:	20000104 	.word	0x20000104
 8002390:	20000100 	.word	0x20000100
 8002394:	20000168 	.word	0x20000168

08002398 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80023a2:	f000 fad5 	bl	8002950 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <xTimerCreateTimerTask+0x54>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00b      	beq.n	80023c6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <xTimerCreateTimerTask+0x58>)
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	2302      	movs	r3, #2
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2300      	movs	r3, #0
 80023b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023bc:	490d      	ldr	r1, [pc, #52]	; (80023f4 <xTimerCreateTimerTask+0x5c>)
 80023be:	480e      	ldr	r0, [pc, #56]	; (80023f8 <xTimerCreateTimerTask+0x60>)
 80023c0:	f7fe fef0 	bl	80011a4 <xTaskCreate>
 80023c4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10a      	bne.n	80023e2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80023cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d0:	f383 8811 	msr	BASEPRI, r3
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	603b      	str	r3, [r7, #0]
    }
 80023de:	bf00      	nop
 80023e0:	e7fe      	b.n	80023e0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80023e2:	687b      	ldr	r3, [r7, #4]
    }
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200001a4 	.word	0x200001a4
 80023f0:	200001a8 	.word	0x200001a8
 80023f4:	08006ab8 	.word	0x08006ab8
 80023f8:	08002531 	.word	0x08002531

080023fc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800240a:	2300      	movs	r3, #0
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <xTimerGenericCommand+0x2e>
        __asm volatile
 8002414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	623b      	str	r3, [r7, #32]
    }
 8002426:	bf00      	nop
 8002428:	e7fe      	b.n	8002428 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <xTimerGenericCommand+0x98>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d02a      	beq.n	8002488 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b05      	cmp	r3, #5
 8002442:	dc18      	bgt.n	8002476 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002444:	f7ff fcf4 	bl	8001e30 <xTaskGetSchedulerState>
 8002448:	4603      	mov	r3, r0
 800244a:	2b02      	cmp	r3, #2
 800244c:	d109      	bne.n	8002462 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <xTimerGenericCommand+0x98>)
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	f107 0114 	add.w	r1, r7, #20
 8002456:	2300      	movs	r3, #0
 8002458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245a:	f7fe fa39 	bl	80008d0 <xQueueGenericSend>
 800245e:	6278      	str	r0, [r7, #36]	; 0x24
 8002460:	e012      	b.n	8002488 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <xTimerGenericCommand+0x98>)
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	f107 0114 	add.w	r1, r7, #20
 800246a:	2300      	movs	r3, #0
 800246c:	2200      	movs	r2, #0
 800246e:	f7fe fa2f 	bl	80008d0 <xQueueGenericSend>
 8002472:	6278      	str	r0, [r7, #36]	; 0x24
 8002474:	e008      	b.n	8002488 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <xTimerGenericCommand+0x98>)
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	f107 0114 	add.w	r1, r7, #20
 800247e:	2300      	movs	r3, #0
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	f7fe fb4b 	bl	8000b1c <xQueueGenericSendFromISR>
 8002486:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800248a:	4618      	mov	r0, r3
 800248c:	3728      	adds	r7, #40	; 0x28
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200001a4 	.word	0x200001a4

08002498 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af02      	add	r7, sp, #8
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024a2:	4b22      	ldr	r3, [pc, #136]	; (800252c <prvProcessExpiredTimer+0x94>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3304      	adds	r3, #4
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f8f3 	bl	800069c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d022      	beq.n	800250a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	18d1      	adds	r1, r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	6978      	ldr	r0, [r7, #20]
 80024d2:	f000 f8d1 	bl	8002678 <prvInsertTimerInActiveList>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01f      	beq.n	800251c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80024dc:	2300      	movs	r3, #0
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2300      	movs	r3, #0
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	2100      	movs	r1, #0
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff ff88 	bl	80023fc <xTimerGenericCommand>
 80024ec:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d113      	bne.n	800251c <prvProcessExpiredTimer+0x84>
        __asm volatile
 80024f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	60fb      	str	r3, [r7, #12]
    }
 8002506:	bf00      	nop
 8002508:	e7fe      	b.n	8002508 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	b2da      	uxtb	r2, r3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	6978      	ldr	r0, [r7, #20]
 8002522:	4798      	blx	r3
    }
 8002524:	bf00      	nop
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	2000019c 	.word	0x2000019c

08002530 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002538:	f107 0308 	add.w	r3, r7, #8
 800253c:	4618      	mov	r0, r3
 800253e:	f000 f857 	bl	80025f0 <prvGetNextExpireTime>
 8002542:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4619      	mov	r1, r3
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f803 	bl	8002554 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800254e:	f000 f8d5 	bl	80026fc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002552:	e7f1      	b.n	8002538 <prvTimerTask+0x8>

08002554 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800255e:	f7ff f891 	bl	8001684 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002562:	f107 0308 	add.w	r3, r7, #8
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f866 	bl	8002638 <prvSampleTimeNow>
 800256c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d130      	bne.n	80025d6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10a      	bne.n	8002590 <prvProcessTimerOrBlockTask+0x3c>
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	429a      	cmp	r2, r3
 8002580:	d806      	bhi.n	8002590 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002582:	f7ff f88d 	bl	80016a0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff85 	bl	8002498 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800258e:	e024      	b.n	80025da <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <prvProcessTimerOrBlockTask+0x90>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <prvProcessTimerOrBlockTask+0x50>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <prvProcessTimerOrBlockTask+0x52>
 80025a4:	2300      	movs	r3, #0
 80025a6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <prvProcessTimerOrBlockTask+0x94>)
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	4619      	mov	r1, r3
 80025b6:	f7fe fdc1 	bl	800113c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80025ba:	f7ff f871 	bl	80016a0 <xTaskResumeAll>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10a      	bne.n	80025da <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80025c4:	4b09      	ldr	r3, [pc, #36]	; (80025ec <prvProcessTimerOrBlockTask+0x98>)
 80025c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	f3bf 8f6f 	isb	sy
    }
 80025d4:	e001      	b.n	80025da <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80025d6:	f7ff f863 	bl	80016a0 <xTaskResumeAll>
    }
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	200001a0 	.word	0x200001a0
 80025e8:	200001a4 	.word	0x200001a4
 80025ec:	e000ed04 	.word	0xe000ed04

080025f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80025f8:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <prvGetNextExpireTime+0x44>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <prvGetNextExpireTime+0x16>
 8002602:	2201      	movs	r2, #1
 8002604:	e000      	b.n	8002608 <prvGetNextExpireTime+0x18>
 8002606:	2200      	movs	r2, #0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d105      	bne.n	8002620 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002614:	4b07      	ldr	r3, [pc, #28]	; (8002634 <prvGetNextExpireTime+0x44>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	e001      	b.n	8002624 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002624:	68fb      	ldr	r3, [r7, #12]
    }
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	2000019c 	.word	0x2000019c

08002638 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002640:	f7ff f8ce 	bl	80017e0 <xTaskGetTickCount>
 8002644:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <prvSampleTimeNow+0x3c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	429a      	cmp	r2, r3
 800264e:	d205      	bcs.n	800265c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002650:	f000 f91a 	bl	8002888 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e002      	b.n	8002662 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002662:	4a04      	ldr	r2, [pc, #16]	; (8002674 <prvSampleTimeNow+0x3c>)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002668:	68fb      	ldr	r3, [r7, #12]
    }
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	200001ac 	.word	0x200001ac

08002678 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	429a      	cmp	r2, r3
 800269c:	d812      	bhi.n	80026c4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	1ad2      	subs	r2, r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d302      	bcc.n	80026b2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80026ac:	2301      	movs	r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	e01b      	b.n	80026ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <prvInsertTimerInActiveList+0x7c>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3304      	adds	r3, #4
 80026ba:	4619      	mov	r1, r3
 80026bc:	4610      	mov	r0, r2
 80026be:	f7fd ffb4 	bl	800062a <vListInsert>
 80026c2:	e012      	b.n	80026ea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d206      	bcs.n	80026da <prvInsertTimerInActiveList+0x62>
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d302      	bcc.n	80026da <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80026d4:	2301      	movs	r3, #1
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	e007      	b.n	80026ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <prvInsertTimerInActiveList+0x80>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3304      	adds	r3, #4
 80026e2:	4619      	mov	r1, r3
 80026e4:	4610      	mov	r0, r2
 80026e6:	f7fd ffa0 	bl	800062a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80026ea:	697b      	ldr	r3, [r7, #20]
    }
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200001a0 	.word	0x200001a0
 80026f8:	2000019c 	.word	0x2000019c

080026fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	; 0x30
 8002700:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002702:	e0ae      	b.n	8002862 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f2c0 80aa 	blt.w	8002860 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	3304      	adds	r3, #4
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd ffbd 	bl	800069c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff87 	bl	8002638 <prvSampleTimeNow>
 800272a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b09      	cmp	r3, #9
 8002730:	f200 8097 	bhi.w	8002862 <prvProcessReceivedCommands+0x166>
 8002734:	a201      	add	r2, pc, #4	; (adr r2, 800273c <prvProcessReceivedCommands+0x40>)
 8002736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273a:	bf00      	nop
 800273c:	08002765 	.word	0x08002765
 8002740:	08002765 	.word	0x08002765
 8002744:	08002765 	.word	0x08002765
 8002748:	080027d9 	.word	0x080027d9
 800274c:	080027ed 	.word	0x080027ed
 8002750:	08002837 	.word	0x08002837
 8002754:	08002765 	.word	0x08002765
 8002758:	08002765 	.word	0x08002765
 800275c:	080027d9 	.word	0x080027d9
 8002760:	080027ed 	.word	0x080027ed
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	18d1      	adds	r1, r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a3a      	ldr	r2, [r7, #32]
 8002782:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002784:	f7ff ff78 	bl	8002678 <prvInsertTimerInActiveList>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d069      	beq.n	8002862 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002794:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d05e      	beq.n	8002862 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	441a      	add	r2, r3
 80027ac:	2300      	movs	r3, #0
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2300      	movs	r3, #0
 80027b2:	2100      	movs	r1, #0
 80027b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027b6:	f7ff fe21 	bl	80023fc <xTimerGenericCommand>
 80027ba:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d14f      	bne.n	8002862 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80027c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c6:	f383 8811 	msr	BASEPRI, r3
 80027ca:	f3bf 8f6f 	isb	sy
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	61bb      	str	r3, [r7, #24]
    }
 80027d4:	bf00      	nop
 80027d6:	e7fe      	b.n	80027d6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80027ea:	e03a      	b.n	8002862 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	617b      	str	r3, [r7, #20]
    }
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	18d1      	adds	r1, r2, r3
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	6a3a      	ldr	r2, [r7, #32]
 800282e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002830:	f7ff ff22 	bl	8002678 <prvInsertTimerInActiveList>
                        break;
 8002834:	e015      	b.n	8002862 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d103      	bne.n	800284c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8002844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002846:	f000 fbf1 	bl	800302c <vPortFree>
 800284a:	e00a      	b.n	8002862 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	b2da      	uxtb	r2, r3
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800285e:	e000      	b.n	8002862 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002860:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <prvProcessReceivedCommands+0x188>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f107 0108 	add.w	r1, r7, #8
 800286a:	2200      	movs	r2, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe fa13 	bl	8000c98 <xQueueReceive>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	f47f af45 	bne.w	8002704 <prvProcessReceivedCommands+0x8>
        }
    }
 800287a:	bf00      	nop
 800287c:	bf00      	nop
 800287e:	3728      	adds	r7, #40	; 0x28
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	200001a4 	.word	0x200001a4

08002888 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800288e:	e048      	b.n	8002922 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002890:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <prvSwitchTimerLists+0xc0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800289a:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <prvSwitchTimerLists+0xc0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3304      	adds	r3, #4
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fef7 	bl	800069c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d02e      	beq.n	8002922 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d90e      	bls.n	80028f4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028e2:	4b19      	ldr	r3, [pc, #100]	; (8002948 <prvSwitchTimerLists+0xc0>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3304      	adds	r3, #4
 80028ea:	4619      	mov	r1, r3
 80028ec:	4610      	mov	r0, r2
 80028ee:	f7fd fe9c 	bl	800062a <vListInsert>
 80028f2:	e016      	b.n	8002922 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80028f4:	2300      	movs	r3, #0
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2300      	movs	r3, #0
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	2100      	movs	r1, #0
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f7ff fd7c 	bl	80023fc <xTimerGenericCommand>
 8002904:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	603b      	str	r3, [r7, #0]
    }
 800291e:	bf00      	nop
 8002920:	e7fe      	b.n	8002920 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <prvSwitchTimerLists+0xc0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1b1      	bne.n	8002890 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <prvSwitchTimerLists+0xc0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <prvSwitchTimerLists+0xc4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a04      	ldr	r2, [pc, #16]	; (8002948 <prvSwitchTimerLists+0xc0>)
 8002938:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800293a:	4a04      	ldr	r2, [pc, #16]	; (800294c <prvSwitchTimerLists+0xc4>)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	6013      	str	r3, [r2, #0]
    }
 8002940:	bf00      	nop
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	2000019c 	.word	0x2000019c
 800294c:	200001a0 	.word	0x200001a0

08002950 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002954:	f000 f960 	bl	8002c18 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <prvCheckForValidListAndQueue+0x54>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d11d      	bne.n	800299c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002960:	4811      	ldr	r0, [pc, #68]	; (80029a8 <prvCheckForValidListAndQueue+0x58>)
 8002962:	f7fd fe11 	bl	8000588 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002966:	4811      	ldr	r0, [pc, #68]	; (80029ac <prvCheckForValidListAndQueue+0x5c>)
 8002968:	f7fd fe0e 	bl	8000588 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800296c:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <prvCheckForValidListAndQueue+0x60>)
 800296e:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <prvCheckForValidListAndQueue+0x58>)
 8002970:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <prvCheckForValidListAndQueue+0x64>)
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <prvCheckForValidListAndQueue+0x5c>)
 8002976:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002978:	2200      	movs	r2, #0
 800297a:	210c      	movs	r1, #12
 800297c:	200a      	movs	r0, #10
 800297e:	f7fd ff1f 	bl	80007c0 <xQueueGenericCreate>
 8002982:	4603      	mov	r3, r0
 8002984:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <prvCheckForValidListAndQueue+0x54>)
 8002986:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <prvCheckForValidListAndQueue+0x54>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <prvCheckForValidListAndQueue+0x54>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4908      	ldr	r1, [pc, #32]	; (80029b8 <prvCheckForValidListAndQueue+0x68>)
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fb9e 	bl	80010d8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800299c:	f000 f96c 	bl	8002c78 <vPortExitCritical>
    }
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	200001a4 	.word	0x200001a4
 80029a8:	20000174 	.word	0x20000174
 80029ac:	20000188 	.word	0x20000188
 80029b0:	2000019c 	.word	0x2000019c
 80029b4:	200001a0 	.word	0x200001a0
 80029b8:	08006ac0 	.word	0x08006ac0

080029bc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3b04      	subs	r3, #4
 80029cc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3b04      	subs	r3, #4
 80029da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f023 0201 	bic.w	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3b04      	subs	r3, #4
 80029ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80029ec:	4a0c      	ldr	r2, [pc, #48]	; (8002a20 <pxPortInitialiseStack+0x64>)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3b14      	subs	r3, #20
 80029f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3b04      	subs	r3, #4
 8002a02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f06f 0202 	mvn.w	r2, #2
 8002a0a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3b20      	subs	r3, #32
 8002a10:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a12:	68fb      	ldr	r3, [r7, #12]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	08002a25 	.word	0x08002a25

08002a24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <prvTaskExitError+0x54>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a36:	d00a      	beq.n	8002a4e <prvTaskExitError+0x2a>
        __asm volatile
 8002a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3c:	f383 8811 	msr	BASEPRI, r3
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	60fb      	str	r3, [r7, #12]
    }
 8002a4a:	bf00      	nop
 8002a4c:	e7fe      	b.n	8002a4c <prvTaskExitError+0x28>
        __asm volatile
 8002a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a52:	f383 8811 	msr	BASEPRI, r3
 8002a56:	f3bf 8f6f 	isb	sy
 8002a5a:	f3bf 8f4f 	dsb	sy
 8002a5e:	60bb      	str	r3, [r7, #8]
    }
 8002a60:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002a62:	bf00      	nop
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0fc      	beq.n	8002a64 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002a6a:	bf00      	nop
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	20000004 	.word	0x20000004
 8002a7c:	00000000 	.word	0x00000000

08002a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <pxCurrentTCBConst2>)
 8002a82:	6819      	ldr	r1, [r3, #0]
 8002a84:	6808      	ldr	r0, [r1, #0]
 8002a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a8a:	f380 8809 	msr	PSP, r0
 8002a8e:	f3bf 8f6f 	isb	sy
 8002a92:	f04f 0000 	mov.w	r0, #0
 8002a96:	f380 8811 	msr	BASEPRI, r0
 8002a9a:	4770      	bx	lr
 8002a9c:	f3af 8000 	nop.w

08002aa0 <pxCurrentTCBConst2>:
 8002aa0:	20000070 	.word	0x20000070
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop

08002aa8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002aa8:	4808      	ldr	r0, [pc, #32]	; (8002acc <prvPortStartFirstTask+0x24>)
 8002aaa:	6800      	ldr	r0, [r0, #0]
 8002aac:	6800      	ldr	r0, [r0, #0]
 8002aae:	f380 8808 	msr	MSP, r0
 8002ab2:	f04f 0000 	mov.w	r0, #0
 8002ab6:	f380 8814 	msr	CONTROL, r0
 8002aba:	b662      	cpsie	i
 8002abc:	b661      	cpsie	f
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	df00      	svc	0
 8002ac8:	bf00      	nop
 8002aca:	0000      	.short	0x0000
 8002acc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop

08002ad4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ada:	4b46      	ldr	r3, [pc, #280]	; (8002bf4 <xPortStartScheduler+0x120>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a46      	ldr	r2, [pc, #280]	; (8002bf8 <xPortStartScheduler+0x124>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d10a      	bne.n	8002afa <xPortStartScheduler+0x26>
        __asm volatile
 8002ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	613b      	str	r3, [r7, #16]
    }
 8002af6:	bf00      	nop
 8002af8:	e7fe      	b.n	8002af8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002afa:	4b3e      	ldr	r3, [pc, #248]	; (8002bf4 <xPortStartScheduler+0x120>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a3f      	ldr	r2, [pc, #252]	; (8002bfc <xPortStartScheduler+0x128>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d10a      	bne.n	8002b1a <xPortStartScheduler+0x46>
        __asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	60fb      	str	r3, [r7, #12]
    }
 8002b16:	bf00      	nop
 8002b18:	e7fe      	b.n	8002b18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b1a:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <xPortStartScheduler+0x12c>)
 8002b1c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	22ff      	movs	r2, #255	; 0xff
 8002b2a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <xPortStartScheduler+0x130>)
 8002b40:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b42:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <xPortStartScheduler+0x134>)
 8002b44:	2207      	movs	r2, #7
 8002b46:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b48:	e009      	b.n	8002b5e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002b4a:	4b2f      	ldr	r3, [pc, #188]	; (8002c08 <xPortStartScheduler+0x134>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	4a2d      	ldr	r2, [pc, #180]	; (8002c08 <xPortStartScheduler+0x134>)
 8002b52:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b66:	2b80      	cmp	r3, #128	; 0x80
 8002b68:	d0ef      	beq.n	8002b4a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b6a:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <xPortStartScheduler+0x134>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f1c3 0307 	rsb	r3, r3, #7
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d00a      	beq.n	8002b8c <xPortStartScheduler+0xb8>
        __asm volatile
 8002b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7a:	f383 8811 	msr	BASEPRI, r3
 8002b7e:	f3bf 8f6f 	isb	sy
 8002b82:	f3bf 8f4f 	dsb	sy
 8002b86:	60bb      	str	r3, [r7, #8]
    }
 8002b88:	bf00      	nop
 8002b8a:	e7fe      	b.n	8002b8a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b8c:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <xPortStartScheduler+0x134>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <xPortStartScheduler+0x134>)
 8002b94:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <xPortStartScheduler+0x134>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b9e:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <xPortStartScheduler+0x134>)
 8002ba0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <xPortStartScheduler+0x138>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a17      	ldr	r2, [pc, #92]	; (8002c0c <xPortStartScheduler+0x138>)
 8002bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <xPortStartScheduler+0x138>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <xPortStartScheduler+0x138>)
 8002bbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002bc0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002bc2:	f000 f8e3 	bl	8002d8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <xPortStartScheduler+0x13c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002bcc:	f000 f902 	bl	8002dd4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002bd0:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <xPortStartScheduler+0x140>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <xPortStartScheduler+0x140>)
 8002bd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002bda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002bdc:	f7ff ff64 	bl	8002aa8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002be0:	f7fe feca 	bl	8001978 <vTaskSwitchContext>
    prvTaskExitError();
 8002be4:	f7ff ff1e 	bl	8002a24 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	e000ed00 	.word	0xe000ed00
 8002bf8:	410fc271 	.word	0x410fc271
 8002bfc:	410fc270 	.word	0x410fc270
 8002c00:	e000e400 	.word	0xe000e400
 8002c04:	200001b0 	.word	0x200001b0
 8002c08:	200001b4 	.word	0x200001b4
 8002c0c:	e000ed20 	.word	0xe000ed20
 8002c10:	20000004 	.word	0x20000004
 8002c14:	e000ef34 	.word	0xe000ef34

08002c18 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
        __asm volatile
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	607b      	str	r3, [r7, #4]
    }
 8002c30:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002c32:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <vPortEnterCritical+0x58>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <vPortEnterCritical+0x58>)
 8002c3a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <vPortEnterCritical+0x58>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d10f      	bne.n	8002c64 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <vPortEnterCritical+0x5c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <vPortEnterCritical+0x4c>
        __asm volatile
 8002c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c52:	f383 8811 	msr	BASEPRI, r3
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	603b      	str	r3, [r7, #0]
    }
 8002c60:	bf00      	nop
 8002c62:	e7fe      	b.n	8002c62 <vPortEnterCritical+0x4a>
    }
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	20000004 	.word	0x20000004
 8002c74:	e000ed04 	.word	0xe000ed04

08002c78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <vPortExitCritical+0x50>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <vPortExitCritical+0x24>
        __asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	607b      	str	r3, [r7, #4]
    }
 8002c98:	bf00      	nop
 8002c9a:	e7fe      	b.n	8002c9a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <vPortExitCritical+0x50>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	4a09      	ldr	r2, [pc, #36]	; (8002cc8 <vPortExitCritical+0x50>)
 8002ca4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <vPortExitCritical+0x50>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d105      	bne.n	8002cba <vPortExitCritical+0x42>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f383 8811 	msr	BASEPRI, r3
    }
 8002cb8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000004 	.word	0x20000004
 8002ccc:	00000000 	.word	0x00000000

08002cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002cd0:	f3ef 8009 	mrs	r0, PSP
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <pxCurrentTCBConst>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	f01e 0f10 	tst.w	lr, #16
 8002ce0:	bf08      	it	eq
 8002ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cea:	6010      	str	r0, [r2, #0]
 8002cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002cf4:	f380 8811 	msr	BASEPRI, r0
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f7fe fe3a 	bl	8001978 <vTaskSwitchContext>
 8002d04:	f04f 0000 	mov.w	r0, #0
 8002d08:	f380 8811 	msr	BASEPRI, r0
 8002d0c:	bc09      	pop	{r0, r3}
 8002d0e:	6819      	ldr	r1, [r3, #0]
 8002d10:	6808      	ldr	r0, [r1, #0]
 8002d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d16:	f01e 0f10 	tst.w	lr, #16
 8002d1a:	bf08      	it	eq
 8002d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d20:	f380 8809 	msr	PSP, r0
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	f3af 8000 	nop.w

08002d30 <pxCurrentTCBConst>:
 8002d30:	20000070 	.word	0x20000070
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop

08002d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
        __asm volatile
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	607b      	str	r3, [r7, #4]
    }
 8002d50:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002d52:	f001 fbdf 	bl	8004514 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002d56:	f7fe fd53 	bl	8001800 <xTaskIncrementTick>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d006      	beq.n	8002d6e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002d60:	f001 fc36 	bl	80045d0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <SysTick_Handler+0x50>)
 8002d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	e001      	b.n	8002d72 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002d6e:	f001 fc13 	bl	8004598 <SEGGER_SYSVIEW_RecordExitISR>
 8002d72:	2300      	movs	r3, #0
 8002d74:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f383 8811 	msr	BASEPRI, r3
    }
 8002d7c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	e000ed04 	.word	0xe000ed04

08002d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <vPortSetupTimerInterrupt+0x34>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <vPortSetupTimerInterrupt+0x38>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <vPortSetupTimerInterrupt+0x3c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <vPortSetupTimerInterrupt+0x40>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	099b      	lsrs	r3, r3, #6
 8002da8:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <vPortSetupTimerInterrupt+0x44>)
 8002daa:	3b01      	subs	r3, #1
 8002dac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002dae:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <vPortSetupTimerInterrupt+0x34>)
 8002db0:	2207      	movs	r2, #7
 8002db2:	601a      	str	r2, [r3, #0]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000e010 	.word	0xe000e010
 8002dc4:	e000e018 	.word	0xe000e018
 8002dc8:	20000008 	.word	0x20000008
 8002dcc:	10624dd3 	.word	0x10624dd3
 8002dd0:	e000e014 	.word	0xe000e014

08002dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002de4 <vPortEnableVFP+0x10>
 8002dd8:	6801      	ldr	r1, [r0, #0]
 8002dda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002dde:	6001      	str	r1, [r0, #0]
 8002de0:	4770      	bx	lr
 8002de2:	0000      	.short	0x0000
 8002de4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop

08002dec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002df2:	f3ef 8305 	mrs	r3, IPSR
 8002df6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b0f      	cmp	r3, #15
 8002dfc:	d914      	bls.n	8002e28 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002dfe:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <vPortValidateInterruptPriority+0x70>)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <vPortValidateInterruptPriority+0x74>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	7afa      	ldrb	r2, [r7, #11]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d20a      	bcs.n	8002e28 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	607b      	str	r3, [r7, #4]
    }
 8002e24:	bf00      	nop
 8002e26:	e7fe      	b.n	8002e26 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <vPortValidateInterruptPriority+0x78>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e30:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <vPortValidateInterruptPriority+0x7c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d90a      	bls.n	8002e4e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	603b      	str	r3, [r7, #0]
    }
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <vPortValidateInterruptPriority+0x60>
    }
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000e3f0 	.word	0xe000e3f0
 8002e60:	200001b0 	.word	0x200001b0
 8002e64:	e000ed0c 	.word	0xe000ed0c
 8002e68:	200001b4 	.word	0x200001b4

08002e6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002e78:	f7fe fc04 	bl	8001684 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002e7c:	4b65      	ldr	r3, [pc, #404]	; (8003014 <pvPortMalloc+0x1a8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002e84:	f000 f934 	bl	80030f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e88:	4b63      	ldr	r3, [pc, #396]	; (8003018 <pvPortMalloc+0x1ac>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f040 80a7 	bne.w	8002fe4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d02d      	beq.n	8002ef8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d227      	bcs.n	8002ef8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d021      	beq.n	8002efe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f023 0307 	bic.w	r3, r3, #7
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d214      	bcs.n	8002ef2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f023 0307 	bic.w	r3, r3, #7
 8002ece:	3308      	adds	r3, #8
 8002ed0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d010      	beq.n	8002efe <pvPortMalloc+0x92>
        __asm volatile
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	617b      	str	r3, [r7, #20]
    }
 8002eee:	bf00      	nop
 8002ef0:	e7fe      	b.n	8002ef0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ef6:	e002      	b.n	8002efe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	607b      	str	r3, [r7, #4]
 8002efc:	e000      	b.n	8002f00 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002efe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d06e      	beq.n	8002fe4 <pvPortMalloc+0x178>
 8002f06:	4b45      	ldr	r3, [pc, #276]	; (800301c <pvPortMalloc+0x1b0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d869      	bhi.n	8002fe4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002f10:	4b43      	ldr	r3, [pc, #268]	; (8003020 <pvPortMalloc+0x1b4>)
 8002f12:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002f14:	4b42      	ldr	r3, [pc, #264]	; (8003020 <pvPortMalloc+0x1b4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f1a:	e004      	b.n	8002f26 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d903      	bls.n	8002f38 <pvPortMalloc+0xcc>
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f1      	bne.n	8002f1c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002f38:	4b36      	ldr	r3, [pc, #216]	; (8003014 <pvPortMalloc+0x1a8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d050      	beq.n	8002fe4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2208      	movs	r2, #8
 8002f48:	4413      	add	r3, r2
 8002f4a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	1ad2      	subs	r2, r2, r3
 8002f5c:	2308      	movs	r3, #8
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d91f      	bls.n	8002fa4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <pvPortMalloc+0x120>
        __asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	613b      	str	r3, [r7, #16]
    }
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	1ad2      	subs	r2, r2, r3
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f9e:	69b8      	ldr	r0, [r7, #24]
 8002fa0:	f000 f908 	bl	80031b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <pvPortMalloc+0x1b0>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	4a1b      	ldr	r2, [pc, #108]	; (800301c <pvPortMalloc+0x1b0>)
 8002fb0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002fb2:	4b1a      	ldr	r3, [pc, #104]	; (800301c <pvPortMalloc+0x1b0>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <pvPortMalloc+0x1b8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d203      	bcs.n	8002fc6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002fbe:	4b17      	ldr	r3, [pc, #92]	; (800301c <pvPortMalloc+0x1b0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a18      	ldr	r2, [pc, #96]	; (8003024 <pvPortMalloc+0x1b8>)
 8002fc4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	4b13      	ldr	r3, [pc, #76]	; (8003018 <pvPortMalloc+0x1ac>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002fda:	4b13      	ldr	r3, [pc, #76]	; (8003028 <pvPortMalloc+0x1bc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	4a11      	ldr	r2, [pc, #68]	; (8003028 <pvPortMalloc+0x1bc>)
 8002fe2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002fe4:	f7fe fb5c 	bl	80016a0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <pvPortMalloc+0x19c>
        __asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	60fb      	str	r3, [r7, #12]
    }
 8003004:	bf00      	nop
 8003006:	e7fe      	b.n	8003006 <pvPortMalloc+0x19a>
    return pvReturn;
 8003008:	69fb      	ldr	r3, [r7, #28]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3728      	adds	r7, #40	; 0x28
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20012dc0 	.word	0x20012dc0
 8003018:	20012dd4 	.word	0x20012dd4
 800301c:	20012dc4 	.word	0x20012dc4
 8003020:	20012db8 	.word	0x20012db8
 8003024:	20012dc8 	.word	0x20012dc8
 8003028:	20012dcc 	.word	0x20012dcc

0800302c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d04d      	beq.n	80030da <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800303e:	2308      	movs	r3, #8
 8003040:	425b      	negs	r3, r3
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4413      	add	r3, r2
 8003046:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <vPortFree+0xb8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <vPortFree+0x44>
        __asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	60fb      	str	r3, [r7, #12]
    }
 800306c:	bf00      	nop
 800306e:	e7fe      	b.n	800306e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <vPortFree+0x62>
        __asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	60bb      	str	r3, [r7, #8]
    }
 800308a:	bf00      	nop
 800308c:	e7fe      	b.n	800308c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <vPortFree+0xb8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01e      	beq.n	80030da <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d11a      	bne.n	80030da <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <vPortFree+0xb8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	401a      	ands	r2, r3
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80030b4:	f7fe fae6 	bl	8001684 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <vPortFree+0xbc>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4413      	add	r3, r2
 80030c2:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <vPortFree+0xbc>)
 80030c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030c6:	6938      	ldr	r0, [r7, #16]
 80030c8:	f000 f874 	bl	80031b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80030cc:	4b07      	ldr	r3, [pc, #28]	; (80030ec <vPortFree+0xc0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3301      	adds	r3, #1
 80030d2:	4a06      	ldr	r2, [pc, #24]	; (80030ec <vPortFree+0xc0>)
 80030d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80030d6:	f7fe fae3 	bl	80016a0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20012dd4 	.word	0x20012dd4
 80030e8:	20012dc4 	.word	0x20012dc4
 80030ec:	20012dd0 	.word	0x20012dd0

080030f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80030f6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80030fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80030fc:	4b27      	ldr	r3, [pc, #156]	; (800319c <prvHeapInit+0xac>)
 80030fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00c      	beq.n	8003124 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3307      	adds	r3, #7
 800310e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0307 	bic.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	4a1f      	ldr	r2, [pc, #124]	; (800319c <prvHeapInit+0xac>)
 8003120:	4413      	add	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003128:	4a1d      	ldr	r2, [pc, #116]	; (80031a0 <prvHeapInit+0xb0>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800312e:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <prvHeapInit+0xb0>)
 8003130:	2200      	movs	r2, #0
 8003132:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	4413      	add	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800313c:	2208      	movs	r2, #8
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0307 	bic.w	r3, r3, #7
 800314a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4a15      	ldr	r2, [pc, #84]	; (80031a4 <prvHeapInit+0xb4>)
 8003150:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <prvHeapInit+0xb4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2200      	movs	r2, #0
 8003158:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <prvHeapInit+0xb4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	1ad2      	subs	r2, r2, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <prvHeapInit+0xb4>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <prvHeapInit+0xb8>)
 800317e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a09      	ldr	r2, [pc, #36]	; (80031ac <prvHeapInit+0xbc>)
 8003186:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <prvHeapInit+0xc0>)
 800318a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800318e:	601a      	str	r2, [r3, #0]
}
 8003190:	bf00      	nop
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	200001b8 	.word	0x200001b8
 80031a0:	20012db8 	.word	0x20012db8
 80031a4:	20012dc0 	.word	0x20012dc0
 80031a8:	20012dc8 	.word	0x20012dc8
 80031ac:	20012dc4 	.word	0x20012dc4
 80031b0:	20012dd4 	.word	0x20012dd4

080031b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031bc:	4b28      	ldr	r3, [pc, #160]	; (8003260 <prvInsertBlockIntoFreeList+0xac>)
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	e002      	b.n	80031c8 <prvInsertBlockIntoFreeList+0x14>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d8f7      	bhi.n	80031c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	4413      	add	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d108      	bne.n	80031f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	441a      	add	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	441a      	add	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d118      	bne.n	800323c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <prvInsertBlockIntoFreeList+0xb0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d00d      	beq.n	8003232 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	441a      	add	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	e008      	b.n	8003244 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003232:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <prvInsertBlockIntoFreeList+0xb0>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e003      	b.n	8003244 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d002      	beq.n	8003252 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20012db8 	.word	0x20012db8
 8003264:	20012dc0 	.word	0x20012dc0

08003268 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003276:	2205      	movs	r2, #5
 8003278:	492b      	ldr	r1, [pc, #172]	; (8003328 <SYSVIEW_AddTask+0xc0>)
 800327a:	68b8      	ldr	r0, [r7, #8]
 800327c:	f003 fbe6 	bl	8006a4c <memcmp>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d04b      	beq.n	800331e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003286:	4b29      	ldr	r3, [pc, #164]	; (800332c <SYSVIEW_AddTask+0xc4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b07      	cmp	r3, #7
 800328c:	d903      	bls.n	8003296 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800328e:	4828      	ldr	r0, [pc, #160]	; (8003330 <SYSVIEW_AddTask+0xc8>)
 8003290:	f001 fbe8 	bl	8004a64 <SEGGER_SYSVIEW_Warn>
    return;
 8003294:	e044      	b.n	8003320 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003296:	4b25      	ldr	r3, [pc, #148]	; (800332c <SYSVIEW_AddTask+0xc4>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4926      	ldr	r1, [pc, #152]	; (8003334 <SYSVIEW_AddTask+0xcc>)
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80032aa:	4b20      	ldr	r3, [pc, #128]	; (800332c <SYSVIEW_AddTask+0xc4>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4921      	ldr	r1, [pc, #132]	; (8003334 <SYSVIEW_AddTask+0xcc>)
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	3304      	adds	r3, #4
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <SYSVIEW_AddTask+0xc4>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	491b      	ldr	r1, [pc, #108]	; (8003334 <SYSVIEW_AddTask+0xcc>)
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	3308      	adds	r3, #8
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80032d6:	4b15      	ldr	r3, [pc, #84]	; (800332c <SYSVIEW_AddTask+0xc4>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4916      	ldr	r1, [pc, #88]	; (8003334 <SYSVIEW_AddTask+0xcc>)
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	330c      	adds	r3, #12
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <SYSVIEW_AddTask+0xc4>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4910      	ldr	r1, [pc, #64]	; (8003334 <SYSVIEW_AddTask+0xcc>)
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	3310      	adds	r3, #16
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003302:	4b0a      	ldr	r3, [pc, #40]	; (800332c <SYSVIEW_AddTask+0xc4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3301      	adds	r3, #1
 8003308:	4a08      	ldr	r2, [pc, #32]	; (800332c <SYSVIEW_AddTask+0xc4>)
 800330a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f8ca 	bl	80034b0 <SYSVIEW_SendTaskInfo>
 800331c:	e000      	b.n	8003320 <SYSVIEW_AddTask+0xb8>
    return;
 800331e:	bf00      	nop

}
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	08006ac8 	.word	0x08006ac8
 800332c:	20012e78 	.word	0x20012e78
 8003330:	08006ad0 	.word	0x08006ad0
 8003334:	20012dd8 	.word	0x20012dd8

08003338 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003340:	4b59      	ldr	r3, [pc, #356]	; (80034a8 <SYSVIEW_DeleteTask+0x170>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80ab 	beq.w	80034a0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	e00d      	b.n	800336c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003350:	4956      	ldr	r1, [pc, #344]	; (80034ac <SYSVIEW_DeleteTask+0x174>)
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	429a      	cmp	r2, r3
 8003364:	d008      	beq.n	8003378 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	3301      	adds	r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	4b4e      	ldr	r3, [pc, #312]	; (80034a8 <SYSVIEW_DeleteTask+0x170>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	429a      	cmp	r2, r3
 8003374:	d3ec      	bcc.n	8003350 <SYSVIEW_DeleteTask+0x18>
 8003376:	e000      	b.n	800337a <SYSVIEW_DeleteTask+0x42>
      break;
 8003378:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800337a:	4b4b      	ldr	r3, [pc, #300]	; (80034a8 <SYSVIEW_DeleteTask+0x170>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3b01      	subs	r3, #1
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	429a      	cmp	r2, r3
 8003384:	d111      	bne.n	80033aa <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4a46      	ldr	r2, [pc, #280]	; (80034ac <SYSVIEW_DeleteTask+0x174>)
 8003392:	4413      	add	r3, r2
 8003394:	2214      	movs	r2, #20
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f003 fb75 	bl	8006a88 <memset>
    _NumTasks--;
 800339e:	4b42      	ldr	r3, [pc, #264]	; (80034a8 <SYSVIEW_DeleteTask+0x170>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	4a40      	ldr	r2, [pc, #256]	; (80034a8 <SYSVIEW_DeleteTask+0x170>)
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	e07b      	b.n	80034a2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80033aa:	4b3f      	ldr	r3, [pc, #252]	; (80034a8 <SYSVIEW_DeleteTask+0x170>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d276      	bcs.n	80034a2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80033b4:	4b3c      	ldr	r3, [pc, #240]	; (80034a8 <SYSVIEW_DeleteTask+0x170>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	1e5a      	subs	r2, r3, #1
 80033ba:	493c      	ldr	r1, [pc, #240]	; (80034ac <SYSVIEW_DeleteTask+0x174>)
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	6819      	ldr	r1, [r3, #0]
 80033c8:	4838      	ldr	r0, [pc, #224]	; (80034ac <SYSVIEW_DeleteTask+0x174>)
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4403      	add	r3, r0
 80033d6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80033d8:	4b33      	ldr	r3, [pc, #204]	; (80034a8 <SYSVIEW_DeleteTask+0x170>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	1e5a      	subs	r2, r3, #1
 80033de:	4933      	ldr	r1, [pc, #204]	; (80034ac <SYSVIEW_DeleteTask+0x174>)
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3304      	adds	r3, #4
 80033ec:	6819      	ldr	r1, [r3, #0]
 80033ee:	482f      	ldr	r0, [pc, #188]	; (80034ac <SYSVIEW_DeleteTask+0x174>)
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4403      	add	r3, r0
 80033fc:	3304      	adds	r3, #4
 80033fe:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003400:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <SYSVIEW_DeleteTask+0x170>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	1e5a      	subs	r2, r3, #1
 8003406:	4929      	ldr	r1, [pc, #164]	; (80034ac <SYSVIEW_DeleteTask+0x174>)
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	3308      	adds	r3, #8
 8003414:	6819      	ldr	r1, [r3, #0]
 8003416:	4825      	ldr	r0, [pc, #148]	; (80034ac <SYSVIEW_DeleteTask+0x174>)
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4403      	add	r3, r0
 8003424:	3308      	adds	r3, #8
 8003426:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003428:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <SYSVIEW_DeleteTask+0x170>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	1e5a      	subs	r2, r3, #1
 800342e:	491f      	ldr	r1, [pc, #124]	; (80034ac <SYSVIEW_DeleteTask+0x174>)
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	330c      	adds	r3, #12
 800343c:	6819      	ldr	r1, [r3, #0]
 800343e:	481b      	ldr	r0, [pc, #108]	; (80034ac <SYSVIEW_DeleteTask+0x174>)
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4403      	add	r3, r0
 800344c:	330c      	adds	r3, #12
 800344e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003450:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <SYSVIEW_DeleteTask+0x170>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	1e5a      	subs	r2, r3, #1
 8003456:	4915      	ldr	r1, [pc, #84]	; (80034ac <SYSVIEW_DeleteTask+0x174>)
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	3310      	adds	r3, #16
 8003464:	6819      	ldr	r1, [r3, #0]
 8003466:	4811      	ldr	r0, [pc, #68]	; (80034ac <SYSVIEW_DeleteTask+0x174>)
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4403      	add	r3, r0
 8003474:	3310      	adds	r3, #16
 8003476:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <SYSVIEW_DeleteTask+0x170>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	1e5a      	subs	r2, r3, #1
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <SYSVIEW_DeleteTask+0x174>)
 8003488:	4413      	add	r3, r2
 800348a:	2214      	movs	r2, #20
 800348c:	2100      	movs	r1, #0
 800348e:	4618      	mov	r0, r3
 8003490:	f003 fafa 	bl	8006a88 <memset>
    _NumTasks--;
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <SYSVIEW_DeleteTask+0x170>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3b01      	subs	r3, #1
 800349a:	4a03      	ldr	r2, [pc, #12]	; (80034a8 <SYSVIEW_DeleteTask+0x170>)
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e000      	b.n	80034a2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80034a0:	bf00      	nop
  }
}
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20012e78 	.word	0x20012e78
 80034ac:	20012dd8 	.word	0x20012dd8

080034b0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	; 0x28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80034be:	f107 0314 	add.w	r3, r7, #20
 80034c2:	2214      	movs	r2, #20
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f003 fade 	bl	8006a88 <memset>
  TaskInfo.TaskID     = TaskID;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 feeb 	bl	80042c0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80034ea:	bf00      	nop
 80034ec:	3728      	adds	r7, #40	; 0x28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80034fa:	4b24      	ldr	r3, [pc, #144]	; (800358c <_DoInit+0x98>)
 80034fc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2203      	movs	r2, #3
 8003502:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2203      	movs	r2, #3
 8003508:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a20      	ldr	r2, [pc, #128]	; (8003590 <_DoInit+0x9c>)
 800350e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a20      	ldr	r2, [pc, #128]	; (8003594 <_DoInit+0xa0>)
 8003514:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800351c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a17      	ldr	r2, [pc, #92]	; (8003590 <_DoInit+0x9c>)
 8003534:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a17      	ldr	r2, [pc, #92]	; (8003598 <_DoInit+0xa4>)
 800353a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2210      	movs	r2, #16
 8003540:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3307      	adds	r3, #7
 8003558:	4a10      	ldr	r2, [pc, #64]	; (800359c <_DoInit+0xa8>)
 800355a:	6810      	ldr	r0, [r2, #0]
 800355c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800355e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a0e      	ldr	r2, [pc, #56]	; (80035a0 <_DoInit+0xac>)
 8003566:	6810      	ldr	r0, [r2, #0]
 8003568:	6018      	str	r0, [r3, #0]
 800356a:	8891      	ldrh	r1, [r2, #4]
 800356c:	7992      	ldrb	r2, [r2, #6]
 800356e:	8099      	strh	r1, [r3, #4]
 8003570:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003572:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800357c:	f3bf 8f5f 	dmb	sy
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	20012e7c 	.word	0x20012e7c
 8003590:	08006b20 	.word	0x08006b20
 8003594:	20012f24 	.word	0x20012f24
 8003598:	20013324 	.word	0x20013324
 800359c:	08006b2c 	.word	0x08006b2c
 80035a0:	08006b30 	.word	0x08006b30

080035a4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08c      	sub	sp, #48	; 0x30
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80035b0:	4b3e      	ldr	r3, [pc, #248]	; (80036ac <SEGGER_RTT_ReadNoLock+0x108>)
 80035b2:	623b      	str	r3, [r7, #32]
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <SEGGER_RTT_ReadNoLock+0x1e>
 80035be:	f7ff ff99 	bl	80034f4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4613      	mov	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	3360      	adds	r3, #96	; 0x60
 80035ce:	4a37      	ldr	r2, [pc, #220]	; (80036ac <SEGGER_RTT_ReadNoLock+0x108>)
 80035d0:	4413      	add	r3, r2
 80035d2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80035e4:	2300      	movs	r3, #0
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80035e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d92b      	bls.n	8003648 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4293      	cmp	r3, r2
 8003600:	bf28      	it	cs
 8003602:	4613      	movcs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	4413      	add	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	6939      	ldr	r1, [r7, #16]
 8003614:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003616:	f003 fa29 	bl	8006a6c <memcpy>
    NumBytesRead += NumBytesRem;
 800361a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	4413      	add	r3, r2
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	4413      	add	r3, r2
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	4413      	add	r3, r2
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003640:	429a      	cmp	r2, r3
 8003642:	d101      	bne.n	8003648 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003644:	2300      	movs	r3, #0
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4293      	cmp	r3, r2
 8003656:	bf28      	it	cs
 8003658:	4613      	movcs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d019      	beq.n	8003696 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	4413      	add	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	6939      	ldr	r1, [r7, #16]
 8003670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003672:	f003 f9fb 	bl	8006a6c <memcpy>
    NumBytesRead += NumBytesRem;
 8003676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	4413      	add	r3, r2
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800367e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	4413      	add	r3, r2
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800368e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	4413      	add	r3, r2
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036a0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3730      	adds	r7, #48	; 0x30
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20012e7c 	.word	0x20012e7c

080036b0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80036c0:	e002      	b.n	80036c8 <_EncodeStr+0x18>
    Len++;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	3301      	adds	r3, #1
 80036c6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4413      	add	r3, r2
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f6      	bne.n	80036c2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d901      	bls.n	80036e0 <_EncodeStr+0x30>
    Len = Limit;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2bfe      	cmp	r3, #254	; 0xfe
 80036e4:	d806      	bhi.n	80036f4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	60fa      	str	r2, [r7, #12]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]
 80036f2:	e011      	b.n	8003718 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	60fa      	str	r2, [r7, #12]
 80036fa:	22ff      	movs	r2, #255	; 0xff
 80036fc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	60fa      	str	r2, [r7, #12]
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	0a19      	lsrs	r1, r3, #8
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	60fa      	str	r2, [r7, #12]
 8003714:	b2ca      	uxtb	r2, r1
 8003716:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800371c:	e00a      	b.n	8003734 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	1c53      	adds	r3, r2, #1
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1c59      	adds	r1, r3, #1
 8003728:	60f9      	str	r1, [r7, #12]
 800372a:	7812      	ldrb	r2, [r2, #0]
 800372c:	701a      	strb	r2, [r3, #0]
    n++;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3301      	adds	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	429a      	cmp	r2, r3
 800373a:	d3f0      	bcc.n	800371e <_EncodeStr+0x6e>
  }
  return pPayload;
 800373c:	68fb      	ldr	r3, [r7, #12]
}
 800373e:	4618      	mov	r0, r3
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800376a:	4b36      	ldr	r3, [pc, #216]	; (8003844 <_HandleIncomingPacket+0xe0>)
 800376c:	7e1b      	ldrb	r3, [r3, #24]
 800376e:	4618      	mov	r0, r3
 8003770:	1cfb      	adds	r3, r7, #3
 8003772:	2201      	movs	r2, #1
 8003774:	4619      	mov	r1, r3
 8003776:	f7ff ff15 	bl	80035a4 <SEGGER_RTT_ReadNoLock>
 800377a:	4603      	mov	r3, r0
 800377c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	dd54      	ble.n	800382e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	2b80      	cmp	r3, #128	; 0x80
 8003788:	d032      	beq.n	80037f0 <_HandleIncomingPacket+0x8c>
 800378a:	2b80      	cmp	r3, #128	; 0x80
 800378c:	dc42      	bgt.n	8003814 <_HandleIncomingPacket+0xb0>
 800378e:	2b07      	cmp	r3, #7
 8003790:	dc16      	bgt.n	80037c0 <_HandleIncomingPacket+0x5c>
 8003792:	2b00      	cmp	r3, #0
 8003794:	dd3e      	ble.n	8003814 <_HandleIncomingPacket+0xb0>
 8003796:	3b01      	subs	r3, #1
 8003798:	2b06      	cmp	r3, #6
 800379a:	d83b      	bhi.n	8003814 <_HandleIncomingPacket+0xb0>
 800379c:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <_HandleIncomingPacket+0x40>)
 800379e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a2:	bf00      	nop
 80037a4:	080037c7 	.word	0x080037c7
 80037a8:	080037cd 	.word	0x080037cd
 80037ac:	080037d3 	.word	0x080037d3
 80037b0:	080037d9 	.word	0x080037d9
 80037b4:	080037df 	.word	0x080037df
 80037b8:	080037e5 	.word	0x080037e5
 80037bc:	080037eb 	.word	0x080037eb
 80037c0:	2b7f      	cmp	r3, #127	; 0x7f
 80037c2:	d036      	beq.n	8003832 <_HandleIncomingPacket+0xce>
 80037c4:	e026      	b.n	8003814 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80037c6:	f000 fc01 	bl	8003fcc <SEGGER_SYSVIEW_Start>
      break;
 80037ca:	e037      	b.n	800383c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80037cc:	f000 fcb8 	bl	8004140 <SEGGER_SYSVIEW_Stop>
      break;
 80037d0:	e034      	b.n	800383c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80037d2:	f000 fe6d 	bl	80044b0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80037d6:	e031      	b.n	800383c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80037d8:	f000 fe56 	bl	8004488 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80037dc:	e02e      	b.n	800383c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80037de:	f000 fcd5 	bl	800418c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80037e2:	e02b      	b.n	800383c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80037e4:	f001 f900 	bl	80049e8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80037e8:	e028      	b.n	800383c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80037ea:	f001 f8df 	bl	80049ac <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80037ee:	e025      	b.n	800383c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <_HandleIncomingPacket+0xe0>)
 80037f2:	7e1b      	ldrb	r3, [r3, #24]
 80037f4:	4618      	mov	r0, r3
 80037f6:	1cfb      	adds	r3, r7, #3
 80037f8:	2201      	movs	r2, #1
 80037fa:	4619      	mov	r1, r3
 80037fc:	f7ff fed2 	bl	80035a4 <SEGGER_RTT_ReadNoLock>
 8003800:	4603      	mov	r3, r0
 8003802:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	dd15      	ble.n	8003836 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	4618      	mov	r0, r3
 800380e:	f001 f84d 	bl	80048ac <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003812:	e010      	b.n	8003836 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	b25b      	sxtb	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	da0e      	bge.n	800383a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800381c:	4b09      	ldr	r3, [pc, #36]	; (8003844 <_HandleIncomingPacket+0xe0>)
 800381e:	7e1b      	ldrb	r3, [r3, #24]
 8003820:	4618      	mov	r0, r3
 8003822:	1cfb      	adds	r3, r7, #3
 8003824:	2201      	movs	r2, #1
 8003826:	4619      	mov	r1, r3
 8003828:	f7ff febc 	bl	80035a4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800382c:	e005      	b.n	800383a <_HandleIncomingPacket+0xd6>
    }
  }
 800382e:	bf00      	nop
 8003830:	e004      	b.n	800383c <_HandleIncomingPacket+0xd8>
      break;
 8003832:	bf00      	nop
 8003834:	e002      	b.n	800383c <_HandleIncomingPacket+0xd8>
      break;
 8003836:	bf00      	nop
 8003838:	e000      	b.n	800383c <_HandleIncomingPacket+0xd8>
      break;
 800383a:	bf00      	nop
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20013334 	.word	0x20013334

08003848 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003848:	b580      	push	{r7, lr}
 800384a:	b08c      	sub	sp, #48	; 0x30
 800384c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800384e:	2301      	movs	r3, #1
 8003850:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003852:	1d3b      	adds	r3, r7, #4
 8003854:	3301      	adds	r3, #1
 8003856:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800385c:	4b31      	ldr	r3, [pc, #196]	; (8003924 <_TrySendOverflowPacket+0xdc>)
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	62bb      	str	r3, [r7, #40]	; 0x28
 8003862:	e00b      	b.n	800387c <_TrySendOverflowPacket+0x34>
 8003864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003866:	b2da      	uxtb	r2, r3
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	1c59      	adds	r1, r3, #1
 800386c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800386e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	09db      	lsrs	r3, r3, #7
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
 800387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387e:	2b7f      	cmp	r3, #127	; 0x7f
 8003880:	d8f0      	bhi.n	8003864 <_TrySendOverflowPacket+0x1c>
 8003882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]
 800388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003890:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003892:	4b25      	ldr	r3, [pc, #148]	; (8003928 <_TrySendOverflowPacket+0xe0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003898:	4b22      	ldr	r3, [pc, #136]	; (8003924 <_TrySendOverflowPacket+0xdc>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	623b      	str	r3, [r7, #32]
 80038aa:	e00b      	b.n	80038c4 <_TrySendOverflowPacket+0x7c>
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	1c59      	adds	r1, r3, #1
 80038b4:	6279      	str	r1, [r7, #36]	; 0x24
 80038b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	09db      	lsrs	r3, r3, #7
 80038c2:	623b      	str	r3, [r7, #32]
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	2b7f      	cmp	r3, #127	; 0x7f
 80038c8:	d8f0      	bhi.n	80038ac <_TrySendOverflowPacket+0x64>
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	627a      	str	r2, [r7, #36]	; 0x24
 80038d0:	6a3a      	ldr	r2, [r7, #32]
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <_TrySendOverflowPacket+0xdc>)
 80038dc:	785b      	ldrb	r3, [r3, #1]
 80038de:	4618      	mov	r0, r3
 80038e0:	1d3b      	adds	r3, r7, #4
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	4619      	mov	r1, r3
 80038ec:	f7fc fc80 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80038f0:	4603      	mov	r3, r0
 80038f2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80038fa:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <_TrySendOverflowPacket+0xdc>)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <_TrySendOverflowPacket+0xdc>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	3b01      	subs	r3, #1
 8003906:	b2da      	uxtb	r2, r3
 8003908:	4b06      	ldr	r3, [pc, #24]	; (8003924 <_TrySendOverflowPacket+0xdc>)
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	e004      	b.n	8003918 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <_TrySendOverflowPacket+0xdc>)
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	3301      	adds	r3, #1
 8003914:	4a03      	ldr	r2, [pc, #12]	; (8003924 <_TrySendOverflowPacket+0xdc>)
 8003916:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003918:	693b      	ldr	r3, [r7, #16]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3730      	adds	r7, #48	; 0x30
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20013334 	.word	0x20013334
 8003928:	e0001004 	.word	0xe0001004

0800392c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b08a      	sub	sp, #40	; 0x28
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003938:	4b6c      	ldr	r3, [pc, #432]	; (8003aec <_SendPacket+0x1c0>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d010      	beq.n	8003962 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003940:	4b6a      	ldr	r3, [pc, #424]	; (8003aec <_SendPacket+0x1c0>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80a3 	beq.w	8003a90 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800394a:	4b68      	ldr	r3, [pc, #416]	; (8003aec <_SendPacket+0x1c0>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d109      	bne.n	8003966 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003952:	f7ff ff79 	bl	8003848 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003956:	4b65      	ldr	r3, [pc, #404]	; (8003aec <_SendPacket+0x1c0>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b01      	cmp	r3, #1
 800395c:	f040 809a 	bne.w	8003a94 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003960:	e001      	b.n	8003966 <_SendPacket+0x3a>
    goto Send;
 8003962:	bf00      	nop
 8003964:	e000      	b.n	8003968 <_SendPacket+0x3c>
Send:
 8003966:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b1f      	cmp	r3, #31
 800396c:	d809      	bhi.n	8003982 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800396e:	4b5f      	ldr	r3, [pc, #380]	; (8003aec <_SendPacket+0x1c0>)
 8003970:	69da      	ldr	r2, [r3, #28]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	f040 808b 	bne.w	8003a98 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b17      	cmp	r3, #23
 8003986:	d807      	bhi.n	8003998 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3b01      	subs	r3, #1
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	b2da      	uxtb	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	e03d      	b.n	8003a14 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	2b7f      	cmp	r3, #127	; 0x7f
 80039a4:	d912      	bls.n	80039cc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	09da      	lsrs	r2, r3, #7
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	3a01      	subs	r2, #1
 80039be:	60fa      	str	r2, [r7, #12]
 80039c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	e006      	b.n	80039da <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b7f      	cmp	r3, #127	; 0x7f
 80039de:	d912      	bls.n	8003a06 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	09da      	lsrs	r2, r3, #7
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	3a01      	subs	r2, #1
 80039f8:	60fa      	str	r2, [r7, #12]
 80039fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	701a      	strb	r2, [r3, #0]
 8003a04:	e006      	b.n	8003a14 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003a14:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <_SendPacket+0x1c4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003a1a:	4b34      	ldr	r3, [pc, #208]	; (8003aec <_SendPacket+0x1c0>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	623b      	str	r3, [r7, #32]
 8003a2c:	e00b      	b.n	8003a46 <_SendPacket+0x11a>
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	1c59      	adds	r1, r3, #1
 8003a36:	6279      	str	r1, [r7, #36]	; 0x24
 8003a38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	09db      	lsrs	r3, r3, #7
 8003a44:	623b      	str	r3, [r7, #32]
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	2b7f      	cmp	r3, #127	; 0x7f
 8003a4a:	d8f0      	bhi.n	8003a2e <_SendPacket+0x102>
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	627a      	str	r2, [r7, #36]	; 0x24
 8003a52:	6a3a      	ldr	r2, [r7, #32]
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003a5c:	4b23      	ldr	r3, [pc, #140]	; (8003aec <_SendPacket+0x1c0>)
 8003a5e:	785b      	ldrb	r3, [r3, #1]
 8003a60:	4618      	mov	r0, r3
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	68f9      	ldr	r1, [r7, #12]
 8003a6c:	f7fc fbc0 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003a70:	4603      	mov	r3, r0
 8003a72:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003a7a:	4a1c      	ldr	r2, [pc, #112]	; (8003aec <_SendPacket+0x1c0>)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	60d3      	str	r3, [r2, #12]
 8003a80:	e00b      	b.n	8003a9a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003a82:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <_SendPacket+0x1c0>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	4b18      	ldr	r3, [pc, #96]	; (8003aec <_SendPacket+0x1c0>)
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	e004      	b.n	8003a9a <_SendPacket+0x16e>
    goto SendDone;
 8003a90:	bf00      	nop
 8003a92:	e002      	b.n	8003a9a <_SendPacket+0x16e>
      goto SendDone;
 8003a94:	bf00      	nop
 8003a96:	e000      	b.n	8003a9a <_SendPacket+0x16e>
      goto SendDone;
 8003a98:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <_SendPacket+0x1c0>)
 8003a9c:	7e1b      	ldrb	r3, [r3, #24]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <_SendPacket+0x1c8>)
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	440b      	add	r3, r1
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4413      	add	r3, r2
 8003aac:	336c      	adds	r3, #108	; 0x6c
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <_SendPacket+0x1c0>)
 8003ab2:	7e1b      	ldrb	r3, [r3, #24]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	490f      	ldr	r1, [pc, #60]	; (8003af4 <_SendPacket+0x1c8>)
 8003ab8:	4603      	mov	r3, r0
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	4403      	add	r3, r0
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	440b      	add	r3, r1
 8003ac2:	3370      	adds	r3, #112	; 0x70
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d00b      	beq.n	8003ae2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <_SendPacket+0x1c0>)
 8003acc:	789b      	ldrb	r3, [r3, #2]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <_SendPacket+0x1c0>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003ad8:	f7ff fe44 	bl	8003764 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <_SendPacket+0x1c0>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003ae2:	bf00      	nop
 8003ae4:	3728      	adds	r7, #40	; 0x28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20013334 	.word	0x20013334
 8003af0:	e0001004 	.word	0xe0001004
 8003af4:	20012e7c 	.word	0x20012e7c

08003af8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003b00:	f3ef 8311 	mrs	r3, BASEPRI
 8003b04:	f04f 0120 	mov.w	r1, #32
 8003b08:	f381 8811 	msr	BASEPRI, r1
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	4808      	ldr	r0, [pc, #32]	; (8003b30 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003b10:	f7ff fe1b 	bl	800374a <_PreparePacket>
 8003b14:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	68b8      	ldr	r0, [r7, #8]
 8003b1c:	f7ff ff06 	bl	800392c <_SendPacket>
  RECORD_END();
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f383 8811 	msr	BASEPRI, r3
}
 8003b26:	bf00      	nop
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20013364 	.word	0x20013364

08003b34 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003b3e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b42:	f04f 0120 	mov.w	r1, #32
 8003b46:	f381 8811 	msr	BASEPRI, r1
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	4816      	ldr	r0, [pc, #88]	; (8003ba8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003b4e:	f7ff fdfc 	bl	800374a <_PreparePacket>
 8003b52:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e00b      	b.n	8003b7a <SEGGER_SYSVIEW_RecordU32+0x46>
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	1c59      	adds	r1, r3, #1
 8003b6a:	61f9      	str	r1, [r7, #28]
 8003b6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	09db      	lsrs	r3, r3, #7
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8003b7e:	d8f0      	bhi.n	8003b62 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	61fa      	str	r2, [r7, #28]
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	68f9      	ldr	r1, [r7, #12]
 8003b94:	6938      	ldr	r0, [r7, #16]
 8003b96:	f7ff fec9 	bl	800392c <_SendPacket>
  RECORD_END();
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f383 8811 	msr	BASEPRI, r3
}
 8003ba0:	bf00      	nop
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20013364 	.word	0x20013364

08003bac <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	; 0x30
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003bb8:	f3ef 8311 	mrs	r3, BASEPRI
 8003bbc:	f04f 0120 	mov.w	r1, #32
 8003bc0:	f381 8811 	msr	BASEPRI, r1
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	4825      	ldr	r0, [pc, #148]	; (8003c5c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003bc8:	f7ff fdbf 	bl	800374a <_PreparePacket>
 8003bcc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bda:	e00b      	b.n	8003bf4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	1c59      	adds	r1, r3, #1
 8003be4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003be6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	09db      	lsrs	r3, r3, #7
 8003bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8003bf8:	d8f0      	bhi.n	8003bdc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	701a      	strb	r2, [r3, #0]
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	623b      	str	r3, [r7, #32]
 8003c12:	e00b      	b.n	8003c2c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	1c59      	adds	r1, r3, #1
 8003c1c:	6279      	str	r1, [r7, #36]	; 0x24
 8003c1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	09db      	lsrs	r3, r3, #7
 8003c2a:	623b      	str	r3, [r7, #32]
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c30:	d8f0      	bhi.n	8003c14 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	627a      	str	r2, [r7, #36]	; 0x24
 8003c38:	6a3a      	ldr	r2, [r7, #32]
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	6979      	ldr	r1, [r7, #20]
 8003c46:	69b8      	ldr	r0, [r7, #24]
 8003c48:	f7ff fe70 	bl	800392c <_SendPacket>
  RECORD_END();
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f383 8811 	msr	BASEPRI, r3
}
 8003c52:	bf00      	nop
 8003c54:	3730      	adds	r7, #48	; 0x30
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20013364 	.word	0x20013364

08003c60 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08e      	sub	sp, #56	; 0x38
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8003c72:	f04f 0120 	mov.w	r1, #32
 8003c76:	f381 8811 	msr	BASEPRI, r1
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	4832      	ldr	r0, [pc, #200]	; (8003d48 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003c7e:	f7ff fd64 	bl	800374a <_PreparePacket>
 8003c82:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c90:	e00b      	b.n	8003caa <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c98:	1c59      	adds	r1, r3, #1
 8003c9a:	6379      	str	r1, [r7, #52]	; 0x34
 8003c9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	09db      	lsrs	r3, r3, #7
 8003ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	2b7f      	cmp	r3, #127	; 0x7f
 8003cae:	d8f0      	bhi.n	8003c92 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	637a      	str	r2, [r7, #52]	; 0x34
 8003cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc8:	e00b      	b.n	8003ce2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	1c59      	adds	r1, r3, #1
 8003cd2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003cd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	09db      	lsrs	r3, r3, #7
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ce6:	d8f0      	bhi.n	8003cca <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	623b      	str	r3, [r7, #32]
 8003d00:	e00b      	b.n	8003d1a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	1c59      	adds	r1, r3, #1
 8003d0a:	6279      	str	r1, [r7, #36]	; 0x24
 8003d0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	09db      	lsrs	r3, r3, #7
 8003d18:	623b      	str	r3, [r7, #32]
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d1e:	d8f0      	bhi.n	8003d02 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	627a      	str	r2, [r7, #36]	; 0x24
 8003d26:	6a3a      	ldr	r2, [r7, #32]
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	6979      	ldr	r1, [r7, #20]
 8003d34:	69b8      	ldr	r0, [r7, #24]
 8003d36:	f7ff fdf9 	bl	800392c <_SendPacket>
  RECORD_END();
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f383 8811 	msr	BASEPRI, r3
}
 8003d40:	bf00      	nop
 8003d42:	3738      	adds	r7, #56	; 0x38
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20013364 	.word	0x20013364

08003d4c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b090      	sub	sp, #64	; 0x40
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003d5a:	f3ef 8311 	mrs	r3, BASEPRI
 8003d5e:	f04f 0120 	mov.w	r1, #32
 8003d62:	f381 8811 	msr	BASEPRI, r1
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	4840      	ldr	r0, [pc, #256]	; (8003e6c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003d6a:	f7ff fcee 	bl	800374a <_PreparePacket>
 8003d6e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d7c:	e00b      	b.n	8003d96 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d84:	1c59      	adds	r1, r3, #1
 8003d86:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003d88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	701a      	strb	r2, [r3, #0]
 8003d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d92:	09db      	lsrs	r3, r3, #7
 8003d94:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	2b7f      	cmp	r3, #127	; 0x7f
 8003d9a:	d8f0      	bhi.n	8003d7e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003daa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	633b      	str	r3, [r7, #48]	; 0x30
 8003db4:	e00b      	b.n	8003dce <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbc:	1c59      	adds	r1, r3, #1
 8003dbe:	6379      	str	r1, [r7, #52]	; 0x34
 8003dc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	701a      	strb	r2, [r3, #0]
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dca:	09db      	lsrs	r3, r3, #7
 8003dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8003dd2:	d8f0      	bhi.n	8003db6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	637a      	str	r2, [r7, #52]	; 0x34
 8003dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	701a      	strb	r2, [r3, #0]
 8003de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dec:	e00b      	b.n	8003e06 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	1c59      	adds	r1, r3, #1
 8003df6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003df8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	09db      	lsrs	r3, r3, #7
 8003e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	2b7f      	cmp	r3, #127	; 0x7f
 8003e0a:	d8f0      	bhi.n	8003dee <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]
 8003e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e22:	623b      	str	r3, [r7, #32]
 8003e24:	e00b      	b.n	8003e3e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	1c59      	adds	r1, r3, #1
 8003e2e:	6279      	str	r1, [r7, #36]	; 0x24
 8003e30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	09db      	lsrs	r3, r3, #7
 8003e3c:	623b      	str	r3, [r7, #32]
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	2b7f      	cmp	r3, #127	; 0x7f
 8003e42:	d8f0      	bhi.n	8003e26 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	627a      	str	r2, [r7, #36]	; 0x24
 8003e4a:	6a3a      	ldr	r2, [r7, #32]
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	6979      	ldr	r1, [r7, #20]
 8003e58:	69b8      	ldr	r0, [r7, #24]
 8003e5a:	f7ff fd67 	bl	800392c <_SendPacket>
  RECORD_END();
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f383 8811 	msr	BASEPRI, r3
}
 8003e64:	bf00      	nop
 8003e66:	3740      	adds	r7, #64	; 0x40
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20013364 	.word	0x20013364

08003e70 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b092      	sub	sp, #72	; 0x48
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8003e7e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e82:	f04f 0120 	mov.w	r1, #32
 8003e86:	f381 8811 	msr	BASEPRI, r1
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	484e      	ldr	r0, [pc, #312]	; (8003fc8 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8003e8e:	f7ff fc5c 	bl	800374a <_PreparePacket>
 8003e92:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003ea0:	e00b      	b.n	8003eba <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8003ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea8:	1c59      	adds	r1, r3, #1
 8003eaa:	6479      	str	r1, [r7, #68]	; 0x44
 8003eac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eb6:	09db      	lsrs	r3, r3, #7
 8003eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8003eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ebc:	2b7f      	cmp	r3, #127	; 0x7f
 8003ebe:	d8f0      	bhi.n	8003ea2 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8003ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	647a      	str	r2, [r7, #68]	; 0x44
 8003ec6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	701a      	strb	r2, [r3, #0]
 8003ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ece:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ed8:	e00b      	b.n	8003ef2 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8003eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee0:	1c59      	adds	r1, r3, #1
 8003ee2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003ee4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eee:	09db      	lsrs	r3, r3, #7
 8003ef0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ef6:	d8f0      	bhi.n	8003eda <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8003ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	701a      	strb	r2, [r3, #0]
 8003f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	633b      	str	r3, [r7, #48]	; 0x30
 8003f10:	e00b      	b.n	8003f2a <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f18:	1c59      	adds	r1, r3, #1
 8003f1a:	6379      	str	r1, [r7, #52]	; 0x34
 8003f1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	09db      	lsrs	r3, r3, #7
 8003f28:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f2e:	d8f0      	bhi.n	8003f12 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8003f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	637a      	str	r2, [r7, #52]	; 0x34
 8003f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f48:	e00b      	b.n	8003f62 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	1c59      	adds	r1, r3, #1
 8003f52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003f54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	09db      	lsrs	r3, r3, #7
 8003f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	2b7f      	cmp	r3, #127	; 0x7f
 8003f66:	d8f0      	bhi.n	8003f4a <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8003f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f7e:	623b      	str	r3, [r7, #32]
 8003f80:	e00b      	b.n	8003f9a <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	1c59      	adds	r1, r3, #1
 8003f8a:	6279      	str	r1, [r7, #36]	; 0x24
 8003f8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	701a      	strb	r2, [r3, #0]
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	09db      	lsrs	r3, r3, #7
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f9e:	d8f0      	bhi.n	8003f82 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	627a      	str	r2, [r7, #36]	; 0x24
 8003fa6:	6a3a      	ldr	r2, [r7, #32]
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	6979      	ldr	r1, [r7, #20]
 8003fb4:	69b8      	ldr	r0, [r7, #24]
 8003fb6:	f7ff fcb9 	bl	800392c <_SendPacket>
  RECORD_END();
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f383 8811 	msr	BASEPRI, r3
}
 8003fc0:	bf00      	nop
 8003fc2:	3748      	adds	r7, #72	; 0x48
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20013364 	.word	0x20013364

08003fcc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08c      	sub	sp, #48	; 0x30
 8003fd0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003fd2:	4b58      	ldr	r3, [pc, #352]	; (8004134 <SEGGER_SYSVIEW_Start+0x168>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003fd8:	f3ef 8311 	mrs	r3, BASEPRI
 8003fdc:	f04f 0120 	mov.w	r1, #32
 8003fe0:	f381 8811 	msr	BASEPRI, r1
 8003fe4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003fe6:	4b53      	ldr	r3, [pc, #332]	; (8004134 <SEGGER_SYSVIEW_Start+0x168>)
 8003fe8:	785b      	ldrb	r3, [r3, #1]
 8003fea:	220a      	movs	r2, #10
 8003fec:	4952      	ldr	r1, [pc, #328]	; (8004138 <SEGGER_SYSVIEW_Start+0x16c>)
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc f8fe 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003ffa:	200a      	movs	r0, #10
 8003ffc:	f7ff fd7c 	bl	8003af8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004000:	f3ef 8311 	mrs	r3, BASEPRI
 8004004:	f04f 0120 	mov.w	r1, #32
 8004008:	f381 8811 	msr	BASEPRI, r1
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	484b      	ldr	r0, [pc, #300]	; (800413c <SEGGER_SYSVIEW_Start+0x170>)
 8004010:	f7ff fb9b 	bl	800374a <_PreparePacket>
 8004014:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800401e:	4b45      	ldr	r3, [pc, #276]	; (8004134 <SEGGER_SYSVIEW_Start+0x168>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28
 8004024:	e00b      	b.n	800403e <SEGGER_SYSVIEW_Start+0x72>
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	b2da      	uxtb	r2, r3
 800402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402c:	1c59      	adds	r1, r3, #1
 800402e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004030:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	09db      	lsrs	r3, r3, #7
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	2b7f      	cmp	r3, #127	; 0x7f
 8004042:	d8f0      	bhi.n	8004026 <SEGGER_SYSVIEW_Start+0x5a>
 8004044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	62fa      	str	r2, [r7, #44]	; 0x2c
 800404a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]
 8004050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004052:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
 8004058:	4b36      	ldr	r3, [pc, #216]	; (8004134 <SEGGER_SYSVIEW_Start+0x168>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	623b      	str	r3, [r7, #32]
 800405e:	e00b      	b.n	8004078 <SEGGER_SYSVIEW_Start+0xac>
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	b2da      	uxtb	r2, r3
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	1c59      	adds	r1, r3, #1
 8004068:	6279      	str	r1, [r7, #36]	; 0x24
 800406a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	09db      	lsrs	r3, r3, #7
 8004076:	623b      	str	r3, [r7, #32]
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	2b7f      	cmp	r3, #127	; 0x7f
 800407c:	d8f0      	bhi.n	8004060 <SEGGER_SYSVIEW_Start+0x94>
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	627a      	str	r2, [r7, #36]	; 0x24
 8004084:	6a3a      	ldr	r2, [r7, #32]
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	4b28      	ldr	r3, [pc, #160]	; (8004134 <SEGGER_SYSVIEW_Start+0x168>)
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	e00b      	b.n	80040b2 <SEGGER_SYSVIEW_Start+0xe6>
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	b2da      	uxtb	r2, r3
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	1c59      	adds	r1, r3, #1
 80040a2:	61f9      	str	r1, [r7, #28]
 80040a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	09db      	lsrs	r3, r3, #7
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b7f      	cmp	r3, #127	; 0x7f
 80040b6:	d8f0      	bhi.n	800409a <SEGGER_SYSVIEW_Start+0xce>
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	61fa      	str	r2, [r7, #28]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	e00b      	b.n	80040ea <SEGGER_SYSVIEW_Start+0x11e>
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	1c59      	adds	r1, r3, #1
 80040da:	6179      	str	r1, [r7, #20]
 80040dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	09db      	lsrs	r3, r3, #7
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b7f      	cmp	r3, #127	; 0x7f
 80040ee:	d8f0      	bhi.n	80040d2 <SEGGER_SYSVIEW_Start+0x106>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	617a      	str	r2, [r7, #20]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004100:	2218      	movs	r2, #24
 8004102:	6839      	ldr	r1, [r7, #0]
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff fc11 	bl	800392c <_SendPacket>
      RECORD_END();
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004110:	4b08      	ldr	r3, [pc, #32]	; (8004134 <SEGGER_SYSVIEW_Start+0x168>)
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <SEGGER_SYSVIEW_Start+0x168>)
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800411e:	f000 f9c7 	bl	80044b0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004122:	f000 f9b1 	bl	8004488 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004126:	f000 fc5f 	bl	80049e8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800412a:	bf00      	nop
 800412c:	3730      	adds	r7, #48	; 0x30
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20013334 	.word	0x20013334
 8004138:	08006b4c 	.word	0x08006b4c
 800413c:	20013364 	.word	0x20013364

08004140 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004146:	f3ef 8311 	mrs	r3, BASEPRI
 800414a:	f04f 0120 	mov.w	r1, #32
 800414e:	f381 8811 	msr	BASEPRI, r1
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	480b      	ldr	r0, [pc, #44]	; (8004184 <SEGGER_SYSVIEW_Stop+0x44>)
 8004156:	f7ff faf8 	bl	800374a <_PreparePacket>
 800415a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <SEGGER_SYSVIEW_Stop+0x48>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004164:	220b      	movs	r2, #11
 8004166:	6839      	ldr	r1, [r7, #0]
 8004168:	6838      	ldr	r0, [r7, #0]
 800416a:	f7ff fbdf 	bl	800392c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <SEGGER_SYSVIEW_Stop+0x48>)
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f383 8811 	msr	BASEPRI, r3
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20013364 	.word	0x20013364
 8004188:	20013334 	.word	0x20013334

0800418c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800418c:	b580      	push	{r7, lr}
 800418e:	b08c      	sub	sp, #48	; 0x30
 8004190:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004192:	f3ef 8311 	mrs	r3, BASEPRI
 8004196:	f04f 0120 	mov.w	r1, #32
 800419a:	f381 8811 	msr	BASEPRI, r1
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	4845      	ldr	r0, [pc, #276]	; (80042b8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80041a2:	f7ff fad2 	bl	800374a <_PreparePacket>
 80041a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b0:	4b42      	ldr	r3, [pc, #264]	; (80042bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b6:	e00b      	b.n	80041d0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041be:	1c59      	adds	r1, r3, #1
 80041c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80041c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041cc:	09db      	lsrs	r3, r3, #7
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	2b7f      	cmp	r3, #127	; 0x7f
 80041d4:	d8f0      	bhi.n	80041b8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ea:	4b34      	ldr	r3, [pc, #208]	; (80042bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	623b      	str	r3, [r7, #32]
 80041f0:	e00b      	b.n	800420a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	1c59      	adds	r1, r3, #1
 80041fa:	6279      	str	r1, [r7, #36]	; 0x24
 80041fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	09db      	lsrs	r3, r3, #7
 8004208:	623b      	str	r3, [r7, #32]
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	2b7f      	cmp	r3, #127	; 0x7f
 800420e:	d8f0      	bhi.n	80041f2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	627a      	str	r2, [r7, #36]	; 0x24
 8004216:	6a3a      	ldr	r2, [r7, #32]
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	e00b      	b.n	8004244 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	b2da      	uxtb	r2, r3
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	1c59      	adds	r1, r3, #1
 8004234:	61f9      	str	r1, [r7, #28]
 8004236:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	09db      	lsrs	r3, r3, #7
 8004242:	61bb      	str	r3, [r7, #24]
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	2b7f      	cmp	r3, #127	; 0x7f
 8004248:	d8f0      	bhi.n	800422c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	61fa      	str	r2, [r7, #28]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	2300      	movs	r3, #0
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	e00b      	b.n	800427c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	1c59      	adds	r1, r3, #1
 800426c:	6179      	str	r1, [r7, #20]
 800426e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	09db      	lsrs	r3, r3, #7
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b7f      	cmp	r3, #127	; 0x7f
 8004280:	d8f0      	bhi.n	8004264 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	617a      	str	r2, [r7, #20]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004292:	2218      	movs	r2, #24
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	68b8      	ldr	r0, [r7, #8]
 8004298:	f7ff fb48 	bl	800392c <_SendPacket>
  RECORD_END();
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80042aa:	4b04      	ldr	r3, [pc, #16]	; (80042bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	4798      	blx	r3
  }
}
 80042b0:	bf00      	nop
 80042b2:	3730      	adds	r7, #48	; 0x30
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	20013364 	.word	0x20013364
 80042bc:	20013334 	.word	0x20013334

080042c0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b092      	sub	sp, #72	; 0x48
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80042c8:	f3ef 8311 	mrs	r3, BASEPRI
 80042cc:	f04f 0120 	mov.w	r1, #32
 80042d0:	f381 8811 	msr	BASEPRI, r1
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	486a      	ldr	r0, [pc, #424]	; (8004480 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80042d8:	f7ff fa37 	bl	800374a <_PreparePacket>
 80042dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	647b      	str	r3, [r7, #68]	; 0x44
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	4b66      	ldr	r3, [pc, #408]	; (8004484 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	643b      	str	r3, [r7, #64]	; 0x40
 80042f2:	e00b      	b.n	800430c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80042f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fa:	1c59      	adds	r1, r3, #1
 80042fc:	6479      	str	r1, [r7, #68]	; 0x44
 80042fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]
 8004306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004308:	09db      	lsrs	r3, r3, #7
 800430a:	643b      	str	r3, [r7, #64]	; 0x40
 800430c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800430e:	2b7f      	cmp	r3, #127	; 0x7f
 8004310:	d8f0      	bhi.n	80042f4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	647a      	str	r2, [r7, #68]	; 0x44
 8004318:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004320:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	63bb      	str	r3, [r7, #56]	; 0x38
 800432c:	e00b      	b.n	8004346 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	b2da      	uxtb	r2, r3
 8004332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004334:	1c59      	adds	r1, r3, #1
 8004336:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004338:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]
 8004340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004342:	09db      	lsrs	r3, r3, #7
 8004344:	63bb      	str	r3, [r7, #56]	; 0x38
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	2b7f      	cmp	r3, #127	; 0x7f
 800434a:	d8f0      	bhi.n	800432e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800434c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800435a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	4619      	mov	r1, r3
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7ff f9a3 	bl	80036b0 <_EncodeStr>
 800436a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800436c:	2209      	movs	r2, #9
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	6938      	ldr	r0, [r7, #16]
 8004372:	f7ff fadb 	bl	800392c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	637b      	str	r3, [r7, #52]	; 0x34
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b40      	ldr	r3, [pc, #256]	; (8004484 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	633b      	str	r3, [r7, #48]	; 0x30
 800438a:	e00b      	b.n	80043a4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	b2da      	uxtb	r2, r3
 8004390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004392:	1c59      	adds	r1, r3, #1
 8004394:	6379      	str	r1, [r7, #52]	; 0x34
 8004396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	09db      	lsrs	r3, r3, #7
 80043a2:	633b      	str	r3, [r7, #48]	; 0x30
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	2b7f      	cmp	r3, #127	; 0x7f
 80043a8:	d8f0      	bhi.n	800438c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80043aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	637a      	str	r2, [r7, #52]	; 0x34
 80043b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c4:	e00b      	b.n	80043de <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	1c59      	adds	r1, r3, #1
 80043ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80043d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	09db      	lsrs	r3, r3, #7
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	2b7f      	cmp	r3, #127	; 0x7f
 80043e2:	d8f0      	bhi.n	80043c6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	623b      	str	r3, [r7, #32]
 80043fe:	e00b      	b.n	8004418 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	1c59      	adds	r1, r3, #1
 8004408:	6279      	str	r1, [r7, #36]	; 0x24
 800440a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	09db      	lsrs	r3, r3, #7
 8004416:	623b      	str	r3, [r7, #32]
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	2b7f      	cmp	r3, #127	; 0x7f
 800441c:	d8f0      	bhi.n	8004400 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	627a      	str	r2, [r7, #36]	; 0x24
 8004424:	6a3a      	ldr	r2, [r7, #32]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	2300      	movs	r3, #0
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	e00b      	b.n	8004450 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	b2da      	uxtb	r2, r3
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	1c59      	adds	r1, r3, #1
 8004440:	61f9      	str	r1, [r7, #28]
 8004442:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	09db      	lsrs	r3, r3, #7
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b7f      	cmp	r3, #127	; 0x7f
 8004454:	d8f0      	bhi.n	8004438 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	61fa      	str	r2, [r7, #28]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	701a      	strb	r2, [r3, #0]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004466:	2215      	movs	r2, #21
 8004468:	68f9      	ldr	r1, [r7, #12]
 800446a:	6938      	ldr	r0, [r7, #16]
 800446c:	f7ff fa5e 	bl	800392c <_SendPacket>
  RECORD_END();
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f383 8811 	msr	BASEPRI, r3
}
 8004476:	bf00      	nop
 8004478:	3748      	adds	r7, #72	; 0x48
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20013364 	.word	0x20013364
 8004484:	20013334 	.word	0x20013334

08004488 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800448c:	4b07      	ldr	r3, [pc, #28]	; (80044ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800449e:	4b03      	ldr	r3, [pc, #12]	; (80044ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	4798      	blx	r3
  }
}
 80044a6:	bf00      	nop
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20013334 	.word	0x20013334

080044b0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80044b0:	b590      	push	{r4, r7, lr}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80044b6:	4b15      	ldr	r3, [pc, #84]	; (800450c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01a      	beq.n	80044f4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80044be:	4b13      	ldr	r3, [pc, #76]	; (800450c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d015      	beq.n	80044f4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80044c8:	4b10      	ldr	r3, [pc, #64]	; (800450c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4798      	blx	r3
 80044d0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80044d4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80044d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	000a      	movs	r2, r1
 80044e4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80044e6:	4613      	mov	r3, r2
 80044e8:	461a      	mov	r2, r3
 80044ea:	4621      	mov	r1, r4
 80044ec:	200d      	movs	r0, #13
 80044ee:	f7ff fb5d 	bl	8003bac <SEGGER_SYSVIEW_RecordU32x2>
 80044f2:	e006      	b.n	8004502 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4619      	mov	r1, r3
 80044fa:	200c      	movs	r0, #12
 80044fc:	f7ff fb1a 	bl	8003b34 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004500:	bf00      	nop
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bd90      	pop	{r4, r7, pc}
 800450a:	bf00      	nop
 800450c:	20013334 	.word	0x20013334
 8004510:	e0001004 	.word	0xe0001004

08004514 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800451a:	f3ef 8311 	mrs	r3, BASEPRI
 800451e:	f04f 0120 	mov.w	r1, #32
 8004522:	f381 8811 	msr	BASEPRI, r1
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	4819      	ldr	r0, [pc, #100]	; (8004590 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800452a:	f7ff f90e 	bl	800374a <_PreparePacket>
 800452e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004534:	4b17      	ldr	r3, [pc, #92]	; (8004594 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800453c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	e00b      	b.n	8004560 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	1c59      	adds	r1, r3, #1
 8004550:	6179      	str	r1, [r7, #20]
 8004552:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	09db      	lsrs	r3, r3, #7
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	2b7f      	cmp	r3, #127	; 0x7f
 8004564:	d8f0      	bhi.n	8004548 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	617a      	str	r2, [r7, #20]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004576:	2202      	movs	r2, #2
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	68b8      	ldr	r0, [r7, #8]
 800457c:	f7ff f9d6 	bl	800392c <_SendPacket>
  RECORD_END();
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f383 8811 	msr	BASEPRI, r3
}
 8004586:	bf00      	nop
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20013364 	.word	0x20013364
 8004594:	e000ed04 	.word	0xe000ed04

08004598 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800459e:	f3ef 8311 	mrs	r3, BASEPRI
 80045a2:	f04f 0120 	mov.w	r1, #32
 80045a6:	f381 8811 	msr	BASEPRI, r1
 80045aa:	607b      	str	r3, [r7, #4]
 80045ac:	4807      	ldr	r0, [pc, #28]	; (80045cc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80045ae:	f7ff f8cc 	bl	800374a <_PreparePacket>
 80045b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80045b4:	2203      	movs	r2, #3
 80045b6:	6839      	ldr	r1, [r7, #0]
 80045b8:	6838      	ldr	r0, [r7, #0]
 80045ba:	f7ff f9b7 	bl	800392c <_SendPacket>
  RECORD_END();
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f383 8811 	msr	BASEPRI, r3
}
 80045c4:	bf00      	nop
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	20013364 	.word	0x20013364

080045d0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80045d6:	f3ef 8311 	mrs	r3, BASEPRI
 80045da:	f04f 0120 	mov.w	r1, #32
 80045de:	f381 8811 	msr	BASEPRI, r1
 80045e2:	607b      	str	r3, [r7, #4]
 80045e4:	4807      	ldr	r0, [pc, #28]	; (8004604 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80045e6:	f7ff f8b0 	bl	800374a <_PreparePacket>
 80045ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80045ec:	2212      	movs	r2, #18
 80045ee:	6839      	ldr	r1, [r7, #0]
 80045f0:	6838      	ldr	r0, [r7, #0]
 80045f2:	f7ff f99b 	bl	800392c <_SendPacket>
  RECORD_END();
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f383 8811 	msr	BASEPRI, r3
}
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20013364 	.word	0x20013364

08004608 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800460e:	f3ef 8311 	mrs	r3, BASEPRI
 8004612:	f04f 0120 	mov.w	r1, #32
 8004616:	f381 8811 	msr	BASEPRI, r1
 800461a:	607b      	str	r3, [r7, #4]
 800461c:	4807      	ldr	r0, [pc, #28]	; (800463c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800461e:	f7ff f894 	bl	800374a <_PreparePacket>
 8004622:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004624:	2211      	movs	r2, #17
 8004626:	6839      	ldr	r1, [r7, #0]
 8004628:	6838      	ldr	r0, [r7, #0]
 800462a:	f7ff f97f 	bl	800392c <_SendPacket>
  RECORD_END();
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f383 8811 	msr	BASEPRI, r3
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	20013364 	.word	0x20013364

08004640 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004648:	f3ef 8311 	mrs	r3, BASEPRI
 800464c:	f04f 0120 	mov.w	r1, #32
 8004650:	f381 8811 	msr	BASEPRI, r1
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	4819      	ldr	r0, [pc, #100]	; (80046bc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004658:	f7ff f877 	bl	800374a <_PreparePacket>
 800465c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004662:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	e00b      	b.n	800468e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	b2da      	uxtb	r2, r3
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	1c59      	adds	r1, r3, #1
 800467e:	61f9      	str	r1, [r7, #28]
 8004680:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	09db      	lsrs	r3, r3, #7
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b7f      	cmp	r3, #127	; 0x7f
 8004692:	d8f0      	bhi.n	8004676 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	61fa      	str	r2, [r7, #28]
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80046a4:	2208      	movs	r2, #8
 80046a6:	68f9      	ldr	r1, [r7, #12]
 80046a8:	6938      	ldr	r0, [r7, #16]
 80046aa:	f7ff f93f 	bl	800392c <_SendPacket>
  RECORD_END();
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f383 8811 	msr	BASEPRI, r3
}
 80046b4:	bf00      	nop
 80046b6:	3720      	adds	r7, #32
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	20013364 	.word	0x20013364
 80046c0:	20013334 	.word	0x20013334

080046c4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80046cc:	f3ef 8311 	mrs	r3, BASEPRI
 80046d0:	f04f 0120 	mov.w	r1, #32
 80046d4:	f381 8811 	msr	BASEPRI, r1
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	4819      	ldr	r0, [pc, #100]	; (8004740 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80046dc:	f7ff f835 	bl	800374a <_PreparePacket>
 80046e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80046e6:	4b17      	ldr	r3, [pc, #92]	; (8004744 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	e00b      	b.n	8004712 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	1c59      	adds	r1, r3, #1
 8004702:	61f9      	str	r1, [r7, #28]
 8004704:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	09db      	lsrs	r3, r3, #7
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b7f      	cmp	r3, #127	; 0x7f
 8004716:	d8f0      	bhi.n	80046fa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	61fa      	str	r2, [r7, #28]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004728:	2204      	movs	r2, #4
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	6938      	ldr	r0, [r7, #16]
 800472e:	f7ff f8fd 	bl	800392c <_SendPacket>
  RECORD_END();
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f383 8811 	msr	BASEPRI, r3
}
 8004738:	bf00      	nop
 800473a:	3720      	adds	r7, #32
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	20013364 	.word	0x20013364
 8004744:	20013334 	.word	0x20013334

08004748 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b088      	sub	sp, #32
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004750:	f3ef 8311 	mrs	r3, BASEPRI
 8004754:	f04f 0120 	mov.w	r1, #32
 8004758:	f381 8811 	msr	BASEPRI, r1
 800475c:	617b      	str	r3, [r7, #20]
 800475e:	4819      	ldr	r0, [pc, #100]	; (80047c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004760:	f7fe fff3 	bl	800374a <_PreparePacket>
 8004764:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800476a:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	61bb      	str	r3, [r7, #24]
 800477c:	e00b      	b.n	8004796 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	b2da      	uxtb	r2, r3
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	1c59      	adds	r1, r3, #1
 8004786:	61f9      	str	r1, [r7, #28]
 8004788:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	701a      	strb	r2, [r3, #0]
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	09db      	lsrs	r3, r3, #7
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b7f      	cmp	r3, #127	; 0x7f
 800479a:	d8f0      	bhi.n	800477e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	61fa      	str	r2, [r7, #28]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80047ac:	2206      	movs	r2, #6
 80047ae:	68f9      	ldr	r1, [r7, #12]
 80047b0:	6938      	ldr	r0, [r7, #16]
 80047b2:	f7ff f8bb 	bl	800392c <_SendPacket>
  RECORD_END();
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f383 8811 	msr	BASEPRI, r3
}
 80047bc:	bf00      	nop
 80047be:	3720      	adds	r7, #32
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20013364 	.word	0x20013364
 80047c8:	20013334 	.word	0x20013334

080047cc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80047d6:	f3ef 8311 	mrs	r3, BASEPRI
 80047da:	f04f 0120 	mov.w	r1, #32
 80047de:	f381 8811 	msr	BASEPRI, r1
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	4827      	ldr	r0, [pc, #156]	; (8004884 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80047e6:	f7fe ffb0 	bl	800374a <_PreparePacket>
 80047ea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80047f0:	4b25      	ldr	r3, [pc, #148]	; (8004888 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	623b      	str	r3, [r7, #32]
 8004802:	e00b      	b.n	800481c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	b2da      	uxtb	r2, r3
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	1c59      	adds	r1, r3, #1
 800480c:	6279      	str	r1, [r7, #36]	; 0x24
 800480e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	09db      	lsrs	r3, r3, #7
 800481a:	623b      	str	r3, [r7, #32]
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	2b7f      	cmp	r3, #127	; 0x7f
 8004820:	d8f0      	bhi.n	8004804 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	627a      	str	r2, [r7, #36]	; 0x24
 8004828:	6a3a      	ldr	r2, [r7, #32]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	e00b      	b.n	8004854 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	b2da      	uxtb	r2, r3
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	1c59      	adds	r1, r3, #1
 8004844:	61f9      	str	r1, [r7, #28]
 8004846:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	09db      	lsrs	r3, r3, #7
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2b7f      	cmp	r3, #127	; 0x7f
 8004858:	d8f0      	bhi.n	800483c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	61fa      	str	r2, [r7, #28]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800486a:	2207      	movs	r2, #7
 800486c:	68f9      	ldr	r1, [r7, #12]
 800486e:	6938      	ldr	r0, [r7, #16]
 8004870:	f7ff f85c 	bl	800392c <_SendPacket>
  RECORD_END();
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f383 8811 	msr	BASEPRI, r3
}
 800487a:	bf00      	nop
 800487c:	3728      	adds	r7, #40	; 0x28
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20013364 	.word	0x20013364
 8004888:	20013334 	.word	0x20013334

0800488c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	1ad3      	subs	r3, r2, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	20013334 	.word	0x20013334

080048ac <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08c      	sub	sp, #48	; 0x30
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80048b6:	4b3b      	ldr	r3, [pc, #236]	; (80049a4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d06d      	beq.n	800499a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80048be:	4b39      	ldr	r3, [pc, #228]	; (80049a4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80048c4:	2300      	movs	r3, #0
 80048c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c8:	e008      	b.n	80048dc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80048d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d007      	beq.n	80048e6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	3301      	adds	r3, #1
 80048da:	62bb      	str	r3, [r7, #40]	; 0x28
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d3f2      	bcc.n	80048ca <SEGGER_SYSVIEW_SendModule+0x1e>
 80048e4:	e000      	b.n	80048e8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80048e6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d055      	beq.n	800499a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80048ee:	f3ef 8311 	mrs	r3, BASEPRI
 80048f2:	f04f 0120 	mov.w	r1, #32
 80048f6:	f381 8811 	msr	BASEPRI, r1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	482a      	ldr	r0, [pc, #168]	; (80049a8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80048fe:	f7fe ff24 	bl	800374a <_PreparePacket>
 8004902:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	623b      	str	r3, [r7, #32]
 8004910:	e00b      	b.n	800492a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	b2da      	uxtb	r2, r3
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	1c59      	adds	r1, r3, #1
 800491a:	6279      	str	r1, [r7, #36]	; 0x24
 800491c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	701a      	strb	r2, [r3, #0]
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	09db      	lsrs	r3, r3, #7
 8004928:	623b      	str	r3, [r7, #32]
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	2b7f      	cmp	r3, #127	; 0x7f
 800492e:	d8f0      	bhi.n	8004912 <SEGGER_SYSVIEW_SendModule+0x66>
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	627a      	str	r2, [r7, #36]	; 0x24
 8004936:	6a3a      	ldr	r2, [r7, #32]
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	701a      	strb	r2, [r3, #0]
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	e00b      	b.n	8004964 <SEGGER_SYSVIEW_SendModule+0xb8>
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	b2da      	uxtb	r2, r3
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	1c59      	adds	r1, r3, #1
 8004954:	61f9      	str	r1, [r7, #28]
 8004956:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	09db      	lsrs	r3, r3, #7
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b7f      	cmp	r3, #127	; 0x7f
 8004968:	d8f0      	bhi.n	800494c <SEGGER_SYSVIEW_SendModule+0xa0>
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	61fa      	str	r2, [r7, #28]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2280      	movs	r2, #128	; 0x80
 8004980:	4619      	mov	r1, r3
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f7fe fe94 	bl	80036b0 <_EncodeStr>
 8004988:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800498a:	2216      	movs	r2, #22
 800498c:	68f9      	ldr	r1, [r7, #12]
 800498e:	6938      	ldr	r0, [r7, #16]
 8004990:	f7fe ffcc 	bl	800392c <_SendPacket>
      RECORD_END();
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800499a:	bf00      	nop
 800499c:	3730      	adds	r7, #48	; 0x30
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	2001335c 	.word	0x2001335c
 80049a8:	20013364 	.word	0x20013364

080049ac <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80049b2:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00f      	beq.n	80049da <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80049ba:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f2      	bne.n	80049c0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80049da:	bf00      	nop
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	2001335c 	.word	0x2001335c

080049e8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80049ee:	f3ef 8311 	mrs	r3, BASEPRI
 80049f2:	f04f 0120 	mov.w	r1, #32
 80049f6:	f381 8811 	msr	BASEPRI, r1
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	4817      	ldr	r0, [pc, #92]	; (8004a5c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80049fe:	f7fe fea4 	bl	800374a <_PreparePacket>
 8004a02:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	4b14      	ldr	r3, [pc, #80]	; (8004a60 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	e00b      	b.n	8004a2c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	1c59      	adds	r1, r3, #1
 8004a1c:	6179      	str	r1, [r7, #20]
 8004a1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	09db      	lsrs	r3, r3, #7
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a30:	d8f0      	bhi.n	8004a14 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	617a      	str	r2, [r7, #20]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004a42:	221b      	movs	r2, #27
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	68b8      	ldr	r0, [r7, #8]
 8004a48:	f7fe ff70 	bl	800392c <_SendPacket>
  RECORD_END();
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f383 8811 	msr	BASEPRI, r3
}
 8004a52:	bf00      	nop
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20013364 	.word	0x20013364
 8004a60:	20013360 	.word	0x20013360

08004a64 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08a      	sub	sp, #40	; 0x28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a6c:	f3ef 8311 	mrs	r3, BASEPRI
 8004a70:	f04f 0120 	mov.w	r1, #32
 8004a74:	f381 8811 	msr	BASEPRI, r1
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	4827      	ldr	r0, [pc, #156]	; (8004b18 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004a7c:	f7fe fe65 	bl	800374a <_PreparePacket>
 8004a80:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a82:	2280      	movs	r2, #128	; 0x80
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	6938      	ldr	r0, [r7, #16]
 8004a88:	f7fe fe12 	bl	80036b0 <_EncodeStr>
 8004a8c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
 8004a92:	2301      	movs	r3, #1
 8004a94:	623b      	str	r3, [r7, #32]
 8004a96:	e00b      	b.n	8004ab0 <SEGGER_SYSVIEW_Warn+0x4c>
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	1c59      	adds	r1, r3, #1
 8004aa0:	6279      	str	r1, [r7, #36]	; 0x24
 8004aa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	09db      	lsrs	r3, r3, #7
 8004aae:	623b      	str	r3, [r7, #32]
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ab4:	d8f0      	bhi.n	8004a98 <SEGGER_SYSVIEW_Warn+0x34>
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	627a      	str	r2, [r7, #36]	; 0x24
 8004abc:	6a3a      	ldr	r2, [r7, #32]
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	61fb      	str	r3, [r7, #28]
 8004aca:	2300      	movs	r3, #0
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	e00b      	b.n	8004ae8 <SEGGER_SYSVIEW_Warn+0x84>
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	1c59      	adds	r1, r3, #1
 8004ad8:	61f9      	str	r1, [r7, #28]
 8004ada:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	09db      	lsrs	r3, r3, #7
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b7f      	cmp	r3, #127	; 0x7f
 8004aec:	d8f0      	bhi.n	8004ad0 <SEGGER_SYSVIEW_Warn+0x6c>
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	61fa      	str	r2, [r7, #28]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004afe:	221a      	movs	r2, #26
 8004b00:	68f9      	ldr	r1, [r7, #12]
 8004b02:	6938      	ldr	r0, [r7, #16]
 8004b04:	f7fe ff12 	bl	800392c <_SendPacket>
  RECORD_END();
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f383 8811 	msr	BASEPRI, r3
}
 8004b0e:	bf00      	nop
 8004b10:	3728      	adds	r7, #40	; 0x28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20013364 	.word	0x20013364

08004b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b22:	f000 fce3 	bl	80054ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b26:	f000 f851 	bl	8004bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b2a:	f000 f8bb 	bl	8004ca4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  IsCreated = xTaskCreate(GreenLedTask, "GreenLed", 200, NULL, 2, &GreenLedHandle);
 8004b2e:	4b1f      	ldr	r3, [pc, #124]	; (8004bac <main+0x90>)
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	2302      	movs	r3, #2
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	2300      	movs	r3, #0
 8004b38:	22c8      	movs	r2, #200	; 0xc8
 8004b3a:	491d      	ldr	r1, [pc, #116]	; (8004bb0 <main+0x94>)
 8004b3c:	481d      	ldr	r0, [pc, #116]	; (8004bb4 <main+0x98>)
 8004b3e:	f7fc fb31 	bl	80011a4 <xTaskCreate>
 8004b42:	4603      	mov	r3, r0
 8004b44:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <main+0x9c>)
 8004b46:	6013      	str	r3, [r2, #0]
  configASSERT(IsCreated);
 8004b48:	4b1b      	ldr	r3, [pc, #108]	; (8004bb8 <main+0x9c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <main+0x4a>
        __asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	607b      	str	r3, [r7, #4]
    }
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <main+0x48>
  IsCreated = xTaskCreate(RedLedTask, "RedLed", 200, NULL, 1, &RedLedHandle);
 8004b66:	4b15      	ldr	r3, [pc, #84]	; (8004bbc <main+0xa0>)
 8004b68:	9301      	str	r3, [sp, #4]
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	22c8      	movs	r2, #200	; 0xc8
 8004b72:	4913      	ldr	r1, [pc, #76]	; (8004bc0 <main+0xa4>)
 8004b74:	4813      	ldr	r0, [pc, #76]	; (8004bc4 <main+0xa8>)
 8004b76:	f7fc fb15 	bl	80011a4 <xTaskCreate>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4a0e      	ldr	r2, [pc, #56]	; (8004bb8 <main+0x9c>)
 8004b7e:	6013      	str	r3, [r2, #0]
   configASSERT(IsCreated);
 8004b80:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <main+0x9c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <main+0x82>
        __asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	603b      	str	r3, [r7, #0]
    }
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <main+0x80>
   NewTaskHandle = GreenLedHandle;
 8004b9e:	4b03      	ldr	r3, [pc, #12]	; (8004bac <main+0x90>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <main+0xac>)
 8004ba4:	6013      	str	r3, [r2, #0]

   vTaskStartScheduler();
 8004ba6:	f7fc fd0b 	bl	80015c0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004baa:	e7fe      	b.n	8004baa <main+0x8e>
 8004bac:	2001344c 	.word	0x2001344c
 8004bb0:	08006b38 	.word	0x08006b38
 8004bb4:	080051a5 	.word	0x080051a5
 8004bb8:	20013448 	.word	0x20013448
 8004bbc:	20013450 	.word	0x20013450
 8004bc0:	08006b44 	.word	0x08006b44
 8004bc4:	08005201 	.word	0x08005201
 8004bc8:	20013454 	.word	0x20013454

08004bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b094      	sub	sp, #80	; 0x50
 8004bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bd2:	f107 0320 	add.w	r3, r7, #32
 8004bd6:	2230      	movs	r2, #48	; 0x30
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 ff54 	bl	8006a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004be0:	f107 030c 	add.w	r3, r7, #12
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	609a      	str	r2, [r3, #8]
 8004bec:	60da      	str	r2, [r3, #12]
 8004bee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60bb      	str	r3, [r7, #8]
 8004bf4:	4b29      	ldr	r3, [pc, #164]	; (8004c9c <SystemClock_Config+0xd0>)
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	4a28      	ldr	r2, [pc, #160]	; (8004c9c <SystemClock_Config+0xd0>)
 8004bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8004c00:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <SystemClock_Config+0xd0>)
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	607b      	str	r3, [r7, #4]
 8004c10:	4b23      	ldr	r3, [pc, #140]	; (8004ca0 <SystemClock_Config+0xd4>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004c18:	4a21      	ldr	r2, [pc, #132]	; (8004ca0 <SystemClock_Config+0xd4>)
 8004c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	4b1f      	ldr	r3, [pc, #124]	; (8004ca0 <SystemClock_Config+0xd4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c28:	607b      	str	r3, [r7, #4]
 8004c2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c30:	2301      	movs	r3, #1
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c34:	2310      	movs	r3, #16
 8004c36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004c40:	2308      	movs	r3, #8
 8004c42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8004c44:	2332      	movs	r3, #50	; 0x32
 8004c46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004c48:	2304      	movs	r3, #4
 8004c4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004c4c:	2307      	movs	r3, #7
 8004c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c50:	f107 0320 	add.w	r3, r7, #32
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 ff71 	bl	8005b3c <HAL_RCC_OscConfig>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004c60:	f000 fb34 	bl	80052cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c64:	230f      	movs	r3, #15
 8004c66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c68:	2302      	movs	r3, #2
 8004c6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8004c70:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004c74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004c76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004c7c:	f107 030c 	add.w	r3, r7, #12
 8004c80:	2100      	movs	r1, #0
 8004c82:	4618      	mov	r0, r3
 8004c84:	f001 f9d2 	bl	800602c <HAL_RCC_ClockConfig>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004c8e:	f000 fb1d 	bl	80052cc <Error_Handler>
  }
}
 8004c92:	bf00      	nop
 8004c94:	3750      	adds	r7, #80	; 0x50
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	40007000 	.word	0x40007000

08004ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08e      	sub	sp, #56	; 0x38
 8004ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	605a      	str	r2, [r3, #4]
 8004cb4:	609a      	str	r2, [r3, #8]
 8004cb6:	60da      	str	r2, [r3, #12]
 8004cb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	623b      	str	r3, [r7, #32]
 8004cbe:	4bb2      	ldr	r3, [pc, #712]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	4ab1      	ldr	r2, [pc, #708]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004cc4:	f043 0304 	orr.w	r3, r3, #4
 8004cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cca:	4baf      	ldr	r3, [pc, #700]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	623b      	str	r3, [r7, #32]
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	4bab      	ldr	r3, [pc, #684]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	4aaa      	ldr	r2, [pc, #680]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004ce0:	f043 0320 	orr.w	r3, r3, #32
 8004ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce6:	4ba8      	ldr	r3, [pc, #672]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	61fb      	str	r3, [r7, #28]
 8004cf0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	4ba4      	ldr	r3, [pc, #656]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	4aa3      	ldr	r2, [pc, #652]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d00:	6313      	str	r3, [r2, #48]	; 0x30
 8004d02:	4ba1      	ldr	r3, [pc, #644]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0a:	61bb      	str	r3, [r7, #24]
 8004d0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	4b9d      	ldr	r3, [pc, #628]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	4a9c      	ldr	r2, [pc, #624]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d1e:	4b9a      	ldr	r3, [pc, #616]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	4b96      	ldr	r3, [pc, #600]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	4a95      	ldr	r2, [pc, #596]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d34:	f043 0302 	orr.w	r3, r3, #2
 8004d38:	6313      	str	r3, [r2, #48]	; 0x30
 8004d3a:	4b93      	ldr	r3, [pc, #588]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	4b8f      	ldr	r3, [pc, #572]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	4a8e      	ldr	r2, [pc, #568]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d54:	6313      	str	r3, [r2, #48]	; 0x30
 8004d56:	4b8c      	ldr	r3, [pc, #560]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d62:	2300      	movs	r3, #0
 8004d64:	60bb      	str	r3, [r7, #8]
 8004d66:	4b88      	ldr	r3, [pc, #544]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	4a87      	ldr	r2, [pc, #540]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d6c:	f043 0310 	orr.w	r3, r3, #16
 8004d70:	6313      	str	r3, [r2, #48]	; 0x30
 8004d72:	4b85      	ldr	r3, [pc, #532]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	60bb      	str	r3, [r7, #8]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
 8004d82:	4b81      	ldr	r3, [pc, #516]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	4a80      	ldr	r2, [pc, #512]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d88:	f043 0308 	orr.w	r3, r3, #8
 8004d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d8e:	4b7e      	ldr	r3, [pc, #504]	; (8004f88 <MX_GPIO_Init+0x2e4>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	607b      	str	r3, [r7, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2116      	movs	r1, #22
 8004d9e:	487b      	ldr	r0, [pc, #492]	; (8004f8c <MX_GPIO_Init+0x2e8>)
 8004da0:	f000 fe74 	bl	8005a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8004da4:	2200      	movs	r2, #0
 8004da6:	2180      	movs	r1, #128	; 0x80
 8004da8:	4879      	ldr	r0, [pc, #484]	; (8004f90 <MX_GPIO_Init+0x2ec>)
 8004daa:	f000 fe6f 	bl	8005a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8004dae:	2200      	movs	r2, #0
 8004db0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004db4:	4877      	ldr	r0, [pc, #476]	; (8004f94 <MX_GPIO_Init+0x2f0>)
 8004db6:	f000 fe69 	bl	8005a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8004dc0:	4875      	ldr	r0, [pc, #468]	; (8004f98 <MX_GPIO_Init+0x2f4>)
 8004dc2:	f000 fe63 	bl	8005a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8004dc6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004dd8:	230c      	movs	r3, #12
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004de0:	4619      	mov	r1, r3
 8004de2:	486e      	ldr	r0, [pc, #440]	; (8004f9c <MX_GPIO_Init+0x2f8>)
 8004de4:	f000 fca6 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004de8:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dee:	2302      	movs	r3, #2
 8004df0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df6:	2300      	movs	r3, #0
 8004df8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004dfa:	2305      	movs	r3, #5
 8004dfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e02:	4619      	mov	r1, r3
 8004e04:	4865      	ldr	r0, [pc, #404]	; (8004f9c <MX_GPIO_Init+0x2f8>)
 8004e06:	f000 fc95 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8004e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e10:	2302      	movs	r3, #2
 8004e12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004e1c:	230e      	movs	r3, #14
 8004e1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e24:	4619      	mov	r1, r3
 8004e26:	485d      	ldr	r0, [pc, #372]	; (8004f9c <MX_GPIO_Init+0x2f8>)
 8004e28:	f000 fc84 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e30:	2302      	movs	r3, #2
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004e3c:	230c      	movs	r3, #12
 8004e3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8004e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e44:	4619      	mov	r1, r3
 8004e46:	4851      	ldr	r0, [pc, #324]	; (8004f8c <MX_GPIO_Init+0x2e8>)
 8004e48:	f000 fc74 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8004e4c:	2316      	movs	r3, #22
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e50:	2301      	movs	r3, #1
 8004e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e60:	4619      	mov	r1, r3
 8004e62:	484a      	ldr	r0, [pc, #296]	; (8004f8c <MX_GPIO_Init+0x2e8>)
 8004e64:	f000 fc66 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004e6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004e70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4844      	ldr	r0, [pc, #272]	; (8004f90 <MX_GPIO_Init+0x2ec>)
 8004e7e:	f000 fc59 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8004e82:	f248 0306 	movw	r3, #32774	; 0x8006
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004e88:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8004e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e96:	4619      	mov	r1, r3
 8004e98:	483d      	ldr	r0, [pc, #244]	; (8004f90 <MX_GPIO_Init+0x2ec>)
 8004e9a:	f000 fc4b 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8004e9e:	f641 0358 	movw	r3, #6232	; 0x1858
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eac:	2300      	movs	r3, #0
 8004eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004eb0:	230e      	movs	r3, #14
 8004eb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4835      	ldr	r0, [pc, #212]	; (8004f90 <MX_GPIO_Init+0x2ec>)
 8004ebc:	f000 fc3a 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8004ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	482e      	ldr	r0, [pc, #184]	; (8004f90 <MX_GPIO_Init+0x2ec>)
 8004ed8:	f000 fc2c 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8004edc:	2320      	movs	r3, #32
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004ee0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8004ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8004eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4826      	ldr	r0, [pc, #152]	; (8004f8c <MX_GPIO_Init+0x2e8>)
 8004ef2:	f000 fc1f 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004efa:	2302      	movs	r3, #2
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f02:	2300      	movs	r3, #0
 8004f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004f06:	2309      	movs	r3, #9
 8004f08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4823      	ldr	r0, [pc, #140]	; (8004fa0 <MX_GPIO_Init+0x2fc>)
 8004f12:	f000 fc0f 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004f16:	2304      	movs	r3, #4
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f26:	4619      	mov	r1, r3
 8004f28:	481d      	ldr	r0, [pc, #116]	; (8004fa0 <MX_GPIO_Init+0x2fc>)
 8004f2a:	f000 fc03 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8004f2e:	f248 1333 	movw	r3, #33075	; 0x8133
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f34:	2302      	movs	r3, #2
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004f40:	230c      	movs	r3, #12
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4813      	ldr	r0, [pc, #76]	; (8004f98 <MX_GPIO_Init+0x2f4>)
 8004f4c:	f000 fbf2 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8004f50:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f56:	2302      	movs	r3, #2
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004f62:	230c      	movs	r3, #12
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	480d      	ldr	r0, [pc, #52]	; (8004fa4 <MX_GPIO_Init+0x300>)
 8004f6e:	f000 fbe1 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8004f72:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f80:	2300      	movs	r3, #0
 8004f82:	633b      	str	r3, [r7, #48]	; 0x30
 8004f84:	e010      	b.n	8004fa8 <MX_GPIO_Init+0x304>
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	40020800 	.word	0x40020800
 8004f90:	40020000 	.word	0x40020000
 8004f94:	40020c00 	.word	0x40020c00
 8004f98:	40021800 	.word	0x40021800
 8004f9c:	40021400 	.word	0x40021400
 8004fa0:	40020400 	.word	0x40020400
 8004fa4:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004fa8:	230e      	movs	r3, #14
 8004faa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4877      	ldr	r0, [pc, #476]	; (8005190 <MX_GPIO_Init+0x4ec>)
 8004fb4:	f000 fbbe 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8004fb8:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8004fca:	230c      	movs	r3, #12
 8004fcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	486e      	ldr	r0, [pc, #440]	; (8005190 <MX_GPIO_Init+0x4ec>)
 8004fd6:	f000 fbad 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8004fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8004fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fec:	4619      	mov	r1, r3
 8004fee:	4868      	ldr	r0, [pc, #416]	; (8005190 <MX_GPIO_Init+0x4ec>)
 8004ff0:	f000 fba0 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8004ff4:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005002:	2303      	movs	r3, #3
 8005004:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005006:	230c      	movs	r3, #12
 8005008:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800500a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800500e:	4619      	mov	r1, r3
 8005010:	4860      	ldr	r0, [pc, #384]	; (8005194 <MX_GPIO_Init+0x4f0>)
 8005012:	f000 fb8f 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8005016:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800501c:	2300      	movs	r3, #0
 800501e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005020:	2300      	movs	r3, #0
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8005024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005028:	4619      	mov	r1, r3
 800502a:	485a      	ldr	r0, [pc, #360]	; (8005194 <MX_GPIO_Init+0x4f0>)
 800502c:	f000 fb82 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8005030:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005036:	2301      	movs	r3, #1
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503a:	2300      	movs	r3, #0
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800503e:	2300      	movs	r3, #0
 8005040:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005046:	4619      	mov	r1, r3
 8005048:	4852      	ldr	r0, [pc, #328]	; (8005194 <MX_GPIO_Init+0x4f0>)
 800504a:	f000 fb73 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800504e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005054:	2302      	movs	r3, #2
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005058:	2300      	movs	r3, #0
 800505a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800505c:	2300      	movs	r3, #0
 800505e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005060:	230e      	movs	r3, #14
 8005062:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005068:	4619      	mov	r1, r3
 800506a:	484b      	ldr	r0, [pc, #300]	; (8005198 <MX_GPIO_Init+0x4f4>)
 800506c:	f000 fb62 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8005070:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005076:	2302      	movs	r3, #2
 8005078:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507a:	2300      	movs	r3, #0
 800507c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800507e:	2300      	movs	r3, #0
 8005080:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005082:	230e      	movs	r3, #14
 8005084:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800508a:	4619      	mov	r1, r3
 800508c:	4843      	ldr	r0, [pc, #268]	; (800519c <MX_GPIO_Init+0x4f8>)
 800508e:	f000 fb51 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8005092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005098:	2312      	movs	r3, #18
 800509a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509c:	2300      	movs	r3, #0
 800509e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a0:	2300      	movs	r3, #0
 80050a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80050a4:	2304      	movs	r3, #4
 80050a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80050a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ac:	4619      	mov	r1, r3
 80050ae:	483b      	ldr	r0, [pc, #236]	; (800519c <MX_GPIO_Init+0x4f8>)
 80050b0:	f000 fb40 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80050b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050ba:	2312      	movs	r3, #18
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c2:	2300      	movs	r3, #0
 80050c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80050c6:	2304      	movs	r3, #4
 80050c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80050ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ce:	4619      	mov	r1, r3
 80050d0:	4833      	ldr	r0, [pc, #204]	; (80051a0 <MX_GPIO_Init+0x4fc>)
 80050d2:	f000 fb2f 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80050d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050dc:	2302      	movs	r3, #2
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050e4:	2303      	movs	r3, #3
 80050e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050e8:	2307      	movs	r3, #7
 80050ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050f0:	4619      	mov	r1, r3
 80050f2:	482b      	ldr	r0, [pc, #172]	; (80051a0 <MX_GPIO_Init+0x4fc>)
 80050f4:	f000 fb1e 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80050f8:	2348      	movs	r3, #72	; 0x48
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fc:	2302      	movs	r3, #2
 80050fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005100:	2300      	movs	r3, #0
 8005102:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005104:	2300      	movs	r3, #0
 8005106:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005108:	230e      	movs	r3, #14
 800510a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800510c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005110:	4619      	mov	r1, r3
 8005112:	4820      	ldr	r0, [pc, #128]	; (8005194 <MX_GPIO_Init+0x4f0>)
 8005114:	f000 fb0e 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8005118:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800511e:	2302      	movs	r3, #2
 8005120:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005122:	2300      	movs	r3, #0
 8005124:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005126:	2300      	movs	r3, #0
 8005128:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800512a:	2309      	movs	r3, #9
 800512c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800512e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005132:	4619      	mov	r1, r3
 8005134:	4818      	ldr	r0, [pc, #96]	; (8005198 <MX_GPIO_Init+0x4f4>)
 8005136:	f000 fafd 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800513a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005140:	2301      	movs	r3, #1
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005144:	2300      	movs	r3, #0
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005148:	2300      	movs	r3, #0
 800514a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800514c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005150:	4619      	mov	r1, r3
 8005152:	4811      	ldr	r0, [pc, #68]	; (8005198 <MX_GPIO_Init+0x4f4>)
 8005154:	f000 faee 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8005158:	2360      	movs	r3, #96	; 0x60
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515c:	2302      	movs	r3, #2
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005160:	2300      	movs	r3, #0
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005164:	2303      	movs	r3, #3
 8005166:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005168:	230c      	movs	r3, #12
 800516a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800516c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005170:	4619      	mov	r1, r3
 8005172:	4807      	ldr	r0, [pc, #28]	; (8005190 <MX_GPIO_Init+0x4ec>)
 8005174:	f000 fade 	bl	8005734 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8005178:	2200      	movs	r2, #0
 800517a:	2106      	movs	r1, #6
 800517c:	2006      	movs	r0, #6
 800517e:	f000 faaf 	bl	80056e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005182:	2006      	movs	r0, #6
 8005184:	f000 fac8 	bl	8005718 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005188:	bf00      	nop
 800518a:	3738      	adds	r7, #56	; 0x38
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40020400 	.word	0x40020400
 8005194:	40020c00 	.word	0x40020c00
 8005198:	40021800 	.word	0x40021800
 800519c:	40020800 	.word	0x40020800
 80051a0:	40020000 	.word	0x40020000

080051a4 <GreenLedTask>:

/* USER CODE BEGIN 4 */

static void GreenLedTask(void *Params)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	6078      	str	r0, [r7, #4]
	BaseType_t	Status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 80051ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051b0:	4810      	ldr	r0, [pc, #64]	; (80051f4 <GreenLedTask+0x50>)
 80051b2:	f000 fc84 	bl	8005abe <HAL_GPIO_TogglePin>
		Status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80051b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	2300      	movs	r3, #0
 80051be:	2200      	movs	r2, #0
 80051c0:	2100      	movs	r1, #0
 80051c2:	2000      	movs	r0, #0
 80051c4:	f7fc fed2 	bl	8001f6c <xTaskGenericNotifyWait>
 80051c8:	60f8      	str	r0, [r7, #12]
		if(Status == pdTRUE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d1ed      	bne.n	80051ac <GreenLedTask+0x8>
		{
			portENTER_CRITICAL();
 80051d0:	f7fd fd22 	bl	8002c18 <vPortEnterCritical>
			NewTaskHandle = RedLedHandle;
 80051d4:	4b08      	ldr	r3, [pc, #32]	; (80051f8 <GreenLedTask+0x54>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a08      	ldr	r2, [pc, #32]	; (80051fc <GreenLedTask+0x58>)
 80051da:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 80051dc:	2201      	movs	r2, #1
 80051de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051e2:	4804      	ldr	r0, [pc, #16]	; (80051f4 <GreenLedTask+0x50>)
 80051e4:	f000 fc52 	bl	8005a8c <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 80051e8:	f7fd fd46 	bl	8002c78 <vPortExitCritical>
			vTaskDelete(NULL);
 80051ec:	2000      	movs	r0, #0
 80051ee:	f7fc f93d 	bl	800146c <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 80051f2:	e7db      	b.n	80051ac <GreenLedTask+0x8>
 80051f4:	40021800 	.word	0x40021800
 80051f8:	20013450 	.word	0x20013450
 80051fc:	20013454 	.word	0x20013454

08005200 <RedLedTask>:
		}
	}
}

static void RedLedTask(void *Params)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af02      	add	r7, sp, #8
 8005206:	6078      	str	r0, [r7, #4]
	BaseType_t	Status;
		while(1)
		{
			HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
 8005208:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800520c:	4810      	ldr	r0, [pc, #64]	; (8005250 <RedLedTask+0x50>)
 800520e:	f000 fc56 	bl	8005abe <HAL_GPIO_TogglePin>
			Status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(500));
 8005212:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	2300      	movs	r3, #0
 800521a:	2200      	movs	r2, #0
 800521c:	2100      	movs	r1, #0
 800521e:	2000      	movs	r0, #0
 8005220:	f7fc fea4 	bl	8001f6c <xTaskGenericNotifyWait>
 8005224:	60f8      	str	r0, [r7, #12]
			if(Status == pdTRUE)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d1ed      	bne.n	8005208 <RedLedTask+0x8>
			{
				portENTER_CRITICAL();
 800522c:	f7fd fcf4 	bl	8002c18 <vPortEnterCritical>
				NewTaskHandle = NULL;
 8005230:	4b08      	ldr	r3, [pc, #32]	; (8005254 <RedLedTask+0x54>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 8005236:	2201      	movs	r2, #1
 8005238:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800523c:	4804      	ldr	r0, [pc, #16]	; (8005250 <RedLedTask+0x50>)
 800523e:	f000 fc25 	bl	8005a8c <HAL_GPIO_WritePin>
				portEXIT_CRITICAL();
 8005242:	f7fd fd19 	bl	8002c78 <vPortExitCritical>
				vTaskDelete(NULL);
 8005246:	2000      	movs	r0, #0
 8005248:	f7fc f910 	bl	800146c <vTaskDelete>
			HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
 800524c:	e7dc      	b.n	8005208 <RedLedTask+0x8>
 800524e:	bf00      	nop
 8005250:	40021800 	.word	0x40021800
 8005254:	20013454 	.word	0x20013454

08005258 <ButtonISR>:
			}
		}
}

void ButtonISR()
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af02      	add	r7, sp, #8
	BaseType_t	HigherPrioTask;

	HigherPrioTask = pdFALSE;
 800525e:	2300      	movs	r3, #0
 8005260:	607b      	str	r3, [r7, #4]

	xTaskNotifyFromISR(NewTaskHandle,0,eNoAction,&HigherPrioTask);//Unblocks the next task of higher priority
 8005262:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <ButtonISR+0x48>)
 8005264:	6818      	ldr	r0, [r3, #0]
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	2300      	movs	r3, #0
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	2300      	movs	r3, #0
 8005270:	2200      	movs	r2, #0
 8005272:	2100      	movs	r1, #0
 8005274:	f7fc ff02 	bl	800207c <xTaskGenericNotifyFromISR>
																  //if last field is given.
	portYIELD_FROM_ISR(HigherPrioTask);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <ButtonISR+0x3c>
 800527e:	f7ff f9a7 	bl	80045d0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8005282:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <ButtonISR+0x4c>)
 8005284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	f3bf 8f6f 	isb	sy
}
 8005292:	e001      	b.n	8005298 <ButtonISR+0x40>
	portYIELD_FROM_ISR(HigherPrioTask);
 8005294:	f7ff f980 	bl	8004598 <SEGGER_SYSVIEW_RecordExitISR>
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20013454 	.word	0x20013454
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a04      	ldr	r2, [pc, #16]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d101      	bne.n	80052be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80052ba:	f000 f939 	bl	8005530 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80052be:	bf00      	nop
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40001000 	.word	0x40001000

080052cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052d0:	b672      	cpsid	i
}
 80052d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80052d4:	e7fe      	b.n	80052d4 <Error_Handler+0x8>
	...

080052d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052de:	2300      	movs	r3, #0
 80052e0:	607b      	str	r3, [r7, #4]
 80052e2:	4b10      	ldr	r3, [pc, #64]	; (8005324 <HAL_MspInit+0x4c>)
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	4a0f      	ldr	r2, [pc, #60]	; (8005324 <HAL_MspInit+0x4c>)
 80052e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052ec:	6453      	str	r3, [r2, #68]	; 0x44
 80052ee:	4b0d      	ldr	r3, [pc, #52]	; (8005324 <HAL_MspInit+0x4c>)
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f6:	607b      	str	r3, [r7, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052fa:	2300      	movs	r3, #0
 80052fc:	603b      	str	r3, [r7, #0]
 80052fe:	4b09      	ldr	r3, [pc, #36]	; (8005324 <HAL_MspInit+0x4c>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	4a08      	ldr	r2, [pc, #32]	; (8005324 <HAL_MspInit+0x4c>)
 8005304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005308:	6413      	str	r3, [r2, #64]	; 0x40
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <HAL_MspInit+0x4c>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40023800 	.word	0x40023800

08005328 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08e      	sub	sp, #56	; 0x38
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	4b33      	ldr	r3, [pc, #204]	; (800540c <HAL_InitTick+0xe4>)
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	4a32      	ldr	r2, [pc, #200]	; (800540c <HAL_InitTick+0xe4>)
 8005342:	f043 0310 	orr.w	r3, r3, #16
 8005346:	6413      	str	r3, [r2, #64]	; 0x40
 8005348:	4b30      	ldr	r3, [pc, #192]	; (800540c <HAL_InitTick+0xe4>)
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005354:	f107 0210 	add.w	r2, r7, #16
 8005358:	f107 0314 	add.w	r3, r7, #20
 800535c:	4611      	mov	r1, r2
 800535e:	4618      	mov	r0, r3
 8005360:	f001 f870 	bl	8006444 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d103      	bne.n	8005376 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800536e:	f001 f855 	bl	800641c <HAL_RCC_GetPCLK1Freq>
 8005372:	6378      	str	r0, [r7, #52]	; 0x34
 8005374:	e004      	b.n	8005380 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005376:	f001 f851 	bl	800641c <HAL_RCC_GetPCLK1Freq>
 800537a:	4603      	mov	r3, r0
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005382:	4a23      	ldr	r2, [pc, #140]	; (8005410 <HAL_InitTick+0xe8>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	0c9b      	lsrs	r3, r3, #18
 800538a:	3b01      	subs	r3, #1
 800538c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800538e:	4b21      	ldr	r3, [pc, #132]	; (8005414 <HAL_InitTick+0xec>)
 8005390:	4a21      	ldr	r2, [pc, #132]	; (8005418 <HAL_InitTick+0xf0>)
 8005392:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005394:	4b1f      	ldr	r3, [pc, #124]	; (8005414 <HAL_InitTick+0xec>)
 8005396:	f240 32e7 	movw	r2, #999	; 0x3e7
 800539a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800539c:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <HAL_InitTick+0xec>)
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80053a2:	4b1c      	ldr	r3, [pc, #112]	; (8005414 <HAL_InitTick+0xec>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053a8:	4b1a      	ldr	r3, [pc, #104]	; (8005414 <HAL_InitTick+0xec>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053ae:	4b19      	ldr	r3, [pc, #100]	; (8005414 <HAL_InitTick+0xec>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80053b4:	4817      	ldr	r0, [pc, #92]	; (8005414 <HAL_InitTick+0xec>)
 80053b6:	f001 f877 	bl	80064a8 <HAL_TIM_Base_Init>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80053c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d11b      	bne.n	8005400 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80053c8:	4812      	ldr	r0, [pc, #72]	; (8005414 <HAL_InitTick+0xec>)
 80053ca:	f001 f8c7 	bl	800655c <HAL_TIM_Base_Start_IT>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80053d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d111      	bne.n	8005400 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80053dc:	2036      	movs	r0, #54	; 0x36
 80053de:	f000 f99b 	bl	8005718 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b0f      	cmp	r3, #15
 80053e6:	d808      	bhi.n	80053fa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80053e8:	2200      	movs	r2, #0
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	2036      	movs	r0, #54	; 0x36
 80053ee:	f000 f977 	bl	80056e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053f2:	4a0a      	ldr	r2, [pc, #40]	; (800541c <HAL_InitTick+0xf4>)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	e002      	b.n	8005400 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005400:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005404:	4618      	mov	r0, r3
 8005406:	3738      	adds	r7, #56	; 0x38
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40023800 	.word	0x40023800
 8005410:	431bde83 	.word	0x431bde83
 8005414:	20013458 	.word	0x20013458
 8005418:	40001000 	.word	0x40001000
 800541c:	2000000c 	.word	0x2000000c

08005420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005424:	e7fe      	b.n	8005424 <NMI_Handler+0x4>

08005426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005426:	b480      	push	{r7}
 8005428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800542a:	e7fe      	b.n	800542a <HardFault_Handler+0x4>

0800542c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005430:	e7fe      	b.n	8005430 <MemManage_Handler+0x4>

08005432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005432:	b480      	push	{r7}
 8005434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005436:	e7fe      	b.n	8005436 <BusFault_Handler+0x4>

08005438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800543c:	e7fe      	b.n	800543c <UsageFault_Handler+0x4>

0800543e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800543e:	b480      	push	{r7}
 8005440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005442:	bf00      	nop
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */


  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005450:	2001      	movs	r0, #1
 8005452:	f000 fb4f 	bl	8005af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  ButtonISR();
 8005456:	f7ff feff 	bl	8005258 <ButtonISR>

  /* USER CODE END EXTI0_IRQn 1 */
}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005464:	4802      	ldr	r0, [pc, #8]	; (8005470 <TIM6_DAC_IRQHandler+0x10>)
 8005466:	f001 f8e9 	bl	800663c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800546a:	bf00      	nop
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20013458 	.word	0x20013458

08005474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005478:	4b06      	ldr	r3, [pc, #24]	; (8005494 <SystemInit+0x20>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547e:	4a05      	ldr	r2, [pc, #20]	; (8005494 <SystemInit+0x20>)
 8005480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005488:	bf00      	nop
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	e000ed00 	.word	0xe000ed00

08005498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054d0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800549c:	480d      	ldr	r0, [pc, #52]	; (80054d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800549e:	490e      	ldr	r1, [pc, #56]	; (80054d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80054a0:	4a0e      	ldr	r2, [pc, #56]	; (80054dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80054a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054a4:	e002      	b.n	80054ac <LoopCopyDataInit>

080054a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054aa:	3304      	adds	r3, #4

080054ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054b0:	d3f9      	bcc.n	80054a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054b2:	4a0b      	ldr	r2, [pc, #44]	; (80054e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80054b4:	4c0b      	ldr	r4, [pc, #44]	; (80054e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80054b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054b8:	e001      	b.n	80054be <LoopFillZerobss>

080054ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054bc:	3204      	adds	r2, #4

080054be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054c0:	d3fb      	bcc.n	80054ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80054c2:	f7ff ffd7 	bl	8005474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054c6:	f001 fa9d 	bl	8006a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054ca:	f7ff fb27 	bl	8004b1c <main>
  bx  lr    
 80054ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80054d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80054d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054d8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80054dc:	08006b80 	.word	0x08006b80
  ldr r2, =_sbss
 80054e0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80054e4:	200134a4 	.word	0x200134a4

080054e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054e8:	e7fe      	b.n	80054e8 <ADC_IRQHandler>
	...

080054ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054f0:	4b0e      	ldr	r3, [pc, #56]	; (800552c <HAL_Init+0x40>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a0d      	ldr	r2, [pc, #52]	; (800552c <HAL_Init+0x40>)
 80054f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054fc:	4b0b      	ldr	r3, [pc, #44]	; (800552c <HAL_Init+0x40>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a0a      	ldr	r2, [pc, #40]	; (800552c <HAL_Init+0x40>)
 8005502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005508:	4b08      	ldr	r3, [pc, #32]	; (800552c <HAL_Init+0x40>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a07      	ldr	r2, [pc, #28]	; (800552c <HAL_Init+0x40>)
 800550e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005514:	2003      	movs	r0, #3
 8005516:	f000 f8d8 	bl	80056ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800551a:	2000      	movs	r0, #0
 800551c:	f7ff ff04 	bl	8005328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005520:	f7ff feda 	bl	80052d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40023c00 	.word	0x40023c00

08005530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <HAL_IncTick+0x20>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	4b06      	ldr	r3, [pc, #24]	; (8005554 <HAL_IncTick+0x24>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4413      	add	r3, r2
 8005540:	4a04      	ldr	r2, [pc, #16]	; (8005554 <HAL_IncTick+0x24>)
 8005542:	6013      	str	r3, [r2, #0]
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	20000010 	.word	0x20000010
 8005554:	200134a0 	.word	0x200134a0

08005558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return uwTick;
 800555c:	4b03      	ldr	r3, [pc, #12]	; (800556c <HAL_GetTick+0x14>)
 800555e:	681b      	ldr	r3, [r3, #0]
}
 8005560:	4618      	mov	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	200134a0 	.word	0x200134a0

08005570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005580:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <__NVIC_SetPriorityGrouping+0x44>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800558c:	4013      	ands	r3, r2
 800558e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800559c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055a2:	4a04      	ldr	r2, [pc, #16]	; (80055b4 <__NVIC_SetPriorityGrouping+0x44>)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	60d3      	str	r3, [r2, #12]
}
 80055a8:	bf00      	nop
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	e000ed00 	.word	0xe000ed00

080055b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055bc:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <__NVIC_GetPriorityGrouping+0x18>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	0a1b      	lsrs	r3, r3, #8
 80055c2:	f003 0307 	and.w	r3, r3, #7
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	e000ed00 	.word	0xe000ed00

080055d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	db0b      	blt.n	80055fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	f003 021f 	and.w	r2, r3, #31
 80055ec:	4907      	ldr	r1, [pc, #28]	; (800560c <__NVIC_EnableIRQ+0x38>)
 80055ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	2001      	movs	r0, #1
 80055f6:	fa00 f202 	lsl.w	r2, r0, r2
 80055fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	e000e100 	.word	0xe000e100

08005610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	6039      	str	r1, [r7, #0]
 800561a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800561c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005620:	2b00      	cmp	r3, #0
 8005622:	db0a      	blt.n	800563a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	b2da      	uxtb	r2, r3
 8005628:	490c      	ldr	r1, [pc, #48]	; (800565c <__NVIC_SetPriority+0x4c>)
 800562a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562e:	0112      	lsls	r2, r2, #4
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	440b      	add	r3, r1
 8005634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005638:	e00a      	b.n	8005650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	b2da      	uxtb	r2, r3
 800563e:	4908      	ldr	r1, [pc, #32]	; (8005660 <__NVIC_SetPriority+0x50>)
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	3b04      	subs	r3, #4
 8005648:	0112      	lsls	r2, r2, #4
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	440b      	add	r3, r1
 800564e:	761a      	strb	r2, [r3, #24]
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	e000e100 	.word	0xe000e100
 8005660:	e000ed00 	.word	0xe000ed00

08005664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005664:	b480      	push	{r7}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	f1c3 0307 	rsb	r3, r3, #7
 800567e:	2b04      	cmp	r3, #4
 8005680:	bf28      	it	cs
 8005682:	2304      	movcs	r3, #4
 8005684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	3304      	adds	r3, #4
 800568a:	2b06      	cmp	r3, #6
 800568c:	d902      	bls.n	8005694 <NVIC_EncodePriority+0x30>
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	3b03      	subs	r3, #3
 8005692:	e000      	b.n	8005696 <NVIC_EncodePriority+0x32>
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005698:	f04f 32ff 	mov.w	r2, #4294967295
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	43da      	mvns	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	401a      	ands	r2, r3
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056ac:	f04f 31ff 	mov.w	r1, #4294967295
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	fa01 f303 	lsl.w	r3, r1, r3
 80056b6:	43d9      	mvns	r1, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056bc:	4313      	orrs	r3, r2
         );
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3724      	adds	r7, #36	; 0x24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff ff4c 	bl	8005570 <__NVIC_SetPriorityGrouping>
}
 80056d8:	bf00      	nop
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056f2:	f7ff ff61 	bl	80055b8 <__NVIC_GetPriorityGrouping>
 80056f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	6978      	ldr	r0, [r7, #20]
 80056fe:	f7ff ffb1 	bl	8005664 <NVIC_EncodePriority>
 8005702:	4602      	mov	r2, r0
 8005704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005708:	4611      	mov	r1, r2
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff ff80 	bl	8005610 <__NVIC_SetPriority>
}
 8005710:	bf00      	nop
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff ff54 	bl	80055d4 <__NVIC_EnableIRQ>
}
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005734:	b480      	push	{r7}
 8005736:	b089      	sub	sp, #36	; 0x24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005746:	2300      	movs	r3, #0
 8005748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
 800574e:	e177      	b.n	8005a40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005750:	2201      	movs	r2, #1
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	4013      	ands	r3, r2
 8005762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	429a      	cmp	r2, r3
 800576a:	f040 8166 	bne.w	8005a3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	2b01      	cmp	r3, #1
 8005778:	d005      	beq.n	8005786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005782:	2b02      	cmp	r3, #2
 8005784:	d130      	bne.n	80057e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	2203      	movs	r2, #3
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	43db      	mvns	r3, r3
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	4013      	ands	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057bc:	2201      	movs	r2, #1
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	43db      	mvns	r3, r3
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	4013      	ands	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	091b      	lsrs	r3, r3, #4
 80057d2:	f003 0201 	and.w	r2, r3, #1
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	4313      	orrs	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d017      	beq.n	8005824 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	2203      	movs	r2, #3
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	43db      	mvns	r3, r3
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4013      	ands	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4313      	orrs	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d123      	bne.n	8005878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	08da      	lsrs	r2, r3, #3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3208      	adds	r2, #8
 8005838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800583c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	220f      	movs	r2, #15
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	43db      	mvns	r3, r3
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	4013      	ands	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	4313      	orrs	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	08da      	lsrs	r2, r3, #3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3208      	adds	r2, #8
 8005872:	69b9      	ldr	r1, [r7, #24]
 8005874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	2203      	movs	r2, #3
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	43db      	mvns	r3, r3
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	4013      	ands	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f003 0203 	and.w	r2, r3, #3
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80c0 	beq.w	8005a3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	4b66      	ldr	r3, [pc, #408]	; (8005a58 <HAL_GPIO_Init+0x324>)
 80058c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c2:	4a65      	ldr	r2, [pc, #404]	; (8005a58 <HAL_GPIO_Init+0x324>)
 80058c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058c8:	6453      	str	r3, [r2, #68]	; 0x44
 80058ca:	4b63      	ldr	r3, [pc, #396]	; (8005a58 <HAL_GPIO_Init+0x324>)
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058d6:	4a61      	ldr	r2, [pc, #388]	; (8005a5c <HAL_GPIO_Init+0x328>)
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	089b      	lsrs	r3, r3, #2
 80058dc:	3302      	adds	r3, #2
 80058de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	220f      	movs	r2, #15
 80058ee:	fa02 f303 	lsl.w	r3, r2, r3
 80058f2:	43db      	mvns	r3, r3
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	4013      	ands	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a58      	ldr	r2, [pc, #352]	; (8005a60 <HAL_GPIO_Init+0x32c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d037      	beq.n	8005972 <HAL_GPIO_Init+0x23e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a57      	ldr	r2, [pc, #348]	; (8005a64 <HAL_GPIO_Init+0x330>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d031      	beq.n	800596e <HAL_GPIO_Init+0x23a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a56      	ldr	r2, [pc, #344]	; (8005a68 <HAL_GPIO_Init+0x334>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d02b      	beq.n	800596a <HAL_GPIO_Init+0x236>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a55      	ldr	r2, [pc, #340]	; (8005a6c <HAL_GPIO_Init+0x338>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d025      	beq.n	8005966 <HAL_GPIO_Init+0x232>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a54      	ldr	r2, [pc, #336]	; (8005a70 <HAL_GPIO_Init+0x33c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d01f      	beq.n	8005962 <HAL_GPIO_Init+0x22e>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a53      	ldr	r2, [pc, #332]	; (8005a74 <HAL_GPIO_Init+0x340>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d019      	beq.n	800595e <HAL_GPIO_Init+0x22a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a52      	ldr	r2, [pc, #328]	; (8005a78 <HAL_GPIO_Init+0x344>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d013      	beq.n	800595a <HAL_GPIO_Init+0x226>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a51      	ldr	r2, [pc, #324]	; (8005a7c <HAL_GPIO_Init+0x348>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00d      	beq.n	8005956 <HAL_GPIO_Init+0x222>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a50      	ldr	r2, [pc, #320]	; (8005a80 <HAL_GPIO_Init+0x34c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d007      	beq.n	8005952 <HAL_GPIO_Init+0x21e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a4f      	ldr	r2, [pc, #316]	; (8005a84 <HAL_GPIO_Init+0x350>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d101      	bne.n	800594e <HAL_GPIO_Init+0x21a>
 800594a:	2309      	movs	r3, #9
 800594c:	e012      	b.n	8005974 <HAL_GPIO_Init+0x240>
 800594e:	230a      	movs	r3, #10
 8005950:	e010      	b.n	8005974 <HAL_GPIO_Init+0x240>
 8005952:	2308      	movs	r3, #8
 8005954:	e00e      	b.n	8005974 <HAL_GPIO_Init+0x240>
 8005956:	2307      	movs	r3, #7
 8005958:	e00c      	b.n	8005974 <HAL_GPIO_Init+0x240>
 800595a:	2306      	movs	r3, #6
 800595c:	e00a      	b.n	8005974 <HAL_GPIO_Init+0x240>
 800595e:	2305      	movs	r3, #5
 8005960:	e008      	b.n	8005974 <HAL_GPIO_Init+0x240>
 8005962:	2304      	movs	r3, #4
 8005964:	e006      	b.n	8005974 <HAL_GPIO_Init+0x240>
 8005966:	2303      	movs	r3, #3
 8005968:	e004      	b.n	8005974 <HAL_GPIO_Init+0x240>
 800596a:	2302      	movs	r3, #2
 800596c:	e002      	b.n	8005974 <HAL_GPIO_Init+0x240>
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <HAL_GPIO_Init+0x240>
 8005972:	2300      	movs	r3, #0
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	f002 0203 	and.w	r2, r2, #3
 800597a:	0092      	lsls	r2, r2, #2
 800597c:	4093      	lsls	r3, r2
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	4313      	orrs	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005984:	4935      	ldr	r1, [pc, #212]	; (8005a5c <HAL_GPIO_Init+0x328>)
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	089b      	lsrs	r3, r3, #2
 800598a:	3302      	adds	r3, #2
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005992:	4b3d      	ldr	r3, [pc, #244]	; (8005a88 <HAL_GPIO_Init+0x354>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	43db      	mvns	r3, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4013      	ands	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059b6:	4a34      	ldr	r2, [pc, #208]	; (8005a88 <HAL_GPIO_Init+0x354>)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059bc:	4b32      	ldr	r3, [pc, #200]	; (8005a88 <HAL_GPIO_Init+0x354>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	43db      	mvns	r3, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4013      	ands	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059e0:	4a29      	ldr	r2, [pc, #164]	; (8005a88 <HAL_GPIO_Init+0x354>)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059e6:	4b28      	ldr	r3, [pc, #160]	; (8005a88 <HAL_GPIO_Init+0x354>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	43db      	mvns	r3, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4013      	ands	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a0a:	4a1f      	ldr	r2, [pc, #124]	; (8005a88 <HAL_GPIO_Init+0x354>)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a10:	4b1d      	ldr	r3, [pc, #116]	; (8005a88 <HAL_GPIO_Init+0x354>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a34:	4a14      	ldr	r2, [pc, #80]	; (8005a88 <HAL_GPIO_Init+0x354>)
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2b0f      	cmp	r3, #15
 8005a44:	f67f ae84 	bls.w	8005750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a48:	bf00      	nop
 8005a4a:	bf00      	nop
 8005a4c:	3724      	adds	r7, #36	; 0x24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	40013800 	.word	0x40013800
 8005a60:	40020000 	.word	0x40020000
 8005a64:	40020400 	.word	0x40020400
 8005a68:	40020800 	.word	0x40020800
 8005a6c:	40020c00 	.word	0x40020c00
 8005a70:	40021000 	.word	0x40021000
 8005a74:	40021400 	.word	0x40021400
 8005a78:	40021800 	.word	0x40021800
 8005a7c:	40021c00 	.word	0x40021c00
 8005a80:	40022000 	.word	0x40022000
 8005a84:	40022400 	.word	0x40022400
 8005a88:	40013c00 	.word	0x40013c00

08005a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	807b      	strh	r3, [r7, #2]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a9c:	787b      	ldrb	r3, [r7, #1]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005aa2:	887a      	ldrh	r2, [r7, #2]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005aa8:	e003      	b.n	8005ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005aaa:	887b      	ldrh	r3, [r7, #2]
 8005aac:	041a      	lsls	r2, r3, #16
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	619a      	str	r2, [r3, #24]
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ad0:	887a      	ldrh	r2, [r7, #2]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	041a      	lsls	r2, r3, #16
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	43d9      	mvns	r1, r3
 8005adc:	887b      	ldrh	r3, [r7, #2]
 8005ade:	400b      	ands	r3, r1
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	619a      	str	r2, [r3, #24]
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
	...

08005af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005afe:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	4013      	ands	r3, r2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d006      	beq.n	8005b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b0a:	4a05      	ldr	r2, [pc, #20]	; (8005b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b0c:	88fb      	ldrh	r3, [r7, #6]
 8005b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b10:	88fb      	ldrh	r3, [r7, #6]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 f806 	bl	8005b24 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b18:	bf00      	nop
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40013c00 	.word	0x40013c00

08005b24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
	...

08005b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e267      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d075      	beq.n	8005c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b5a:	4b88      	ldr	r3, [pc, #544]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 030c 	and.w	r3, r3, #12
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d00c      	beq.n	8005b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b66:	4b85      	ldr	r3, [pc, #532]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d112      	bne.n	8005b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b72:	4b82      	ldr	r3, [pc, #520]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b7e:	d10b      	bne.n	8005b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b80:	4b7e      	ldr	r3, [pc, #504]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d05b      	beq.n	8005c44 <HAL_RCC_OscConfig+0x108>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d157      	bne.n	8005c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e242      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba0:	d106      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x74>
 8005ba2:	4b76      	ldr	r3, [pc, #472]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a75      	ldr	r2, [pc, #468]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	e01d      	b.n	8005bec <HAL_RCC_OscConfig+0xb0>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x98>
 8005bba:	4b70      	ldr	r3, [pc, #448]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a6f      	ldr	r2, [pc, #444]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	4b6d      	ldr	r3, [pc, #436]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a6c      	ldr	r2, [pc, #432]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	e00b      	b.n	8005bec <HAL_RCC_OscConfig+0xb0>
 8005bd4:	4b69      	ldr	r3, [pc, #420]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a68      	ldr	r2, [pc, #416]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	4b66      	ldr	r3, [pc, #408]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a65      	ldr	r2, [pc, #404]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d013      	beq.n	8005c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf4:	f7ff fcb0 	bl	8005558 <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bfc:	f7ff fcac 	bl	8005558 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b64      	cmp	r3, #100	; 0x64
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e207      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c0e:	4b5b      	ldr	r3, [pc, #364]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0f0      	beq.n	8005bfc <HAL_RCC_OscConfig+0xc0>
 8005c1a:	e014      	b.n	8005c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c1c:	f7ff fc9c 	bl	8005558 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c24:	f7ff fc98 	bl	8005558 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b64      	cmp	r3, #100	; 0x64
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e1f3      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c36:	4b51      	ldr	r3, [pc, #324]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f0      	bne.n	8005c24 <HAL_RCC_OscConfig+0xe8>
 8005c42:	e000      	b.n	8005c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d063      	beq.n	8005d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c52:	4b4a      	ldr	r3, [pc, #296]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 030c 	and.w	r3, r3, #12
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c5e:	4b47      	ldr	r3, [pc, #284]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d11c      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c6a:	4b44      	ldr	r3, [pc, #272]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d116      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c76:	4b41      	ldr	r3, [pc, #260]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_RCC_OscConfig+0x152>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d001      	beq.n	8005c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e1c7      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c8e:	4b3b      	ldr	r3, [pc, #236]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	4937      	ldr	r1, [pc, #220]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ca2:	e03a      	b.n	8005d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d020      	beq.n	8005cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cac:	4b34      	ldr	r3, [pc, #208]	; (8005d80 <HAL_RCC_OscConfig+0x244>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb2:	f7ff fc51 	bl	8005558 <HAL_GetTick>
 8005cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cba:	f7ff fc4d 	bl	8005558 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e1a8      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ccc:	4b2b      	ldr	r3, [pc, #172]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0f0      	beq.n	8005cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cd8:	4b28      	ldr	r3, [pc, #160]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	4925      	ldr	r1, [pc, #148]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	600b      	str	r3, [r1, #0]
 8005cec:	e015      	b.n	8005d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cee:	4b24      	ldr	r3, [pc, #144]	; (8005d80 <HAL_RCC_OscConfig+0x244>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf4:	f7ff fc30 	bl	8005558 <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cfc:	f7ff fc2c 	bl	8005558 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e187      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d0e:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f0      	bne.n	8005cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d036      	beq.n	8005d94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d016      	beq.n	8005d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d2e:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <HAL_RCC_OscConfig+0x248>)
 8005d30:	2201      	movs	r2, #1
 8005d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d34:	f7ff fc10 	bl	8005558 <HAL_GetTick>
 8005d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d3c:	f7ff fc0c 	bl	8005558 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e167      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0f0      	beq.n	8005d3c <HAL_RCC_OscConfig+0x200>
 8005d5a:	e01b      	b.n	8005d94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d5c:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <HAL_RCC_OscConfig+0x248>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d62:	f7ff fbf9 	bl	8005558 <HAL_GetTick>
 8005d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d68:	e00e      	b.n	8005d88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d6a:	f7ff fbf5 	bl	8005558 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d907      	bls.n	8005d88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e150      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	42470000 	.word	0x42470000
 8005d84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d88:	4b88      	ldr	r3, [pc, #544]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1ea      	bne.n	8005d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8097 	beq.w	8005ed0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005da2:	2300      	movs	r3, #0
 8005da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005da6:	4b81      	ldr	r3, [pc, #516]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10f      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005db2:	2300      	movs	r3, #0
 8005db4:	60bb      	str	r3, [r7, #8]
 8005db6:	4b7d      	ldr	r3, [pc, #500]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	4a7c      	ldr	r2, [pc, #496]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8005dc2:	4b7a      	ldr	r3, [pc, #488]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dca:	60bb      	str	r3, [r7, #8]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd2:	4b77      	ldr	r3, [pc, #476]	; (8005fb0 <HAL_RCC_OscConfig+0x474>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d118      	bne.n	8005e10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dde:	4b74      	ldr	r3, [pc, #464]	; (8005fb0 <HAL_RCC_OscConfig+0x474>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a73      	ldr	r2, [pc, #460]	; (8005fb0 <HAL_RCC_OscConfig+0x474>)
 8005de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dea:	f7ff fbb5 	bl	8005558 <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df2:	f7ff fbb1 	bl	8005558 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e10c      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e04:	4b6a      	ldr	r3, [pc, #424]	; (8005fb0 <HAL_RCC_OscConfig+0x474>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0f0      	beq.n	8005df2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d106      	bne.n	8005e26 <HAL_RCC_OscConfig+0x2ea>
 8005e18:	4b64      	ldr	r3, [pc, #400]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1c:	4a63      	ldr	r2, [pc, #396]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	6713      	str	r3, [r2, #112]	; 0x70
 8005e24:	e01c      	b.n	8005e60 <HAL_RCC_OscConfig+0x324>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	2b05      	cmp	r3, #5
 8005e2c:	d10c      	bne.n	8005e48 <HAL_RCC_OscConfig+0x30c>
 8005e2e:	4b5f      	ldr	r3, [pc, #380]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e32:	4a5e      	ldr	r2, [pc, #376]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e34:	f043 0304 	orr.w	r3, r3, #4
 8005e38:	6713      	str	r3, [r2, #112]	; 0x70
 8005e3a:	4b5c      	ldr	r3, [pc, #368]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3e:	4a5b      	ldr	r2, [pc, #364]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	6713      	str	r3, [r2, #112]	; 0x70
 8005e46:	e00b      	b.n	8005e60 <HAL_RCC_OscConfig+0x324>
 8005e48:	4b58      	ldr	r3, [pc, #352]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	4a57      	ldr	r2, [pc, #348]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e4e:	f023 0301 	bic.w	r3, r3, #1
 8005e52:	6713      	str	r3, [r2, #112]	; 0x70
 8005e54:	4b55      	ldr	r3, [pc, #340]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e58:	4a54      	ldr	r2, [pc, #336]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e5a:	f023 0304 	bic.w	r3, r3, #4
 8005e5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d015      	beq.n	8005e94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e68:	f7ff fb76 	bl	8005558 <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e6e:	e00a      	b.n	8005e86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e70:	f7ff fb72 	bl	8005558 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e0cb      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e86:	4b49      	ldr	r3, [pc, #292]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0ee      	beq.n	8005e70 <HAL_RCC_OscConfig+0x334>
 8005e92:	e014      	b.n	8005ebe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e94:	f7ff fb60 	bl	8005558 <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e9a:	e00a      	b.n	8005eb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e9c:	f7ff fb5c 	bl	8005558 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e0b5      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eb2:	4b3e      	ldr	r3, [pc, #248]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1ee      	bne.n	8005e9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ebe:	7dfb      	ldrb	r3, [r7, #23]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d105      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ec4:	4b39      	ldr	r3, [pc, #228]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	4a38      	ldr	r2, [pc, #224]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ece:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 80a1 	beq.w	800601c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005eda:	4b34      	ldr	r3, [pc, #208]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 030c 	and.w	r3, r3, #12
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d05c      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d141      	bne.n	8005f72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eee:	4b31      	ldr	r3, [pc, #196]	; (8005fb4 <HAL_RCC_OscConfig+0x478>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef4:	f7ff fb30 	bl	8005558 <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005efc:	f7ff fb2c 	bl	8005558 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e087      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0e:	4b27      	ldr	r3, [pc, #156]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f0      	bne.n	8005efc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69da      	ldr	r2, [r3, #28]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	431a      	orrs	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	019b      	lsls	r3, r3, #6
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f30:	085b      	lsrs	r3, r3, #1
 8005f32:	3b01      	subs	r3, #1
 8005f34:	041b      	lsls	r3, r3, #16
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	061b      	lsls	r3, r3, #24
 8005f3e:	491b      	ldr	r1, [pc, #108]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f44:	4b1b      	ldr	r3, [pc, #108]	; (8005fb4 <HAL_RCC_OscConfig+0x478>)
 8005f46:	2201      	movs	r2, #1
 8005f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f4a:	f7ff fb05 	bl	8005558 <HAL_GetTick>
 8005f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f50:	e008      	b.n	8005f64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f52:	f7ff fb01 	bl	8005558 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e05c      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f64:	4b11      	ldr	r3, [pc, #68]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0f0      	beq.n	8005f52 <HAL_RCC_OscConfig+0x416>
 8005f70:	e054      	b.n	800601c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f72:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <HAL_RCC_OscConfig+0x478>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f78:	f7ff faee 	bl	8005558 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f80:	f7ff faea 	bl	8005558 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e045      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f92:	4b06      	ldr	r3, [pc, #24]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f0      	bne.n	8005f80 <HAL_RCC_OscConfig+0x444>
 8005f9e:	e03d      	b.n	800601c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d107      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e038      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	40007000 	.word	0x40007000
 8005fb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fb8:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <HAL_RCC_OscConfig+0x4ec>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d028      	beq.n	8006018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d121      	bne.n	8006018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d11a      	bne.n	8006018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fe8:	4013      	ands	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d111      	bne.n	8006018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	085b      	lsrs	r3, r3, #1
 8006000:	3b01      	subs	r3, #1
 8006002:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006004:	429a      	cmp	r2, r3
 8006006:	d107      	bne.n	8006018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006014:	429a      	cmp	r2, r3
 8006016:	d001      	beq.n	800601c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40023800 	.word	0x40023800

0800602c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e0cc      	b.n	80061da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006040:	4b68      	ldr	r3, [pc, #416]	; (80061e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	429a      	cmp	r2, r3
 800604c:	d90c      	bls.n	8006068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800604e:	4b65      	ldr	r3, [pc, #404]	; (80061e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006056:	4b63      	ldr	r3, [pc, #396]	; (80061e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 030f 	and.w	r3, r3, #15
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d001      	beq.n	8006068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e0b8      	b.n	80061da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d020      	beq.n	80060b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d005      	beq.n	800608c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006080:	4b59      	ldr	r3, [pc, #356]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	4a58      	ldr	r2, [pc, #352]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800608a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0308 	and.w	r3, r3, #8
 8006094:	2b00      	cmp	r3, #0
 8006096:	d005      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006098:	4b53      	ldr	r3, [pc, #332]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	4a52      	ldr	r2, [pc, #328]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 800609e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060a4:	4b50      	ldr	r3, [pc, #320]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	494d      	ldr	r1, [pc, #308]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d044      	beq.n	800614c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d107      	bne.n	80060da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ca:	4b47      	ldr	r3, [pc, #284]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d119      	bne.n	800610a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e07f      	b.n	80061da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d003      	beq.n	80060ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d107      	bne.n	80060fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ea:	4b3f      	ldr	r3, [pc, #252]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e06f      	b.n	80061da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060fa:	4b3b      	ldr	r3, [pc, #236]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e067      	b.n	80061da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800610a:	4b37      	ldr	r3, [pc, #220]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f023 0203 	bic.w	r2, r3, #3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	4934      	ldr	r1, [pc, #208]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006118:	4313      	orrs	r3, r2
 800611a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800611c:	f7ff fa1c 	bl	8005558 <HAL_GetTick>
 8006120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006122:	e00a      	b.n	800613a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006124:	f7ff fa18 	bl	8005558 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006132:	4293      	cmp	r3, r2
 8006134:	d901      	bls.n	800613a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e04f      	b.n	80061da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800613a:	4b2b      	ldr	r3, [pc, #172]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 020c 	and.w	r2, r3, #12
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	429a      	cmp	r2, r3
 800614a:	d1eb      	bne.n	8006124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800614c:	4b25      	ldr	r3, [pc, #148]	; (80061e4 <HAL_RCC_ClockConfig+0x1b8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d20c      	bcs.n	8006174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615a:	4b22      	ldr	r3, [pc, #136]	; (80061e4 <HAL_RCC_ClockConfig+0x1b8>)
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006162:	4b20      	ldr	r3, [pc, #128]	; (80061e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	429a      	cmp	r2, r3
 800616e:	d001      	beq.n	8006174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e032      	b.n	80061da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006180:	4b19      	ldr	r3, [pc, #100]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	4916      	ldr	r1, [pc, #88]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 800618e:	4313      	orrs	r3, r2
 8006190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b00      	cmp	r3, #0
 800619c:	d009      	beq.n	80061b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800619e:	4b12      	ldr	r3, [pc, #72]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	490e      	ldr	r1, [pc, #56]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061b2:	f000 f821 	bl	80061f8 <HAL_RCC_GetSysClockFreq>
 80061b6:	4602      	mov	r2, r0
 80061b8:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	091b      	lsrs	r3, r3, #4
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	490a      	ldr	r1, [pc, #40]	; (80061ec <HAL_RCC_ClockConfig+0x1c0>)
 80061c4:	5ccb      	ldrb	r3, [r1, r3]
 80061c6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ca:	4a09      	ldr	r2, [pc, #36]	; (80061f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061ce:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <HAL_RCC_ClockConfig+0x1c8>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff f8a8 	bl	8005328 <HAL_InitTick>

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40023c00 	.word	0x40023c00
 80061e8:	40023800 	.word	0x40023800
 80061ec:	08006b58 	.word	0x08006b58
 80061f0:	20000008 	.word	0x20000008
 80061f4:	2000000c 	.word	0x2000000c

080061f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061fc:	b094      	sub	sp, #80	; 0x50
 80061fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	647b      	str	r3, [r7, #68]	; 0x44
 8006204:	2300      	movs	r3, #0
 8006206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006208:	2300      	movs	r3, #0
 800620a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006210:	4b79      	ldr	r3, [pc, #484]	; (80063f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 030c 	and.w	r3, r3, #12
 8006218:	2b08      	cmp	r3, #8
 800621a:	d00d      	beq.n	8006238 <HAL_RCC_GetSysClockFreq+0x40>
 800621c:	2b08      	cmp	r3, #8
 800621e:	f200 80e1 	bhi.w	80063e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_RCC_GetSysClockFreq+0x34>
 8006226:	2b04      	cmp	r3, #4
 8006228:	d003      	beq.n	8006232 <HAL_RCC_GetSysClockFreq+0x3a>
 800622a:	e0db      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800622c:	4b73      	ldr	r3, [pc, #460]	; (80063fc <HAL_RCC_GetSysClockFreq+0x204>)
 800622e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006230:	e0db      	b.n	80063ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006232:	4b73      	ldr	r3, [pc, #460]	; (8006400 <HAL_RCC_GetSysClockFreq+0x208>)
 8006234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006236:	e0d8      	b.n	80063ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006238:	4b6f      	ldr	r3, [pc, #444]	; (80063f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006240:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006242:	4b6d      	ldr	r3, [pc, #436]	; (80063f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d063      	beq.n	8006316 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800624e:	4b6a      	ldr	r3, [pc, #424]	; (80063f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	099b      	lsrs	r3, r3, #6
 8006254:	2200      	movs	r2, #0
 8006256:	63bb      	str	r3, [r7, #56]	; 0x38
 8006258:	63fa      	str	r2, [r7, #60]	; 0x3c
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006260:	633b      	str	r3, [r7, #48]	; 0x30
 8006262:	2300      	movs	r3, #0
 8006264:	637b      	str	r3, [r7, #52]	; 0x34
 8006266:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800626a:	4622      	mov	r2, r4
 800626c:	462b      	mov	r3, r5
 800626e:	f04f 0000 	mov.w	r0, #0
 8006272:	f04f 0100 	mov.w	r1, #0
 8006276:	0159      	lsls	r1, r3, #5
 8006278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800627c:	0150      	lsls	r0, r2, #5
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4621      	mov	r1, r4
 8006284:	1a51      	subs	r1, r2, r1
 8006286:	6139      	str	r1, [r7, #16]
 8006288:	4629      	mov	r1, r5
 800628a:	eb63 0301 	sbc.w	r3, r3, r1
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800629c:	4659      	mov	r1, fp
 800629e:	018b      	lsls	r3, r1, #6
 80062a0:	4651      	mov	r1, sl
 80062a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062a6:	4651      	mov	r1, sl
 80062a8:	018a      	lsls	r2, r1, #6
 80062aa:	4651      	mov	r1, sl
 80062ac:	ebb2 0801 	subs.w	r8, r2, r1
 80062b0:	4659      	mov	r1, fp
 80062b2:	eb63 0901 	sbc.w	r9, r3, r1
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062ca:	4690      	mov	r8, r2
 80062cc:	4699      	mov	r9, r3
 80062ce:	4623      	mov	r3, r4
 80062d0:	eb18 0303 	adds.w	r3, r8, r3
 80062d4:	60bb      	str	r3, [r7, #8]
 80062d6:	462b      	mov	r3, r5
 80062d8:	eb49 0303 	adc.w	r3, r9, r3
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062ea:	4629      	mov	r1, r5
 80062ec:	024b      	lsls	r3, r1, #9
 80062ee:	4621      	mov	r1, r4
 80062f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062f4:	4621      	mov	r1, r4
 80062f6:	024a      	lsls	r2, r1, #9
 80062f8:	4610      	mov	r0, r2
 80062fa:	4619      	mov	r1, r3
 80062fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062fe:	2200      	movs	r2, #0
 8006300:	62bb      	str	r3, [r7, #40]	; 0x28
 8006302:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006304:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006308:	f7f9 ffbc 	bl	8000284 <__aeabi_uldivmod>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4613      	mov	r3, r2
 8006312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006314:	e058      	b.n	80063c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006316:	4b38      	ldr	r3, [pc, #224]	; (80063f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	099b      	lsrs	r3, r3, #6
 800631c:	2200      	movs	r2, #0
 800631e:	4618      	mov	r0, r3
 8006320:	4611      	mov	r1, r2
 8006322:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006326:	623b      	str	r3, [r7, #32]
 8006328:	2300      	movs	r3, #0
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
 800632c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006330:	4642      	mov	r2, r8
 8006332:	464b      	mov	r3, r9
 8006334:	f04f 0000 	mov.w	r0, #0
 8006338:	f04f 0100 	mov.w	r1, #0
 800633c:	0159      	lsls	r1, r3, #5
 800633e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006342:	0150      	lsls	r0, r2, #5
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4641      	mov	r1, r8
 800634a:	ebb2 0a01 	subs.w	sl, r2, r1
 800634e:	4649      	mov	r1, r9
 8006350:	eb63 0b01 	sbc.w	fp, r3, r1
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	f04f 0300 	mov.w	r3, #0
 800635c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006360:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006364:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006368:	ebb2 040a 	subs.w	r4, r2, sl
 800636c:	eb63 050b 	sbc.w	r5, r3, fp
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 0300 	mov.w	r3, #0
 8006378:	00eb      	lsls	r3, r5, #3
 800637a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800637e:	00e2      	lsls	r2, r4, #3
 8006380:	4614      	mov	r4, r2
 8006382:	461d      	mov	r5, r3
 8006384:	4643      	mov	r3, r8
 8006386:	18e3      	adds	r3, r4, r3
 8006388:	603b      	str	r3, [r7, #0]
 800638a:	464b      	mov	r3, r9
 800638c:	eb45 0303 	adc.w	r3, r5, r3
 8006390:	607b      	str	r3, [r7, #4]
 8006392:	f04f 0200 	mov.w	r2, #0
 8006396:	f04f 0300 	mov.w	r3, #0
 800639a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800639e:	4629      	mov	r1, r5
 80063a0:	028b      	lsls	r3, r1, #10
 80063a2:	4621      	mov	r1, r4
 80063a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063a8:	4621      	mov	r1, r4
 80063aa:	028a      	lsls	r2, r1, #10
 80063ac:	4610      	mov	r0, r2
 80063ae:	4619      	mov	r1, r3
 80063b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063b2:	2200      	movs	r2, #0
 80063b4:	61bb      	str	r3, [r7, #24]
 80063b6:	61fa      	str	r2, [r7, #28]
 80063b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063bc:	f7f9 ff62 	bl	8000284 <__aeabi_uldivmod>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4613      	mov	r3, r2
 80063c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063c8:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	0c1b      	lsrs	r3, r3, #16
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	3301      	adds	r3, #1
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80063d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063e2:	e002      	b.n	80063ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <HAL_RCC_GetSysClockFreq+0x204>)
 80063e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3750      	adds	r7, #80	; 0x50
 80063f0:	46bd      	mov	sp, r7
 80063f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063f6:	bf00      	nop
 80063f8:	40023800 	.word	0x40023800
 80063fc:	00f42400 	.word	0x00f42400
 8006400:	007a1200 	.word	0x007a1200

08006404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006404:	b480      	push	{r7}
 8006406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006408:	4b03      	ldr	r3, [pc, #12]	; (8006418 <HAL_RCC_GetHCLKFreq+0x14>)
 800640a:	681b      	ldr	r3, [r3, #0]
}
 800640c:	4618      	mov	r0, r3
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	20000008 	.word	0x20000008

0800641c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006420:	f7ff fff0 	bl	8006404 <HAL_RCC_GetHCLKFreq>
 8006424:	4602      	mov	r2, r0
 8006426:	4b05      	ldr	r3, [pc, #20]	; (800643c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	0a9b      	lsrs	r3, r3, #10
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	4903      	ldr	r1, [pc, #12]	; (8006440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006432:	5ccb      	ldrb	r3, [r1, r3]
 8006434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006438:	4618      	mov	r0, r3
 800643a:	bd80      	pop	{r7, pc}
 800643c:	40023800 	.word	0x40023800
 8006440:	08006b68 	.word	0x08006b68

08006444 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	220f      	movs	r2, #15
 8006452:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006454:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <HAL_RCC_GetClockConfig+0x5c>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f003 0203 	and.w	r2, r3, #3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006460:	4b0f      	ldr	r3, [pc, #60]	; (80064a0 <HAL_RCC_GetClockConfig+0x5c>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800646c:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <HAL_RCC_GetClockConfig+0x5c>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006478:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <HAL_RCC_GetClockConfig+0x5c>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	08db      	lsrs	r3, r3, #3
 800647e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006486:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <HAL_RCC_GetClockConfig+0x60>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 020f 	and.w	r2, r3, #15
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	601a      	str	r2, [r3, #0]
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40023800 	.word	0x40023800
 80064a4:	40023c00 	.word	0x40023c00

080064a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e041      	b.n	800653e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f839 	bl	8006546 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f000 f9d8 	bl	800689c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
	...

0800655c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b01      	cmp	r3, #1
 800656e:	d001      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e04e      	b.n	8006612 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0201 	orr.w	r2, r2, #1
 800658a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a23      	ldr	r2, [pc, #140]	; (8006620 <HAL_TIM_Base_Start_IT+0xc4>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d022      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x80>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659e:	d01d      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x80>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <HAL_TIM_Base_Start_IT+0xc8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d018      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x80>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <HAL_TIM_Base_Start_IT+0xcc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d013      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x80>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1c      	ldr	r2, [pc, #112]	; (800662c <HAL_TIM_Base_Start_IT+0xd0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d00e      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x80>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <HAL_TIM_Base_Start_IT+0xd4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d009      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x80>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a19      	ldr	r2, [pc, #100]	; (8006634 <HAL_TIM_Base_Start_IT+0xd8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d004      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x80>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a18      	ldr	r2, [pc, #96]	; (8006638 <HAL_TIM_Base_Start_IT+0xdc>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d111      	bne.n	8006600 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b06      	cmp	r3, #6
 80065ec:	d010      	beq.n	8006610 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0201 	orr.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fe:	e007      	b.n	8006610 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40010000 	.word	0x40010000
 8006624:	40000400 	.word	0x40000400
 8006628:	40000800 	.word	0x40000800
 800662c:	40000c00 	.word	0x40000c00
 8006630:	40010400 	.word	0x40010400
 8006634:	40014000 	.word	0x40014000
 8006638:	40001800 	.word	0x40001800

0800663c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b02      	cmp	r3, #2
 8006650:	d122      	bne.n	8006698 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b02      	cmp	r3, #2
 800665e:	d11b      	bne.n	8006698 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0202 	mvn.w	r2, #2
 8006668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f8ee 	bl	8006860 <HAL_TIM_IC_CaptureCallback>
 8006684:	e005      	b.n	8006692 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f8e0 	bl	800684c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f8f1 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d122      	bne.n	80066ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d11b      	bne.n	80066ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f06f 0204 	mvn.w	r2, #4
 80066bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2202      	movs	r2, #2
 80066c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f8c4 	bl	8006860 <HAL_TIM_IC_CaptureCallback>
 80066d8:	e005      	b.n	80066e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f8b6 	bl	800684c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f8c7 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f003 0308 	and.w	r3, r3, #8
 80066f6:	2b08      	cmp	r3, #8
 80066f8:	d122      	bne.n	8006740 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b08      	cmp	r3, #8
 8006706:	d11b      	bne.n	8006740 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0208 	mvn.w	r2, #8
 8006710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2204      	movs	r2, #4
 8006716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f89a 	bl	8006860 <HAL_TIM_IC_CaptureCallback>
 800672c:	e005      	b.n	800673a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f88c 	bl	800684c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f89d 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0310 	and.w	r3, r3, #16
 800674a:	2b10      	cmp	r3, #16
 800674c:	d122      	bne.n	8006794 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b10      	cmp	r3, #16
 800675a:	d11b      	bne.n	8006794 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f06f 0210 	mvn.w	r2, #16
 8006764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2208      	movs	r2, #8
 800676a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f870 	bl	8006860 <HAL_TIM_IC_CaptureCallback>
 8006780:	e005      	b.n	800678e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f862 	bl	800684c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f873 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d10e      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d107      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f06f 0201 	mvn.w	r2, #1
 80067b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7fe fd74 	bl	80052a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ca:	2b80      	cmp	r3, #128	; 0x80
 80067cc:	d10e      	bne.n	80067ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d8:	2b80      	cmp	r3, #128	; 0x80
 80067da:	d107      	bne.n	80067ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f902 	bl	80069f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f6:	2b40      	cmp	r3, #64	; 0x40
 80067f8:	d10e      	bne.n	8006818 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b40      	cmp	r3, #64	; 0x40
 8006806:	d107      	bne.n	8006818 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f838 	bl	8006888 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b20      	cmp	r3, #32
 8006824:	d10e      	bne.n	8006844 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f003 0320 	and.w	r3, r3, #32
 8006830:	2b20      	cmp	r3, #32
 8006832:	d107      	bne.n	8006844 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f06f 0220 	mvn.w	r2, #32
 800683c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f8cc 	bl	80069dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a40      	ldr	r2, [pc, #256]	; (80069b0 <TIM_Base_SetConfig+0x114>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d013      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ba:	d00f      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a3d      	ldr	r2, [pc, #244]	; (80069b4 <TIM_Base_SetConfig+0x118>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00b      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a3c      	ldr	r2, [pc, #240]	; (80069b8 <TIM_Base_SetConfig+0x11c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d007      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a3b      	ldr	r2, [pc, #236]	; (80069bc <TIM_Base_SetConfig+0x120>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a3a      	ldr	r2, [pc, #232]	; (80069c0 <TIM_Base_SetConfig+0x124>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d108      	bne.n	80068ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a2f      	ldr	r2, [pc, #188]	; (80069b0 <TIM_Base_SetConfig+0x114>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d02b      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fc:	d027      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2c      	ldr	r2, [pc, #176]	; (80069b4 <TIM_Base_SetConfig+0x118>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d023      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a2b      	ldr	r2, [pc, #172]	; (80069b8 <TIM_Base_SetConfig+0x11c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01f      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a2a      	ldr	r2, [pc, #168]	; (80069bc <TIM_Base_SetConfig+0x120>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d01b      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a29      	ldr	r2, [pc, #164]	; (80069c0 <TIM_Base_SetConfig+0x124>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d017      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a28      	ldr	r2, [pc, #160]	; (80069c4 <TIM_Base_SetConfig+0x128>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d013      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a27      	ldr	r2, [pc, #156]	; (80069c8 <TIM_Base_SetConfig+0x12c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00f      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a26      	ldr	r2, [pc, #152]	; (80069cc <TIM_Base_SetConfig+0x130>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00b      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a25      	ldr	r2, [pc, #148]	; (80069d0 <TIM_Base_SetConfig+0x134>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a24      	ldr	r2, [pc, #144]	; (80069d4 <TIM_Base_SetConfig+0x138>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a23      	ldr	r2, [pc, #140]	; (80069d8 <TIM_Base_SetConfig+0x13c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d108      	bne.n	8006960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a0a      	ldr	r2, [pc, #40]	; (80069b0 <TIM_Base_SetConfig+0x114>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_Base_SetConfig+0xf8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a0c      	ldr	r2, [pc, #48]	; (80069c0 <TIM_Base_SetConfig+0x124>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d103      	bne.n	800699c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	615a      	str	r2, [r3, #20]
}
 80069a2:	bf00      	nop
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40010000 	.word	0x40010000
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40000c00 	.word	0x40000c00
 80069c0:	40010400 	.word	0x40010400
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40014400 	.word	0x40014400
 80069cc:	40014800 	.word	0x40014800
 80069d0:	40001800 	.word	0x40001800
 80069d4:	40001c00 	.word	0x40001c00
 80069d8:	40002000 	.word	0x40002000

080069dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <__libc_init_array>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	4d0d      	ldr	r5, [pc, #52]	; (8006a3c <__libc_init_array+0x38>)
 8006a08:	4c0d      	ldr	r4, [pc, #52]	; (8006a40 <__libc_init_array+0x3c>)
 8006a0a:	1b64      	subs	r4, r4, r5
 8006a0c:	10a4      	asrs	r4, r4, #2
 8006a0e:	2600      	movs	r6, #0
 8006a10:	42a6      	cmp	r6, r4
 8006a12:	d109      	bne.n	8006a28 <__libc_init_array+0x24>
 8006a14:	4d0b      	ldr	r5, [pc, #44]	; (8006a44 <__libc_init_array+0x40>)
 8006a16:	4c0c      	ldr	r4, [pc, #48]	; (8006a48 <__libc_init_array+0x44>)
 8006a18:	f000 f83e 	bl	8006a98 <_init>
 8006a1c:	1b64      	subs	r4, r4, r5
 8006a1e:	10a4      	asrs	r4, r4, #2
 8006a20:	2600      	movs	r6, #0
 8006a22:	42a6      	cmp	r6, r4
 8006a24:	d105      	bne.n	8006a32 <__libc_init_array+0x2e>
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2c:	4798      	blx	r3
 8006a2e:	3601      	adds	r6, #1
 8006a30:	e7ee      	b.n	8006a10 <__libc_init_array+0xc>
 8006a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a36:	4798      	blx	r3
 8006a38:	3601      	adds	r6, #1
 8006a3a:	e7f2      	b.n	8006a22 <__libc_init_array+0x1e>
 8006a3c:	08006b78 	.word	0x08006b78
 8006a40:	08006b78 	.word	0x08006b78
 8006a44:	08006b78 	.word	0x08006b78
 8006a48:	08006b7c 	.word	0x08006b7c

08006a4c <memcmp>:
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	3901      	subs	r1, #1
 8006a50:	4402      	add	r2, r0
 8006a52:	4290      	cmp	r0, r2
 8006a54:	d101      	bne.n	8006a5a <memcmp+0xe>
 8006a56:	2000      	movs	r0, #0
 8006a58:	e005      	b.n	8006a66 <memcmp+0x1a>
 8006a5a:	7803      	ldrb	r3, [r0, #0]
 8006a5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	d001      	beq.n	8006a68 <memcmp+0x1c>
 8006a64:	1b18      	subs	r0, r3, r4
 8006a66:	bd10      	pop	{r4, pc}
 8006a68:	3001      	adds	r0, #1
 8006a6a:	e7f2      	b.n	8006a52 <memcmp+0x6>

08006a6c <memcpy>:
 8006a6c:	440a      	add	r2, r1
 8006a6e:	4291      	cmp	r1, r2
 8006a70:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a74:	d100      	bne.n	8006a78 <memcpy+0xc>
 8006a76:	4770      	bx	lr
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a82:	4291      	cmp	r1, r2
 8006a84:	d1f9      	bne.n	8006a7a <memcpy+0xe>
 8006a86:	bd10      	pop	{r4, pc}

08006a88 <memset>:
 8006a88:	4402      	add	r2, r0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d100      	bne.n	8006a92 <memset+0xa>
 8006a90:	4770      	bx	lr
 8006a92:	f803 1b01 	strb.w	r1, [r3], #1
 8006a96:	e7f9      	b.n	8006a8c <memset+0x4>

08006a98 <_init>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	bf00      	nop
 8006a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9e:	bc08      	pop	{r3}
 8006aa0:	469e      	mov	lr, r3
 8006aa2:	4770      	bx	lr

08006aa4 <_fini>:
 8006aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa6:	bf00      	nop
 8006aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aaa:	bc08      	pop	{r3}
 8006aac:	469e      	mov	lr, r3
 8006aae:	4770      	bx	lr
